{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/logo.png","path":"images/logo.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.a1ed4e.css","path":"main.a1ed4e.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.1c60ce.js","path":"mobile.1c60ce.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.01b703.js","path":"slider.01b703.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.09c351.js","path":"mobile.09c351.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.a1ed4e.js","path":"main.a1ed4e.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.09701d.svg","path":"fonts/iconfont.09701d.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.5539f3.js","path":"slider.5539f3.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.f86d3a.css","path":"main.f86d3a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.f86d3a.js","path":"main.f86d3a.js","modified":0,"renderable":1},{"_id":"source/images/2017-4-26/02.png","path":"images/2017-4-26/02.png","modified":1,"renderable":0},{"_id":"source/images/2017-4-26/03.png","path":"images/2017-4-26/03.png","modified":1,"renderable":0},{"_id":"source/images/2017-4-26/04.png","path":"images/2017-4-26/04.png","modified":1,"renderable":0},{"_id":"source/images/2017-4-26/05.png","path":"images/2017-4-26/05.png","modified":1,"renderable":0},{"_id":"source/images/2017-4-26/06.png","path":"images/2017-4-26/06.png","modified":1,"renderable":0},{"_id":"source/images/2017-4-26/07.png","path":"images/2017-4-26/07.png","modified":1,"renderable":0},{"_id":"source/images/2017-4-26/08.png","path":"images/2017-4-26/08.png","modified":1,"renderable":0},{"_id":"source/images/2017-4-26/01.png","path":"images/2017-4-26/01.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1493112560199},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1493112558501},{"_id":"themes/yilia/_config.yml","hash":"a02ecfe443795ac024d0635376ecd3004ae03711","modified":1493112558506},{"_id":"source/_posts/2017-03-23-使用hexo遇到的一个坑.md","hash":"11decc48c4248fdf07dcd9442c9d5851bcd20c80","modified":1493112558431},{"_id":"source/_posts/2017-04-06-立即显示上传的图片.md","hash":"31e3ad16dab1b5b4f760634219ce689c1efc4c28","modified":1493112558480},{"_id":"source/category/index.md","hash":"5e751760e6f70548d17077318c8163eaeb48c5c1","modified":1493112558489},{"_id":"source/images/favicon.ico","hash":"4dfbe4ef371ba3ee877b3d9e761424f2cdf36553","modified":1493112558492},{"_id":"source/images/logo.png","hash":"fb0ed04cf417424f98ecf09bac0c6af93637e5d0","modified":1493112558495},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1493112558511},{"_id":"themes/yilia/package.json","hash":"9ddaba266f5a78e2cf1ce30d7c5f586d74289a82","modified":1493112558990},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1493112558515},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1493112558521},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1493112558525},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1493112558540},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1493112558535},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1493112558529},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1493112558953},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1493112558957},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1493112558962},{"_id":"source/_posts/2017-03-22-express路由.md","hash":"8114f710aa24c8787cafc68ff35ac306eb51b553","modified":1493112558426},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493112558977},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493112558980},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1493112558984},{"_id":"themes/yilia/source/main.2d7529.css","hash":"9f4191c9082130c3eeab7f6e1cbdada4f19fb0b7","modified":1493112559585},{"_id":"source/_posts/2017-03-30-JavaScript排序算法及性能比较.md","hash":"494df5b5ea19d62d18abfd61790cc9fdd90f7a74","modified":1493112558441},{"_id":"themes/yilia/source/main.a1ed4e.css","hash":"dcc71f6c77b87ceb49a3023a23e15f8db60f66d8","modified":1493112559643},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1493112558973},{"_id":"source/_posts/2017-4-25-flexbox布局","hash":"8d6dd5bc853c0d6123fb2b75eadee7aae621ba5f","modified":1493112558486},{"_id":"themes/yilia/source/mobile.1c60ce.js","hash":"8bb5d67029f50cf775dae715c339d547037804ea","modified":1493112559960},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1493112559982},{"_id":"themes/yilia/source/slider.01b703.js","hash":"fdf5f67d389f3454bc51525a0d5fb5dda028ed20","modified":1493112560024},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1493112560191},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1493112558994},{"_id":"themes/yilia/source/mobile.09c351.js","hash":"dcd2a89ece583763c25989ad451ce04555101ab8","modified":1493112559938},{"_id":"themes/yilia/source/main.2d7529.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1493112559637},{"_id":"themes/yilia/source/main.a1ed4e.js","hash":"a6c198f27141acd3fe49163f4e6eac35cee61866","modified":1493112559671},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1493112558548},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1493112558553},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1493112559526},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"4767e666849ac2600c7a1cbf94c54cf702864f80","modified":1493112558629},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1493112558695},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1493112558700},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1493112558704},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1493112558726},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1493112558754},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1493112558780},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1493112558790},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1493112558770},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1493112558760},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1493112558579},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1493112558948},{"_id":"themes/yilia/source/fonts/iconfont.09701d.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1493112559536},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1493112559544},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1493112559555},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1493112559561},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1493112558928},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1493112559570},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1493112559573},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1493112559576},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1493112559579},{"_id":"themes/yilia/source/slider.5539f3.js","hash":"7f25bbc893c7d62e21d8e0f8bd36355170e7fff3","modified":1493112560164},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1493112558943},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1493112559567},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1493112559530},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1493112559013},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1493112559020},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1493112559039},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1493112559024},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"948e44c47c3d70584da93e7ce025dede9b7573d7","modified":1493112559115},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1493112559029},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1493112559245},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1493112559249},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1493112559034},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"5dc23be94451d54f0757de85747fd75061e8cf52","modified":1493112559155},{"_id":"themes/yilia/source-src/css/left.scss","hash":"480819a673108db361c91e28e654e1ae3d0aecc2","modified":1493112559273},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1493112559277},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1493112559282},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1493112559255},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1493112559292},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1493112559296},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1493112559287},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1493112559308},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1493112559260},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1493112559318},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1493112559313},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1493112559323},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1493112559302},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1493112559378},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1493112559391},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1493112559399},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1493112559360},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1493112559416},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1493112559354},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1493112559044},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1493112559445},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1493112559455},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1493112559408},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1493112559428},{"_id":"themes/yilia/source/main.f86d3a.css","hash":"19236a5053690d087f1d5e8cab7826a2524f37c6","modified":1493112559678},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1493112558798},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1493112558803},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1493112559501},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1493112558817},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1493112559462},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1493112558880},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1493112558884},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1493112559051},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1493112559074},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1493112559082},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1493112559509},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1493112559110},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1493112559197},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1493112559102},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1493112559233},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1493112559240},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1493112559263},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1493112559265},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1493112559268},{"_id":"themes/yilia/source/main.f86d3a.js","hash":"0ecf6e8f68a074e7152cfe5a50b1ea5802272aa3","modified":1493112559851},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1493112559212},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1493112558812},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1493112558865},{"_id":"public/content.json","hash":"8e0f31919837d6fb03ae7a6398192fe7ad261013","modified":1493177651014},{"_id":"public/category/index.html","hash":"bb3ccb40d917ee7049d58a90295cbeb020e85451","modified":1493115917315},{"_id":"public/2017/03/22/express路由/index.html","hash":"1042e084d709a37d36a0e86877720d22303172e9","modified":1493115917331},{"_id":"public/2017/03/30/JavaScript排序算法及性能比较/index.html","hash":"8d0be1b54046f9fe379404de57982f82359b17d3","modified":1493115917332},{"_id":"public/2017/03/23/使用hexo遇到的一个坑/index.html","hash":"1327bc0c33f243b407dae94cdafbbeefc95ea3d2","modified":1493115917332},{"_id":"public/2017/04/06/立即显示上传的图片/index.html","hash":"4d5c38bf633656f6de2c16dac5ce1fe54cb4745e","modified":1493115917332},{"_id":"public/categories/填坑/index.html","hash":"c7cdd8e2f36b1b871ca3b21b0ab3c330feb23de5","modified":1493115917333},{"_id":"public/categories/分享/index.html","hash":"597a1260d5f5b8172d8a34684a9ae34d1fe85105","modified":1493115917333},{"_id":"public/archives/index.html","hash":"599be62e4fa12843ea3b25e8f5304dc4047df199","modified":1493115917332},{"_id":"public/archives/2017/index.html","hash":"b9dfdf19563d87bfc3bb635faf8abbbe2b71f41c","modified":1493115917332},{"_id":"public/archives/2017/03/index.html","hash":"400fcdad058ca293692ac2adc982a4fc829a17a0","modified":1493115917333},{"_id":"public/archives/2017/04/index.html","hash":"e690b3aac77eab070f39476bc2bac671eed656cd","modified":1493115917333},{"_id":"public/index.html","hash":"48f850d482874fbcd24f507d6a60984c9c098936","modified":1493177651257},{"_id":"public/tags/hexo/index.html","hash":"5ff7965fa4f67ab557c9f72e5a4663c9116f3eb9","modified":1493115917333},{"_id":"public/tags/img/index.html","hash":"3989b3a5c0f29efa31ec54aad48af61f6ba19649","modified":1493115917333},{"_id":"public/tags/upload/index.html","hash":"732942095b6653803350fef786edd0e4c27b1a75","modified":1493115917333},{"_id":"public/tags/nodejs/index.html","hash":"77df2b7143c54f5d3692f955ddc7ecc069451981","modified":1493115917333},{"_id":"public/tags/file/index.html","hash":"f4b735b9478eaf04569d95f0d19a18e33ebae2b7","modified":1493115917333},{"_id":"public/tags/express/index.html","hash":"4a4d756326c6602cddd77c32962611830257f651","modified":1493115917333},{"_id":"public/tags/router/index.html","hash":"4d781e6da7260ed1e8671d3574527aadcc862e3d","modified":1493115917333},{"_id":"public/images/favicon.ico","hash":"4dfbe4ef371ba3ee877b3d9e761424f2cdf36553","modified":1493115463227},{"_id":"public/images/logo.png","hash":"fb0ed04cf417424f98ecf09bac0c6af93637e5d0","modified":1493115463227},{"_id":"public/fonts/iconfont.09701d.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1493115463227},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1493115463227},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1493115463227},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1493115463227},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1493115463227},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1493115463227},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1493115463227},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1493115463227},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1493115463227},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1493115463228},{"_id":"public/main.2d7529.css","hash":"9f4191c9082130c3eeab7f6e1cbdada4f19fb0b7","modified":1493115463243},{"_id":"public/main.a1ed4e.css","hash":"dcc71f6c77b87ceb49a3023a23e15f8db60f66d8","modified":1493115463243},{"_id":"public/mobile.1c60ce.js","hash":"8bb5d67029f50cf775dae715c339d547037804ea","modified":1493115463243},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1493115463243},{"_id":"public/slider.01b703.js","hash":"b1bfd16e66dfac0d401ed4de86d55d421a27d4de","modified":1493115463243},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1493115463243},{"_id":"public/mobile.09c351.js","hash":"e3956efa68988f9b11265f7c207bf62b238070b3","modified":1493115463243},{"_id":"public/main.a1ed4e.js","hash":"ad1fbcd9e7f632227d6553130d35e1ae262a11e5","modified":1493115463243},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1493115463243},{"_id":"public/slider.5539f3.js","hash":"a7f4aacd798f3279ea3b1cfead1db4506896a0c3","modified":1493115463243},{"_id":"public/main.f86d3a.css","hash":"fdcc2accfdcea7281a39f97325c420671c3e7392","modified":1493115463243},{"_id":"public/main.f86d3a.js","hash":"451bc7653232792d88093213e6c7774b0ccb0192","modified":1493115463243},{"_id":"source/_posts/2017-4-25-flexbox布局.md","hash":"eb81079daf73505d98c4fa67bd6844021c8ef996","modified":1493177418554},{"_id":"public/2017/04/25/2017-4-25-flexbox布局/index.html","hash":"a98352a1bb5ee0c243eb11e269a2c4d2f0a02c17","modified":1493177651218},{"_id":"public/tags/flexbox/index.html","hash":"8d8f6a5c4e46154347b37d7ea9866b71ca3ce0e1","modified":1493115917335},{"_id":"public/tags/css/index.html","hash":"10c82ebf59fdf04d39e64cf2281fb6e68cd1a76c","modified":1493115917335},{"_id":"public/tags/页面布局/index.html","hash":"39237b3696b593630c7e5a490de4a37c19871eb5","modified":1493115917335},{"_id":"source/images/2017-4-26/02.png","hash":"7081672a68b671e173f6b1714d4b90c15c17d1d7","modified":1493176725564},{"_id":"source/images/2017-4-26/03.png","hash":"47a2109a4ac5ae6d4fe76082415b6dca9fa69886","modified":1493176820779},{"_id":"source/images/2017-4-26/04.png","hash":"1ff46faba499112f06297b492bf0365ebbbbc281","modified":1493176868669},{"_id":"source/images/2017-4-26/05.png","hash":"2c8be133795501f3387cbccbda3b622f20894d0b","modified":1493176895289},{"_id":"source/images/2017-4-26/06.png","hash":"c596c8dd57aab64018e3ba0ec38c4a6442cb62c6","modified":1493176921170},{"_id":"source/images/2017-4-26/07.png","hash":"d9847329d015f70213eed801a863abacb722e8e0","modified":1493176945396},{"_id":"source/images/2017-4-26/08.png","hash":"88057db67819e4ef1b5f12a5c13808e4c387886a","modified":1493176975706},{"_id":"source/images/2017-4-26/01.png","hash":"b4dbe4c71e51878cfca5e52eb74a5d66745011f7","modified":1493173395954},{"_id":"public/images/2017-4-26/02.png","hash":"7081672a68b671e173f6b1714d4b90c15c17d1d7","modified":1493177651268},{"_id":"public/images/2017-4-26/03.png","hash":"47a2109a4ac5ae6d4fe76082415b6dca9fa69886","modified":1493177651268},{"_id":"public/images/2017-4-26/06.png","hash":"c596c8dd57aab64018e3ba0ec38c4a6442cb62c6","modified":1493177651268},{"_id":"public/images/2017-4-26/04.png","hash":"1ff46faba499112f06297b492bf0365ebbbbc281","modified":1493177651268},{"_id":"public/images/2017-4-26/07.png","hash":"d9847329d015f70213eed801a863abacb722e8e0","modified":1493177651268},{"_id":"public/images/2017-4-26/05.png","hash":"2c8be133795501f3387cbccbda3b622f20894d0b","modified":1493177651268},{"_id":"public/images/2017-4-26/08.png","hash":"88057db67819e4ef1b5f12a5c13808e4c387886a","modified":1493177651269},{"_id":"public/images/2017-4-26/01.png","hash":"b4dbe4c71e51878cfca5e52eb74a5d66745011f7","modified":1493177651269}],"Category":[{"name":"填坑","_id":"cj1xee8dy0003d8yj6tbjdznu"},{"name":"分享","_id":"cj1xee8e70007d8yjtxhlx087"}],"Data":[],"Page":[{"title":"分类","date":"2017-03-22T10:12:53.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-22 18:12:53\n---\n","updated":"2017-04-25T09:29:18.489Z","path":"category/index.html","comments":1,"layout":"page","_id":"cj1xee8du0001d8yjkhj6q6hq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"使用hexo遇到的一个坑","date":"2017-03-23T03:46:16.000Z","_content":"\nhexo中首页列表的摘要（excerpt）弄不出来，一直显示全文\n\n修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！\n\n<!-- more -->\n\n原来只需要在文中加入`<!-- more -->`就可以了，这实在是个大坑！\n\n```javascript\n这就是一个简介\n\n<!-- more -->\n \n这里更多的内容\n```\n\n\n[原答案链接](http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客)","source":"_posts/2017-03-23-使用hexo遇到的一个坑.md","raw":"---\ntitle: 使用hexo遇到的一个坑\ndate: 2017-03-23 11:46:16\ntags: hexo\ncategories: 填坑\n---\n\nhexo中首页列表的摘要（excerpt）弄不出来，一直显示全文\n\n修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！\n\n<!-- more -->\n\n原来只需要在文中加入`<!-- more -->`就可以了，这实在是个大坑！\n\n```javascript\n这就是一个简介\n\n<!-- more -->\n \n这里更多的内容\n```\n\n\n[原答案链接](http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客)","slug":"使用hexo遇到的一个坑","published":1,"updated":"2017-04-25T09:29:18.431Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1xee8dp0000d8yj5tivjlsl","content":"<p>hexo中首页列表的摘要（excerpt）弄不出来，一直显示全文</p>\n<p>修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！</p>\n<a id=\"more\"></a>\n<p>原来只需要在文中加入<code>&lt;!-- more --&gt;</code>就可以了，这实在是个大坑！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">这就是一个简介</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"> </div><div class=\"line\">这里更多的内容</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客\" target=\"_blank\" rel=\"external\">原答案链接</a></p>\n","site":{"data":{}},"excerpt":"<p>hexo中首页列表的摘要（excerpt）弄不出来，一直显示全文</p>\n<p>修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！</p>","more":"<p>原来只需要在文中加入<code>&lt;!-- more --&gt;</code>就可以了，这实在是个大坑！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">这就是一个简介</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"> </div><div class=\"line\">这里更多的内容</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客\">原答案链接</a></p>"},{"title":"立即显示上传的图片(无需上传到服务器)","date":"2017-04-06T06:11:33.000Z","_content":"## 一、简介\n\n>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？\n\n<!-- more -->\n\n## 二、实现方法\n\n可以直接查看下面的代码，使用jquery来实现的\n\n``` javascript\n\n$(function() {  \n    /*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/  \n    $(\"#fileupload\").change(function() {  \n        var $file = $(this);  \n        var objUrl = $file[0].files[0];  \n        //获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  \n        var windowURL = window.URL || window.webkitURL;  \n        //createObjectURL创建一个指向该参数对象(图片)的URL  \n        var dataURL;  \n        dataURL = windowURL.createObjectURL(objUrl);  \n        $(\"#imageview\").attr(\"src\",dataURL);  \n    });  \n});  \n\n\n```\n\n页面代码\n``` javascript\n<body>  \n    <input id=\"fileupload\" type=\"file\" />  \n    <img id=\"imageview\" >  \n</body> \n\n```\n","source":"_posts/2017-04-06-立即显示上传的图片.md","raw":"---\ntitle: 立即显示上传的图片(无需上传到服务器)\ndate: 2017-04-06 14:11:33\ntags: \n- img\n- upload\n- file\ncategories: \n- 分享\n---\n## 一、简介\n\n>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？\n\n<!-- more -->\n\n## 二、实现方法\n\n可以直接查看下面的代码，使用jquery来实现的\n\n``` javascript\n\n$(function() {  \n    /*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/  \n    $(\"#fileupload\").change(function() {  \n        var $file = $(this);  \n        var objUrl = $file[0].files[0];  \n        //获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  \n        var windowURL = window.URL || window.webkitURL;  \n        //createObjectURL创建一个指向该参数对象(图片)的URL  \n        var dataURL;  \n        dataURL = windowURL.createObjectURL(objUrl);  \n        $(\"#imageview\").attr(\"src\",dataURL);  \n    });  \n});  \n\n\n```\n\n页面代码\n``` javascript\n<body>  \n    <input id=\"fileupload\" type=\"file\" />  \n    <img id=\"imageview\" >  \n</body> \n\n```\n","slug":"立即显示上传的图片","published":1,"updated":"2017-04-25T09:29:18.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1xee8dv0002d8yjypl6enx5","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"二、实现方法\"><a href=\"#二、实现方法\" class=\"headerlink\" title=\"二、实现方法\"></a>二、实现方法</h2><p>可以直接查看下面的代码，使用jquery来实现的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">/*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/</span>  </div><div class=\"line\">    $(<span class=\"string\">\"#fileupload\"</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> $file = $(<span class=\"keyword\">this</span>);  </div><div class=\"line\">        <span class=\"keyword\">var</span> objUrl = $file[<span class=\"number\">0</span>].files[<span class=\"number\">0</span>];  </div><div class=\"line\">        <span class=\"comment\">//获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> windowURL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;  </div><div class=\"line\">        <span class=\"comment\">//createObjectURL创建一个指向该参数对象(图片)的URL  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> dataURL;  </div><div class=\"line\">        dataURL = windowURL.createObjectURL(objUrl);  </div><div class=\"line\">        $(<span class=\"string\">\"#imageview\"</span>).attr(<span class=\"string\">\"src\"</span>,dataURL);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>页面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;  </div><div class=\"line\">    &lt;input id=\"fileupload\" type=\"file\" /&gt;  </div><div class=\"line\">    &lt;img id=\"imageview\" &gt;  </div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？</p>\n</blockquote>","more":"<h2 id=\"二、实现方法\"><a href=\"#二、实现方法\" class=\"headerlink\" title=\"二、实现方法\"></a>二、实现方法</h2><p>可以直接查看下面的代码，使用jquery来实现的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">/*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/</span>  </div><div class=\"line\">    $(<span class=\"string\">\"#fileupload\"</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> $file = $(<span class=\"keyword\">this</span>);  </div><div class=\"line\">        <span class=\"keyword\">var</span> objUrl = $file[<span class=\"number\">0</span>].files[<span class=\"number\">0</span>];  </div><div class=\"line\">        <span class=\"comment\">//获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> windowURL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;  </div><div class=\"line\">        <span class=\"comment\">//createObjectURL创建一个指向该参数对象(图片)的URL  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> dataURL;  </div><div class=\"line\">        dataURL = windowURL.createObjectURL(objUrl);  </div><div class=\"line\">        $(<span class=\"string\">\"#imageview\"</span>).attr(<span class=\"string\">\"src\"</span>,dataURL);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>页面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;  </div><div class=\"line\">    &lt;input id=\"fileupload\" type=\"file\" /&gt;  </div><div class=\"line\">    &lt;img id=\"imageview\" &gt;  </div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>"},{"title":"Express路由","date":"2017-03-22T08:11:33.000Z","_content":"## 一、简介\n\n>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n\n>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）\n\n>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。\n\n&nbsp;\n\n<!-- more -->\n\n## 二、express环境搭建\n\n1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快\n\n``` javascript\n$ npm install –g cnpm\n```\n\n2、新建一个目录，在目录下执行\n\n``` javascript\n$ cnpm install express --save\n```\n\n3、express环境已经搭建好了\n\n&nbsp;\n\n## 三、基本路由\n\n1、简单版，除了get请求，还有post、put、delete\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n    res.send('Hello World! <a href=\"/news\">to news</a>');\n});\n\napp.get('/news', function (req, res) {\n    res.send('this is news. <a href=\"/\">back</a>');\n}).post('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a post request!',\n        data: req.query\n    });\n}).put('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a put request!',\n        data: req.query\n    });\n}).delete('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a delete request!',\n        data: req.query\n    });\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、字符匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>ab?cd（匹配 acd 和 abcd）</li>');\n_routeList.push('<li>ab+cd（匹配 abcd、abbcd、abbbcd等）</li>');\n_routeList.push('<li>ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）</li>');\n_routeList.push('<li>ab(cd)?e（匹配 /abe 和 /abcde）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res, next) {\n  // res.send('ab?cd');\n  _routeStr.push('ab?cd');\n  next();\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res, next) {\n  // res.send('ab+cd');\n  \n  _routeStr.push('ab+cd');\n  next();\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res, next) {\n  // res.send('ab*cd');\n  _routeStr.push('ab*cd');\n  next();\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res, next) {\n // res.send('ab(cd)?e');\n _routeStr.push('ab(cd)?e');\n next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、正则匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>/a/（匹配任何路径中含有 a 的路径');\n_routeList.push('<li>/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res, next) {\n  _routeStr.push('/a/');\n  next();\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res, next) {\n  _routeStr.push('/.*fly$/');\n  next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、执行多个回调\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 多个回调函数，需指定执行next\napp.get('/b', function (req, res, next) {\n    console.log('this is function b one');\n    next();\n}, function (req, res) {\n    console.log('this is function b two');\n\n    res.send('Hello from B!');\n});\n\n\n// 多个回调传入，需指定执行next，最后必须有send\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/c', [cb0, cb1, cb2]);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n&nbsp;\n\n## 四、中间件router\n\n1、通过require导入各种路由配置文件\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\nvar _router1 = require('./router/r1.js');\nvar _router2 = require('./router/r2.js');\nvar _router3 = require('./router/r3.js');\nvar _router4 = require('./router/r4.js');\n\n\napp.use('/', _router1);\napp.use('/r2', _router2);\napp.use('/r3', _router3);\napp.use('/r4', _router4);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、简单版\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n    res.send('About birds');\n});\n\nmodule.exports = router;\n```\n\n3、通过路由中间件控制\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息\nrouter.use('/user/:id', function(req, res, next) {\n    console.log('Request URL:', req.originalUrl);\n    next();\n}, function (req, res, next) {\n    console.log('Request Type:', req.method);\n    next();\n});\n\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\nrouter.get('/user/:id', function (req, res, next) {\n    console.log(req.params, req.params.id == 0);\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0){\n      res.send('ID：' + req.params.id);\n  }\n  // 负责将控制权交给栈中下一个中间件\n  else{\n      next();\n  }\n}, function (req, res, next) {\n    // 渲染常规页面\n    res.send('next function ID：' + req.params.id);\n\n    // 填到下一个路由\n    // next();\n});\n\nmodule.exports = router;\n```\n\n使用`router.param`\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\nvar _pid;\n\nrouter.get('/blog/:pid', function (req, res, next) {\n    console.log('get function');\n});\n\n\nrouter.param('pid', function (req, res, next, pid){\n    console.log('param function');\n    // console.log(req.query);\n\n    setTimeout(function(){\n        _pid = pid;\n\n        res.send('my pid is：' + pid + '&&' + req.query.id);\n    }, 1000);\n\n    next();\n});\n\nmodule.exports = router;\n```\n\n多个参数的情况下\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 无效，可能是版本问题\n// router.param(['id', 'page'], function (req, res, next, value) {\n//   console.log('CALLED ONLY ONCE with', value);\n//   next();\n// })\n\n\nrouter.param('nid', function (req, res, next, value) {\n  console.log('nid：', value);\n  next();\n});\n\nrouter.param('page', function (req, res, next, value) {\n  console.log('page：', value);\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res, next) {\n  console.log('although this matches');\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res) {\n  console.log('and this matches too');\n  res.send('ok');\n});\n\nmodule.exports = router;\n```\n\n&nbsp;\n\n## 五、静态资源目录\n\n也算是属于路由中的一部分，负责静态资源的路径设置\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\napp.use(express.static(__dirname + '/images'));\napp.use('/pic', express.static(__dirname + '/images'));\napp.use('/img', express.static(__dirname + '/images'));\n\n\napp.get('/img', function (req, res) {\n    var _html = '';\n\n    _html += '<p>/icon.png</p><img src=\"/icon.png\" />';\n    _html += '<p>/pic/icon.png</p><img src=\"/pic/icon.png\" />';\n    _html += '<p>/img/icon.png</p><img src=\"/img/icon.png\" />';\n\n    res.send(_html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n&nbsp;\n\n## 六、实例源码\n\n[github express_demo](https://github.com/ingdanfed/express_demo)","source":"_posts/2017-03-22-express路由.md","raw":"---\ntitle: Express路由\ndate: 2017-03-22 16:11:33\ntags: \n- nodejs\n- express\n- router\ncategories: \n- 分享\n---\n## 一、简介\n\n>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n\n>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）\n\n>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。\n\n&nbsp;\n\n<!-- more -->\n\n## 二、express环境搭建\n\n1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快\n\n``` javascript\n$ npm install –g cnpm\n```\n\n2、新建一个目录，在目录下执行\n\n``` javascript\n$ cnpm install express --save\n```\n\n3、express环境已经搭建好了\n\n&nbsp;\n\n## 三、基本路由\n\n1、简单版，除了get请求，还有post、put、delete\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n    res.send('Hello World! <a href=\"/news\">to news</a>');\n});\n\napp.get('/news', function (req, res) {\n    res.send('this is news. <a href=\"/\">back</a>');\n}).post('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a post request!',\n        data: req.query\n    });\n}).put('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a put request!',\n        data: req.query\n    });\n}).delete('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a delete request!',\n        data: req.query\n    });\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、字符匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>ab?cd（匹配 acd 和 abcd）</li>');\n_routeList.push('<li>ab+cd（匹配 abcd、abbcd、abbbcd等）</li>');\n_routeList.push('<li>ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）</li>');\n_routeList.push('<li>ab(cd)?e（匹配 /abe 和 /abcde）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res, next) {\n  // res.send('ab?cd');\n  _routeStr.push('ab?cd');\n  next();\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res, next) {\n  // res.send('ab+cd');\n  \n  _routeStr.push('ab+cd');\n  next();\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res, next) {\n  // res.send('ab*cd');\n  _routeStr.push('ab*cd');\n  next();\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res, next) {\n // res.send('ab(cd)?e');\n _routeStr.push('ab(cd)?e');\n next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、正则匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>/a/（匹配任何路径中含有 a 的路径');\n_routeList.push('<li>/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res, next) {\n  _routeStr.push('/a/');\n  next();\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res, next) {\n  _routeStr.push('/.*fly$/');\n  next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、执行多个回调\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 多个回调函数，需指定执行next\napp.get('/b', function (req, res, next) {\n    console.log('this is function b one');\n    next();\n}, function (req, res) {\n    console.log('this is function b two');\n\n    res.send('Hello from B!');\n});\n\n\n// 多个回调传入，需指定执行next，最后必须有send\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/c', [cb0, cb1, cb2]);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n&nbsp;\n\n## 四、中间件router\n\n1、通过require导入各种路由配置文件\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\nvar _router1 = require('./router/r1.js');\nvar _router2 = require('./router/r2.js');\nvar _router3 = require('./router/r3.js');\nvar _router4 = require('./router/r4.js');\n\n\napp.use('/', _router1);\napp.use('/r2', _router2);\napp.use('/r3', _router3);\napp.use('/r4', _router4);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、简单版\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n    res.send('About birds');\n});\n\nmodule.exports = router;\n```\n\n3、通过路由中间件控制\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息\nrouter.use('/user/:id', function(req, res, next) {\n    console.log('Request URL:', req.originalUrl);\n    next();\n}, function (req, res, next) {\n    console.log('Request Type:', req.method);\n    next();\n});\n\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\nrouter.get('/user/:id', function (req, res, next) {\n    console.log(req.params, req.params.id == 0);\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0){\n      res.send('ID：' + req.params.id);\n  }\n  // 负责将控制权交给栈中下一个中间件\n  else{\n      next();\n  }\n}, function (req, res, next) {\n    // 渲染常规页面\n    res.send('next function ID：' + req.params.id);\n\n    // 填到下一个路由\n    // next();\n});\n\nmodule.exports = router;\n```\n\n使用`router.param`\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\nvar _pid;\n\nrouter.get('/blog/:pid', function (req, res, next) {\n    console.log('get function');\n});\n\n\nrouter.param('pid', function (req, res, next, pid){\n    console.log('param function');\n    // console.log(req.query);\n\n    setTimeout(function(){\n        _pid = pid;\n\n        res.send('my pid is：' + pid + '&&' + req.query.id);\n    }, 1000);\n\n    next();\n});\n\nmodule.exports = router;\n```\n\n多个参数的情况下\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 无效，可能是版本问题\n// router.param(['id', 'page'], function (req, res, next, value) {\n//   console.log('CALLED ONLY ONCE with', value);\n//   next();\n// })\n\n\nrouter.param('nid', function (req, res, next, value) {\n  console.log('nid：', value);\n  next();\n});\n\nrouter.param('page', function (req, res, next, value) {\n  console.log('page：', value);\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res, next) {\n  console.log('although this matches');\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res) {\n  console.log('and this matches too');\n  res.send('ok');\n});\n\nmodule.exports = router;\n```\n\n&nbsp;\n\n## 五、静态资源目录\n\n也算是属于路由中的一部分，负责静态资源的路径设置\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\napp.use(express.static(__dirname + '/images'));\napp.use('/pic', express.static(__dirname + '/images'));\napp.use('/img', express.static(__dirname + '/images'));\n\n\napp.get('/img', function (req, res) {\n    var _html = '';\n\n    _html += '<p>/icon.png</p><img src=\"/icon.png\" />';\n    _html += '<p>/pic/icon.png</p><img src=\"/pic/icon.png\" />';\n    _html += '<p>/img/icon.png</p><img src=\"/img/icon.png\" />';\n\n    res.send(_html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n&nbsp;\n\n## 六、实例源码\n\n[github express_demo](https://github.com/ingdanfed/express_demo)","slug":"express路由","published":1,"updated":"2017-04-25T09:29:18.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1xee8e10005d8yjtpofzn35","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<p>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）</p>\n<p>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p>\n</blockquote>\n<p>&nbsp;</p>\n<a id=\"more\"></a>\n<h2 id=\"二、express环境搭建\"><a href=\"#二、express环境搭建\" class=\"headerlink\" title=\"二、express环境搭建\"></a>二、express环境搭建</h2><p>1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install –g cnpm</div></pre></td></tr></table></figure>\n<p>2、新建一个目录，在目录下执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install express --save</div></pre></td></tr></table></figure>\n<p>3、express环境已经搭建好了</p>\n<p>&nbsp;</p>\n<h2 id=\"三、基本路由\"><a href=\"#三、基本路由\" class=\"headerlink\" title=\"三、基本路由\"></a>三、基本路由</h2><p>1、简单版，除了get请求，还有post、put、delete</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Hello World! &lt;a href=\"/news\"&gt;to news&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'this is news. &lt;a href=\"/\"&gt;back&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;).post(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a post request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).put(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a put request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).delete(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a delete request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、字符匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab?cd（匹配 acd 和 abcd）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab+cd（匹配 abcd、abbcd、abbbcd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab(cd)?e（匹配 /abe 和 /abcde）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 acd 和 abcd</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab?cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab?cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab?cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abbcd、abbbcd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab+cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab+cd');</span></div><div class=\"line\">  </div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab+cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab*cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab*cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /abe 和 /abcde</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab(cd)?e'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// res.send('ab(cd)?e');</span></div><div class=\"line\"> _routeStr.push(<span class=\"string\">'ab(cd)?e'</span>);</div><div class=\"line\"> next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、正则匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/a/（匹配任何路径中含有 a 的路径'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配任何路径中含有 a 的路径：</span></div><div class=\"line\">app.get(<span class=\"regexp\">/a/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/a/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class=\"line\">app.get(<span class=\"regexp\">/.*fly$/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/.*fly$/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、执行多个回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调函数，需指定执行next</span></div><div class=\"line\">app.get(<span class=\"string\">'/b'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b one'</span>);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b two'</span>);</div><div class=\"line\"></div><div class=\"line\">    res.send(<span class=\"string\">'Hello from B!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调传入，需指定执行next，最后必须有send</span></div><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from C!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/c'</span>, [cb0, cb1, cb2]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"四、中间件router\"><a href=\"#四、中间件router\" class=\"headerlink\" title=\"四、中间件router\"></a>四、中间件router</h2><p>1、通过require导入各种路由配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _router1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r1.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r2.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r3.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r4.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, _router1);</div><div class=\"line\">app.use(<span class=\"string\">'/r2'</span>, _router2);</div><div class=\"line\">app.use(<span class=\"string\">'/r3'</span>, _router3);</div><div class=\"line\">app.use(<span class=\"string\">'/r4'</span>, _router4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、简单版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义网站主页的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Birds home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义 about 页面的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'About birds'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>3、通过路由中间件控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></div><div class=\"line\">router.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.params, req.params.id == <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      res.send(<span class=\"string\">'ID：'</span> + req.params.id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 负责将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      next();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">    res.send(<span class=\"string\">'next function ID：'</span> + req.params.id);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 填到下一个路由</span></div><div class=\"line\">    <span class=\"comment\">// next();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>使用<code>router.param</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _pid;</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/blog/:pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get function'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, pid</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'param function'</span>);</div><div class=\"line\">    <span class=\"comment\">// console.log(req.query);</span></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        _pid = pid;</div><div class=\"line\"></div><div class=\"line\">        res.send(<span class=\"string\">'my pid is：'</span> + pid + <span class=\"string\">'&amp;&amp;'</span> + req.query.id);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>多个参数的情况下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无效，可能是版本问题</span></div><div class=\"line\"><span class=\"comment\">// router.param(['id', 'page'], function (req, res, next, value) &#123;</span></div><div class=\"line\"><span class=\"comment\">//   console.log('CALLED ONLY ONCE with', value);</span></div><div class=\"line\"><span class=\"comment\">//   next();</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'nid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nid：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'page：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this matches'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matches too'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'ok'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"五、静态资源目录\"><a href=\"#五、静态资源目录\" class=\"headerlink\" title=\"五、静态资源目录\"></a>五、静态资源目录</h2><p>也算是属于路由中的一部分，负责静态资源的路径设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/pic'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/img'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/img'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/icon.png&lt;/p&gt;&lt;img src=\"/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/pic/icon.png&lt;/p&gt;&lt;img src=\"/pic/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/img/icon.png&lt;/p&gt;&lt;img src=\"/img/icon.png\" /&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"六、实例源码\"><a href=\"#六、实例源码\" class=\"headerlink\" title=\"六、实例源码\"></a>六、实例源码</h2><p><a href=\"https://github.com/ingdanfed/express_demo\" target=\"_blank\" rel=\"external\">github express_demo</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<p>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）</p>\n<p>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p>\n</blockquote>\n<p>&nbsp;</p>","more":"<h2 id=\"二、express环境搭建\"><a href=\"#二、express环境搭建\" class=\"headerlink\" title=\"二、express环境搭建\"></a>二、express环境搭建</h2><p>1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install –g cnpm</div></pre></td></tr></table></figure>\n<p>2、新建一个目录，在目录下执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install express --save</div></pre></td></tr></table></figure>\n<p>3、express环境已经搭建好了</p>\n<p>&nbsp;</p>\n<h2 id=\"三、基本路由\"><a href=\"#三、基本路由\" class=\"headerlink\" title=\"三、基本路由\"></a>三、基本路由</h2><p>1、简单版，除了get请求，还有post、put、delete</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Hello World! &lt;a href=\"/news\"&gt;to news&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'this is news. &lt;a href=\"/\"&gt;back&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;).post(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a post request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).put(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a put request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).delete(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a delete request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、字符匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab?cd（匹配 acd 和 abcd）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab+cd（匹配 abcd、abbcd、abbbcd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab(cd)?e（匹配 /abe 和 /abcde）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 acd 和 abcd</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab?cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab?cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab?cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abbcd、abbbcd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab+cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab+cd');</span></div><div class=\"line\">  </div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab+cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab*cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab*cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /abe 和 /abcde</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab(cd)?e'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// res.send('ab(cd)?e');</span></div><div class=\"line\"> _routeStr.push(<span class=\"string\">'ab(cd)?e'</span>);</div><div class=\"line\"> next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、正则匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/a/（匹配任何路径中含有 a 的路径'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配任何路径中含有 a 的路径：</span></div><div class=\"line\">app.get(<span class=\"regexp\">/a/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/a/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class=\"line\">app.get(<span class=\"regexp\">/.*fly$/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/.*fly$/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、执行多个回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调函数，需指定执行next</span></div><div class=\"line\">app.get(<span class=\"string\">'/b'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b one'</span>);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b two'</span>);</div><div class=\"line\"></div><div class=\"line\">    res.send(<span class=\"string\">'Hello from B!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调传入，需指定执行next，最后必须有send</span></div><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from C!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/c'</span>, [cb0, cb1, cb2]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"四、中间件router\"><a href=\"#四、中间件router\" class=\"headerlink\" title=\"四、中间件router\"></a>四、中间件router</h2><p>1、通过require导入各种路由配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _router1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r1.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r2.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r3.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r4.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, _router1);</div><div class=\"line\">app.use(<span class=\"string\">'/r2'</span>, _router2);</div><div class=\"line\">app.use(<span class=\"string\">'/r3'</span>, _router3);</div><div class=\"line\">app.use(<span class=\"string\">'/r4'</span>, _router4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、简单版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义网站主页的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Birds home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义 about 页面的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'About birds'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>3、通过路由中间件控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></div><div class=\"line\">router.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.params, req.params.id == <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      res.send(<span class=\"string\">'ID：'</span> + req.params.id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 负责将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      next();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">    res.send(<span class=\"string\">'next function ID：'</span> + req.params.id);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 填到下一个路由</span></div><div class=\"line\">    <span class=\"comment\">// next();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>使用<code>router.param</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _pid;</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/blog/:pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get function'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, pid</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'param function'</span>);</div><div class=\"line\">    <span class=\"comment\">// console.log(req.query);</span></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        _pid = pid;</div><div class=\"line\"></div><div class=\"line\">        res.send(<span class=\"string\">'my pid is：'</span> + pid + <span class=\"string\">'&amp;&amp;'</span> + req.query.id);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>多个参数的情况下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无效，可能是版本问题</span></div><div class=\"line\"><span class=\"comment\">// router.param(['id', 'page'], function (req, res, next, value) &#123;</span></div><div class=\"line\"><span class=\"comment\">//   console.log('CALLED ONLY ONCE with', value);</span></div><div class=\"line\"><span class=\"comment\">//   next();</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'nid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nid：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'page：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this matches'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matches too'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'ok'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"五、静态资源目录\"><a href=\"#五、静态资源目录\" class=\"headerlink\" title=\"五、静态资源目录\"></a>五、静态资源目录</h2><p>也算是属于路由中的一部分，负责静态资源的路径设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/pic'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/img'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/img'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/icon.png&lt;/p&gt;&lt;img src=\"/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/pic/icon.png&lt;/p&gt;&lt;img src=\"/pic/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/img/icon.png&lt;/p&gt;&lt;img src=\"/img/icon.png\" /&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"六、实例源码\"><a href=\"#六、实例源码\" class=\"headerlink\" title=\"六、实例源码\"></a>六、实例源码</h2><p><a href=\"https://github.com/ingdanfed/express_demo\">github express_demo</a></p>"},{"title":"JavaScript排序算法及性能比较","date":"2017-03-30T02:23:43.000Z","_content":"\n作者原文：http://www.boatsky.com/blog/10.html\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n<!-- more -->\n\n前言\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。\n\n1.冒泡排序\n冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果\n1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果\n1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果\n1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果\n……\n1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果\n1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果\n第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次\n\n1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5\n1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0\n1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7\n1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2\n……\n重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。\n代码如下：\n```javascript\n//冒泡排序\nfunction bubbleSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = 0;j < len - i;j++){\n                if(arr[j] > arr[j+1]){\n                    temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n2.选择排序\n选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1\n1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7\n0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0\n……\n0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6\n第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。\n\n0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7\n0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1\n……\n0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6\n重复n-1轮，得出最终结果。\n\n```javascript\n//选择排序\nfunction selectSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = i+1;j < len;j++){\n                if(arr[i] > arr[j]){\n                    temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n\n3.插入排序\n插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6    1插入[5]中结果\n1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果\n0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果\n0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果\n……\n0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果\n0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果\n一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。\n\n代码如下：\n```javascript\nfunction insertSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 1;i < len;i++){\n            temp = arr[i];\n            j = i;\n            while(j > 0 && arr[j-1] > temp){\n                arr[j] = arr[j-1];\n                j--;\n            }\n            arr[j] = temp;\n        }\n    }\n    return arr;\n}\n```\n\n\n4.归并排序\n归并排序，则是把已经排好序的子数组合并成一个大的数组。\n5,1,7,0,9,2,3,8,4,6\n5,  1,  7,  0,  9,  2,  3,  8,  4,  6\nstep 1\n1,5,  0,7,  2,9,  3,8  4,6\nstep 2\n0,1,5,7,  2,3,8,9,  4,6\nstep 4\n0,1,2,3,5,7,8,9,  4,6\n\n最终\n0,1,2,3,4,5,6,7,8,9\n\n归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！\n代码如下：\n```javascript\nfunction mergeSort(arr){\n    if (arr.length < 2){\n        return arr;\n    }\n    var step = 1;\n    var left, right;\n    while(step < arr.length){\n        left = 0;\n        right = step;\n        while(right + step <= arr.length){\n            mergeArrays(arr, left, left+step, right, right+step);\n            left = right + step;\n            right = left + step;\n        }\n        if (right < arr.length){\n            mergeArrays(arr, left, left+step, right, arr.length);\n        }\n        step *= 2;\n    }\n    return arr;\n}\nfunction mergeArrays(arr, startLeft, stopLeft, startRight, stopRight){\n    var leftArr = new Array(stopLeft - startLeft + 1);\n    var rightArr = new Array(stopRight - startRight + 1);\n    var k = startLeft;\n    for(var i = 0;i < (leftArr.length-1);i++){\n        leftArr[i] = arr[k];\n        k++;\n    }\n    k = startRight;\n    for(var i = 0;i < (rightArr.length-1);i++){\n        rightArr[i] = arr[k];\n        k++;\n    }\n    rightArr[rightArr.length-1] = Infinity;\n    leftArr[leftArr.length-1] = Infinity;\n    var m = 0,n = 0;\n    for(k = startLeft;k < stopRight;k++){\n        if (leftArr[m] <= rightArr[n]){\n            arr[k] = leftArr[m];\n            m++;\n        }\n        else {\n            arr[k] = rightArr[n];\n            n++;\n        }\n    }\n}\n```\n\n\n5.希尔排序\n希尔排序，又是插入排序的改良版，即分组插入。\n5,1,7,0,9,2,3,8,4,6\ng为5时，分成5组\n5与2比较，1与3比较，7与8比较，0与4比较，9与6比较\n2,1,7,0,6,5,3,8,4,9\ng为2时，分成2组\n2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9\n结果为\n2,0,3,1,4,5,6,8,9,9\ng为1时，进行插入排序得到\n0,1,2,3,4,5,6,8,9,7,8\n其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。\n代码如下：\n```javascript\n//希尔排序\nfunction shellSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var g,i,j, k,temp;\n        //第几轮分组\n        for(g = Math.floor(len / 2);g > 0;g = Math.floor(g / 2)){\n            for(i = 0;i < g;i++){\n                for(j = i + g;j < len;j = j + g){\n                    if(arr[j - g] > arr[j]){\n                        temp = arr[j];\n                        k = j - g;\n                        while(k >= 0 && arr[k] > temp){\n                            arr[k + g] = arr[k];\n                            k = k - g;\n                        }\n                        arr[k + g] = temp;\n                    }\n                }\n            }\n        }\n\n    }\n    return arr;\n}\n```\n\n6.快速排序\n快速排序即排序很快速！那为什么它这么快？\n官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n我们用实例来演示一下：\n5,1,7,0,9,2,3,8,4,6\n选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成\n[1,0,2,3,4]+5+[7,9,8,6]\n与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)\n[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]\n与此同时再分解\n[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]\n同时\n[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]\n快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。\n后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。\n```javascript\n//快速排序\nfunction quickSort(arr) {\n    var len = arr.length;\n    if(len == 0){\n        return [];\n    }\n    else if(len == 1){\n        return arr;\n    }\n    var smallArr = [];\n    var largeArr = [];\n    var pivot = arr[0];\n    for (var i = 1; i < len; i++) {\n        if (arr[i] < pivot) {\n            smallArr.push(arr[i]);\n        } else {\n            largeArr.push(arr[i]);\n        }\n    }\n    return quickSort(smallArr).concat(pivot, quickSort(largeArr));\n}\n```\n\n\n\n以上算法的demo : http://www.boatsky.com/static/js/demo/sort_demo.js\n\n\n这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例\n\n\n```javascript\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\n//以为是计算时间例子\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\nfunction getArr(){\n    var arr = [];\n    for(var i = 0;i < 10000;i++){\n        arr.push(Math.floor(Math.random()*10000));\n    }\n    return arr;\n}\n//快速排序\n\n//获取时间\nfunction getTime(){\n    //计算100次，取平均值，减小误差\n    for(var k = 0;k < 100;k++){\n        var arr = getArr();\n        d1 = new Date().getTime();\n        arr = quickSort(arr);\n        d2 = new Date().getTime();\n        arrTime.push(d2-d1);\n    }\n    var all = 0;\n    for(var m = 0;m < arrTime.length;m++){\n        all = all + arrTime[m];\n    }\n    console.log(arrTime);\n    console.log(all/arrTime.length);\n}\ngetTime();\n```\n\n\n\n统计100次  平均时间(ms)\t时间复杂度\t            空间复杂度    \t   稳定性\n冒泡排序\t   704.69\t   O(n(n+1)/2)\t           O(1)\t               稳定\n选择排序\t   214.31\t   O(n(n+1)/2)\t           O(1)\t               稳定\n插入排序\t   50.62\t   O(n)~O(n^2/2)           O(1)\t               不稳定\n归并排序\t   2.16\t       O(n log n)\t           O(n)\t               稳定\n希尔排序\t   1.5\t       O(n log n) ~ O(n^2)     O(1)\t               不稳定\n快速排序\t   0.15\t       O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)\t不稳定\n\n\n所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。\n\n所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。\n\n所以说，不要在任何情况下都用冒泡排序啦！！！\n","source":"_posts/2017-03-30-JavaScript排序算法及性能比较.md","raw":"---\ntitle: JavaScript排序算法及性能比较\ndate: 2017-03-30 10:23:43\ntags:\ncategories:\n---\n\n作者原文：http://www.boatsky.com/blog/10.html\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n<!-- more -->\n\n前言\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。\n\n1.冒泡排序\n冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果\n1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果\n1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果\n1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果\n……\n1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果\n1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果\n第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次\n\n1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5\n1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0\n1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7\n1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2\n……\n重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。\n代码如下：\n```javascript\n//冒泡排序\nfunction bubbleSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = 0;j < len - i;j++){\n                if(arr[j] > arr[j+1]){\n                    temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n2.选择排序\n选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1\n1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7\n0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0\n……\n0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6\n第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。\n\n0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7\n0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1\n……\n0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6\n重复n-1轮，得出最终结果。\n\n```javascript\n//选择排序\nfunction selectSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = i+1;j < len;j++){\n                if(arr[i] > arr[j]){\n                    temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n\n3.插入排序\n插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6    1插入[5]中结果\n1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果\n0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果\n0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果\n……\n0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果\n0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果\n一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。\n\n代码如下：\n```javascript\nfunction insertSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 1;i < len;i++){\n            temp = arr[i];\n            j = i;\n            while(j > 0 && arr[j-1] > temp){\n                arr[j] = arr[j-1];\n                j--;\n            }\n            arr[j] = temp;\n        }\n    }\n    return arr;\n}\n```\n\n\n4.归并排序\n归并排序，则是把已经排好序的子数组合并成一个大的数组。\n5,1,7,0,9,2,3,8,4,6\n5,  1,  7,  0,  9,  2,  3,  8,  4,  6\nstep 1\n1,5,  0,7,  2,9,  3,8  4,6\nstep 2\n0,1,5,7,  2,3,8,9,  4,6\nstep 4\n0,1,2,3,5,7,8,9,  4,6\n\n最终\n0,1,2,3,4,5,6,7,8,9\n\n归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！\n代码如下：\n```javascript\nfunction mergeSort(arr){\n    if (arr.length < 2){\n        return arr;\n    }\n    var step = 1;\n    var left, right;\n    while(step < arr.length){\n        left = 0;\n        right = step;\n        while(right + step <= arr.length){\n            mergeArrays(arr, left, left+step, right, right+step);\n            left = right + step;\n            right = left + step;\n        }\n        if (right < arr.length){\n            mergeArrays(arr, left, left+step, right, arr.length);\n        }\n        step *= 2;\n    }\n    return arr;\n}\nfunction mergeArrays(arr, startLeft, stopLeft, startRight, stopRight){\n    var leftArr = new Array(stopLeft - startLeft + 1);\n    var rightArr = new Array(stopRight - startRight + 1);\n    var k = startLeft;\n    for(var i = 0;i < (leftArr.length-1);i++){\n        leftArr[i] = arr[k];\n        k++;\n    }\n    k = startRight;\n    for(var i = 0;i < (rightArr.length-1);i++){\n        rightArr[i] = arr[k];\n        k++;\n    }\n    rightArr[rightArr.length-1] = Infinity;\n    leftArr[leftArr.length-1] = Infinity;\n    var m = 0,n = 0;\n    for(k = startLeft;k < stopRight;k++){\n        if (leftArr[m] <= rightArr[n]){\n            arr[k] = leftArr[m];\n            m++;\n        }\n        else {\n            arr[k] = rightArr[n];\n            n++;\n        }\n    }\n}\n```\n\n\n5.希尔排序\n希尔排序，又是插入排序的改良版，即分组插入。\n5,1,7,0,9,2,3,8,4,6\ng为5时，分成5组\n5与2比较，1与3比较，7与8比较，0与4比较，9与6比较\n2,1,7,0,6,5,3,8,4,9\ng为2时，分成2组\n2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9\n结果为\n2,0,3,1,4,5,6,8,9,9\ng为1时，进行插入排序得到\n0,1,2,3,4,5,6,8,9,7,8\n其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。\n代码如下：\n```javascript\n//希尔排序\nfunction shellSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var g,i,j, k,temp;\n        //第几轮分组\n        for(g = Math.floor(len / 2);g > 0;g = Math.floor(g / 2)){\n            for(i = 0;i < g;i++){\n                for(j = i + g;j < len;j = j + g){\n                    if(arr[j - g] > arr[j]){\n                        temp = arr[j];\n                        k = j - g;\n                        while(k >= 0 && arr[k] > temp){\n                            arr[k + g] = arr[k];\n                            k = k - g;\n                        }\n                        arr[k + g] = temp;\n                    }\n                }\n            }\n        }\n\n    }\n    return arr;\n}\n```\n\n6.快速排序\n快速排序即排序很快速！那为什么它这么快？\n官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n我们用实例来演示一下：\n5,1,7,0,9,2,3,8,4,6\n选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成\n[1,0,2,3,4]+5+[7,9,8,6]\n与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)\n[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]\n与此同时再分解\n[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]\n同时\n[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]\n快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。\n后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。\n```javascript\n//快速排序\nfunction quickSort(arr) {\n    var len = arr.length;\n    if(len == 0){\n        return [];\n    }\n    else if(len == 1){\n        return arr;\n    }\n    var smallArr = [];\n    var largeArr = [];\n    var pivot = arr[0];\n    for (var i = 1; i < len; i++) {\n        if (arr[i] < pivot) {\n            smallArr.push(arr[i]);\n        } else {\n            largeArr.push(arr[i]);\n        }\n    }\n    return quickSort(smallArr).concat(pivot, quickSort(largeArr));\n}\n```\n\n\n\n以上算法的demo : http://www.boatsky.com/static/js/demo/sort_demo.js\n\n\n这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例\n\n\n```javascript\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\n//以为是计算时间例子\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\nfunction getArr(){\n    var arr = [];\n    for(var i = 0;i < 10000;i++){\n        arr.push(Math.floor(Math.random()*10000));\n    }\n    return arr;\n}\n//快速排序\n\n//获取时间\nfunction getTime(){\n    //计算100次，取平均值，减小误差\n    for(var k = 0;k < 100;k++){\n        var arr = getArr();\n        d1 = new Date().getTime();\n        arr = quickSort(arr);\n        d2 = new Date().getTime();\n        arrTime.push(d2-d1);\n    }\n    var all = 0;\n    for(var m = 0;m < arrTime.length;m++){\n        all = all + arrTime[m];\n    }\n    console.log(arrTime);\n    console.log(all/arrTime.length);\n}\ngetTime();\n```\n\n\n\n统计100次  平均时间(ms)\t时间复杂度\t            空间复杂度    \t   稳定性\n冒泡排序\t   704.69\t   O(n(n+1)/2)\t           O(1)\t               稳定\n选择排序\t   214.31\t   O(n(n+1)/2)\t           O(1)\t               稳定\n插入排序\t   50.62\t   O(n)~O(n^2/2)           O(1)\t               不稳定\n归并排序\t   2.16\t       O(n log n)\t           O(n)\t               稳定\n希尔排序\t   1.5\t       O(n log n) ~ O(n^2)     O(1)\t               不稳定\n快速排序\t   0.15\t       O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)\t不稳定\n\n\n所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。\n\n所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。\n\n所以说，不要在任何情况下都用冒泡排序啦！！！\n","slug":"JavaScript排序算法及性能比较","published":1,"updated":"2017-04-25T09:29:18.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1xee8e40006d8yj28x46p14","content":"<p>作者原文：<a href=\"http://www.boatsky.com/blog/10.html\" target=\"_blank\" rel=\"external\">http://www.boatsky.com/blog/10.html</a></p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>\n<a id=\"more\"></a>\n<p>前言</p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>\n<p>算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。</p>\n<p>1.冒泡排序<br>冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果<br>1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果<br>1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果<br>1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果<br>……<br>1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果<br>1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果<br>第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次</p>\n<p>1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5<br>1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0<br>1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7<br>1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2<br>……<br>重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//冒泡排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; len - i;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">                    temp = arr[j];</div><div class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</div><div class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.选择排序<br>选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1<br>1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7<br>0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0<br>……<br>0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6<br>第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。</p>\n<p>0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7<br>0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1<br>……<br>0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6<br>重复n-1轮，得出最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//选择排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = i+<span class=\"number\">1</span>;j &lt; len;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[i] &gt; arr[j])&#123;</div><div class=\"line\">                    temp = arr[i];</div><div class=\"line\">                    arr[i] = arr[j];</div><div class=\"line\">                    arr[j] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.插入排序<br>插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6    1插入[5]中结果<br>1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果<br>0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果<br>0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果<br>……<br>0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果<br>0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果<br>一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。</p>\n<p>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            temp = arr[i];</div><div class=\"line\">            j = i;</div><div class=\"line\">            <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j<span class=\"number\">-1</span>] &gt; temp)&#123;</div><div class=\"line\">                arr[j] = arr[j<span class=\"number\">-1</span>];</div><div class=\"line\">                j--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[j] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.归并排序<br>归并排序，则是把已经排好序的子数组合并成一个大的数组。<br>5,1,7,0,9,2,3,8,4,6<br>5,  1,  7,  0,  9,  2,  3,  8,  4,  6<br>step 1<br>1,5,  0,7,  2,9,  3,8  4,6<br>step 2<br>0,1,5,7,  2,3,8,9,  4,6<br>step 4<br>0,1,2,3,5,7,8,9,  4,6</p>\n<p>最终<br>0,1,2,3,4,5,6,7,8,9</p>\n<p>归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> left, right;</div><div class=\"line\">    <span class=\"keyword\">while</span>(step &lt; arr.length)&#123;</div><div class=\"line\">        left = <span class=\"number\">0</span>;</div><div class=\"line\">        right = step;</div><div class=\"line\">        <span class=\"keyword\">while</span>(right + step &lt;= arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, right+step);</div><div class=\"line\">            left = right + step;</div><div class=\"line\">            right = left + step;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (right &lt; arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, arr.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        step *= <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeArrays</span>(<span class=\"params\">arr, startLeft, stopLeft, startRight, stopRight</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> leftArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopLeft - startLeft + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> rightArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopRight - startRight + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> k = startLeft;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (leftArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        leftArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    k = startRight;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (rightArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        rightArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    rightArr[rightArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    leftArr[leftArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = <span class=\"number\">0</span>,n = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(k = startLeft;k &lt; stopRight;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (leftArr[m] &lt;= rightArr[n])&#123;</div><div class=\"line\">            arr[k] = leftArr[m];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            arr[k] = rightArr[n];</div><div class=\"line\">            n++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.希尔排序<br>希尔排序，又是插入排序的改良版，即分组插入。<br>5,1,7,0,9,2,3,8,4,6<br>g为5时，分成5组<br>5与2比较，1与3比较，7与8比较，0与4比较，9与6比较<br>2,1,7,0,6,5,3,8,4,9<br>g为2时，分成2组<br>2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9<br>结果为<br>2,0,3,1,4,5,6,8,9,9<br>g为1时，进行插入排序得到<br>0,1,2,3,4,5,6,8,9,7,8<br>其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//希尔排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> g,i,j, k,temp;</div><div class=\"line\">        <span class=\"comment\">//第几轮分组</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(g = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>);g &gt; <span class=\"number\">0</span>;g = <span class=\"built_in\">Math</span>.floor(g / <span class=\"number\">2</span>))&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; g;i++)&#123;</div><div class=\"line\">                <span class=\"keyword\">for</span>(j = i + g;j &lt; len;j = j + g)&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(arr[j - g] &gt; arr[j])&#123;</div><div class=\"line\">                        temp = arr[j];</div><div class=\"line\">                        k = j - g;</div><div class=\"line\">                        <span class=\"keyword\">while</span>(k &gt;= <span class=\"number\">0</span> &amp;&amp; arr[k] &gt; temp)&#123;</div><div class=\"line\">                            arr[k + g] = arr[k];</div><div class=\"line\">                            k = k - g;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        arr[k + g] = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.快速排序<br>快速排序即排序很快速！那为什么它这么快？<br>官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br>我们用实例来演示一下：<br>5,1,7,0,9,2,3,8,4,6<br>选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成<br>[1,0,2,3,4]+5+[7,9,8,6]<br>与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)<br>[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]<br>与此同时再分解<br>[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]<br>同时<br>[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]<br>快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。<br>后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> smallArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> largeArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            smallArr.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            largeArr.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> quickSort(smallArr).concat(pivot, quickSort(largeArr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上算法的demo : <a href=\"http://www.boatsky.com/static/js/demo/sort_demo.js\" target=\"_blank\" rel=\"external\">http://www.boatsky.com/static/js/demo/sort_demo.js</a></p>\n<p>这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"comment\">//以为是计算时间例子</span></div><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10000</span>;i++)&#123;</div><div class=\"line\">        arr.push(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10000</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取时间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTime</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//计算100次，取平均值，减小误差</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;k &lt; <span class=\"number\">100</span>;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> arr = getArr();</div><div class=\"line\">        d1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arr = quickSort(arr);</div><div class=\"line\">        d2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arrTime.push(d2-d1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> all = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m = <span class=\"number\">0</span>;m &lt; arrTime.length;m++)&#123;</div><div class=\"line\">        all = all + arrTime[m];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arrTime);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(all/arrTime.length);</div><div class=\"line\">&#125;</div><div class=\"line\">getTime();</div></pre></td></tr></table></figure>\n<p>统计100次  平均时间(ms)    时间复杂度                空间复杂度           稳定性<br>冒泡排序       704.69       O(n(n+1)/2)               O(1)                   稳定<br>选择排序       214.31       O(n(n+1)/2)               O(1)                   稳定<br>插入排序       50.62       O(n)~O(n^2/2)           O(1)                   不稳定<br>归并排序       2.16           O(n log n)               O(n)                   稳定<br>希尔排序       1.5           O(n log n) ~ O(n^2)     O(1)                   不稳定<br>快速排序       0.15           O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)    不稳定</p>\n<p>所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。</p>\n<p>所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。</p>\n<p>所以说，不要在任何情况下都用冒泡排序啦！！！</p>\n","site":{"data":{}},"excerpt":"<p>作者原文：<a href=\"http://www.boatsky.com/blog/10.html\">http://www.boatsky.com/blog/10.html</a></p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>","more":"<p>前言</p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>\n<p>算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。</p>\n<p>1.冒泡排序<br>冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果<br>1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果<br>1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果<br>1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果<br>……<br>1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果<br>1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果<br>第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次</p>\n<p>1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5<br>1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0<br>1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7<br>1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2<br>……<br>重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//冒泡排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; len - i;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">                    temp = arr[j];</div><div class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</div><div class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.选择排序<br>选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1<br>1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7<br>0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0<br>……<br>0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6<br>第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。</p>\n<p>0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7<br>0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1<br>……<br>0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6<br>重复n-1轮，得出最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//选择排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = i+<span class=\"number\">1</span>;j &lt; len;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[i] &gt; arr[j])&#123;</div><div class=\"line\">                    temp = arr[i];</div><div class=\"line\">                    arr[i] = arr[j];</div><div class=\"line\">                    arr[j] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.插入排序<br>插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6    1插入[5]中结果<br>1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果<br>0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果<br>0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果<br>……<br>0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果<br>0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果<br>一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。</p>\n<p>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            temp = arr[i];</div><div class=\"line\">            j = i;</div><div class=\"line\">            <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j<span class=\"number\">-1</span>] &gt; temp)&#123;</div><div class=\"line\">                arr[j] = arr[j<span class=\"number\">-1</span>];</div><div class=\"line\">                j--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[j] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.归并排序<br>归并排序，则是把已经排好序的子数组合并成一个大的数组。<br>5,1,7,0,9,2,3,8,4,6<br>5,  1,  7,  0,  9,  2,  3,  8,  4,  6<br>step 1<br>1,5,  0,7,  2,9,  3,8  4,6<br>step 2<br>0,1,5,7,  2,3,8,9,  4,6<br>step 4<br>0,1,2,3,5,7,8,9,  4,6</p>\n<p>最终<br>0,1,2,3,4,5,6,7,8,9</p>\n<p>归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> left, right;</div><div class=\"line\">    <span class=\"keyword\">while</span>(step &lt; arr.length)&#123;</div><div class=\"line\">        left = <span class=\"number\">0</span>;</div><div class=\"line\">        right = step;</div><div class=\"line\">        <span class=\"keyword\">while</span>(right + step &lt;= arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, right+step);</div><div class=\"line\">            left = right + step;</div><div class=\"line\">            right = left + step;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (right &lt; arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, arr.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        step *= <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeArrays</span>(<span class=\"params\">arr, startLeft, stopLeft, startRight, stopRight</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> leftArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopLeft - startLeft + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> rightArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopRight - startRight + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> k = startLeft;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (leftArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        leftArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    k = startRight;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (rightArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        rightArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    rightArr[rightArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    leftArr[leftArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = <span class=\"number\">0</span>,n = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(k = startLeft;k &lt; stopRight;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (leftArr[m] &lt;= rightArr[n])&#123;</div><div class=\"line\">            arr[k] = leftArr[m];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            arr[k] = rightArr[n];</div><div class=\"line\">            n++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.希尔排序<br>希尔排序，又是插入排序的改良版，即分组插入。<br>5,1,7,0,9,2,3,8,4,6<br>g为5时，分成5组<br>5与2比较，1与3比较，7与8比较，0与4比较，9与6比较<br>2,1,7,0,6,5,3,8,4,9<br>g为2时，分成2组<br>2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9<br>结果为<br>2,0,3,1,4,5,6,8,9,9<br>g为1时，进行插入排序得到<br>0,1,2,3,4,5,6,8,9,7,8<br>其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//希尔排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> g,i,j, k,temp;</div><div class=\"line\">        <span class=\"comment\">//第几轮分组</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(g = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>);g &gt; <span class=\"number\">0</span>;g = <span class=\"built_in\">Math</span>.floor(g / <span class=\"number\">2</span>))&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; g;i++)&#123;</div><div class=\"line\">                <span class=\"keyword\">for</span>(j = i + g;j &lt; len;j = j + g)&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(arr[j - g] &gt; arr[j])&#123;</div><div class=\"line\">                        temp = arr[j];</div><div class=\"line\">                        k = j - g;</div><div class=\"line\">                        <span class=\"keyword\">while</span>(k &gt;= <span class=\"number\">0</span> &amp;&amp; arr[k] &gt; temp)&#123;</div><div class=\"line\">                            arr[k + g] = arr[k];</div><div class=\"line\">                            k = k - g;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        arr[k + g] = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.快速排序<br>快速排序即排序很快速！那为什么它这么快？<br>官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br>我们用实例来演示一下：<br>5,1,7,0,9,2,3,8,4,6<br>选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成<br>[1,0,2,3,4]+5+[7,9,8,6]<br>与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)<br>[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]<br>与此同时再分解<br>[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]<br>同时<br>[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]<br>快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。<br>后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> smallArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> largeArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            smallArr.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            largeArr.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> quickSort(smallArr).concat(pivot, quickSort(largeArr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上算法的demo : <a href=\"http://www.boatsky.com/static/js/demo/sort_demo.js\">http://www.boatsky.com/static/js/demo/sort_demo.js</a></p>\n<p>这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"comment\">//以为是计算时间例子</span></div><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10000</span>;i++)&#123;</div><div class=\"line\">        arr.push(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10000</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取时间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTime</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//计算100次，取平均值，减小误差</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;k &lt; <span class=\"number\">100</span>;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> arr = getArr();</div><div class=\"line\">        d1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arr = quickSort(arr);</div><div class=\"line\">        d2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arrTime.push(d2-d1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> all = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m = <span class=\"number\">0</span>;m &lt; arrTime.length;m++)&#123;</div><div class=\"line\">        all = all + arrTime[m];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arrTime);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(all/arrTime.length);</div><div class=\"line\">&#125;</div><div class=\"line\">getTime();</div></pre></td></tr></table></figure>\n<p>统计100次  平均时间(ms)    时间复杂度                空间复杂度           稳定性<br>冒泡排序       704.69       O(n(n+1)/2)               O(1)                   稳定<br>选择排序       214.31       O(n(n+1)/2)               O(1)                   稳定<br>插入排序       50.62       O(n)~O(n^2/2)           O(1)                   不稳定<br>归并排序       2.16           O(n log n)               O(n)                   稳定<br>希尔排序       1.5           O(n log n) ~ O(n^2)     O(1)                   不稳定<br>快速排序       0.15           O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)    不稳定</p>\n<p>所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。</p>\n<p>所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。</p>\n<p>所以说，不要在任何情况下都用冒泡排序啦！！！</p>"},{"title":"flexbox布局","date":"2017-04-25T07:55:55.000Z","_content":"\n\n> 布局的传统解决方案，基于盒状模型，依赖 `display`属性 + `position`属性 + `float`属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n2009年，W3C提出了一种新的方案----`Flex布局`，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/01.png?raw=true)\n\n&nbsp;\n\n<!-- more -->\n\n### 1、基本概念\n`Flex`是`Flexible Box`的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。采用Flex布局的元素，称为`Flex容器（flex container）`，简称\"`容器`\"。它的所有子元素自动成为容器成员，称为`Flex项目（flex item）`，简称\"`项目`。注意，设为Flex布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/02.png?raw=true)\n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n### 2、容器的属性\n\n#### 2.1 flex-direction\n`flex-direction`属性决定主轴的方向（即项目的排列方向）, 有以下取值：\n-\trow（默认值）：主轴为水平方向，起点在左端。\n-\trow-reverse：主轴为水平方向，起点在右端。\n-\tcolumn：主轴为垂直方向，起点在上沿。\n-\tcolumn-reverse：主轴为垂直方向，起点在下沿。\n#### 2.2 flex-wrap\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行,有以下取值：\n-\tnowrap（默认）：不换行\n-\twrap：换行，第一行在上方。\n-\twrap-reverse：换行，第一行在下方\n#### 2.3 flex-flow\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为row nowrap。\n#### 2.4 justify-content\n`justify-content`属性定义了项目在主轴上的对齐方式。\n-\tflex-start（默认值）：左对齐\n-\tflex-end：右对齐\n-\tcenter： 居中\n-\tspace-between：两端对齐，项目之间的间隔都相等。\n-\tspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n#### 2.5 align-items\n`align-items`属性定义项目在交叉轴上如何对齐。\n-\tflex-start：交叉轴的起点对齐。\n-\tflex-end：交叉轴的终点对齐。\n-\tcenter：交叉轴的中点对齐。\n-\tbaseline: 项目的第一行文字的基线对齐。\n-\tstretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n#### 2.6 align-content\n`align-content`属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n-\tflex-start：与交叉轴的起点对齐。\n-\tflex-end：与交叉轴的终点对齐。\n-\tcenter：与交叉轴的中点对齐。\n-\tspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n-\tspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n-\tstretch（默认值）：轴线占满整个交叉轴。\n\n### 3、项目的属性\n\n#### 3.1 order\n`order`属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n#### 3.2 flex-grow\n`flex-grow`属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n#### 3.3 flex-shrink\n`flex-shrink`属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n#### 3.4 flex-basis\n`flex-basis`属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n#### 3.5 flex\n`flex`属性是`flex-grow`, `flex-shrink` 和` flex-basis`的简写，默认值为0 1 auto。后两个属性可选。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值\n#### 3.6 align-self\n`align-self`属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n### 4、布局实战\n\n公共样式\n\n```\n.box{\n\tdisplay: flex;\n\twidth: 250px;\n\theight: 250px;\n\tborder-radius: 15px;\n\n\tbackground-color: #f5f5d5;\n}\n.item{\n\twidth: 60px;\n\theight: 60px; \n\tborder-radius: 50%;\n\tcolor: #fff;\n\tbackground-color: black;\n\ttext-align: center;\n}\n\n```\n\n#### 实例1:\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/03.png?raw=true)\n\n```\n<div class=\"box eg1\">\n\t<span class=\"item\">1</span>\n\t<span class=\"item\">2</span>\n\t<span class=\"item\">3</span>\n</div>\n\n```\n\n```\n\t.eg1{\n\t\tflex-direction: row-reverse;\n\n\t\talign-items: center;\n\n\t\tjustify-content: center;\n\n\t}\n```\n\n&nbsp;\n\n#### 实例2:\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/04.png?raw=true)\n\n```\n<div class=\"box eg2\">\n\t<span class=\"item\">1</span>\n\t<span class=\"item\">2</span>\n\t<span class=\"item\">3</span>\n\t<span class=\"item\">4</span>\n\t<span class=\"item\">5</span>\n\t<span class=\"item\">6</span>\n</div>\n```\n```\n.eg2{\n\t\tflex-wrap: wrap;\n\n\t\talign-content:  space-around;\n\t}\n```\n\n&nbsp;\n\n#### 实例3:\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/05.png?raw=true)\n\n```\n<div class=\"box eg3\">\n\t<div class=\"row\">\n\t\t<span class=\"item\">1</span>\n\t\t<span class=\"item\">2</span>\n\t\t<span class=\"item\">3</span>\n\t</div>\n\t<div class=\"row\">\n\t\t<span class=\"item\">3</span>\n\t</div>\n\t<div class=\"row\">\n\t\t<span class=\"item\">4</span>\n\t\t<span class=\"item\">5</span>\n\t</div>\n</div>\n```\n```\n.eg3{\n\t\tflex-wrap: wrap;\n\t}\n\t.eg3 .row{\n\t\tdisplay: flex;\n\t\tflex-basis:100%;\n\t}\n\t.eg3 .row:nth-child(2){\n\t\tjustify-content: center;\n\t}\n\t.eg3 .row:nth-child(3){\n\t\tjustify-content: space-between;\n\t}\n```\n\n&nbsp;\n\n#### 实例4:\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/06.png?raw=true)\n\n```\n<div class=\"box eg4\">\n\t<span class=\"item\">1</span>\n\t<span class=\"item\">2</span>\n\t<span class=\"item\">3</span>\n\t<span class=\"item\">4</span>\n\t<span class=\"item\">5</span>\n\t<span class=\"item\">6</span>\n\t<span class=\"item\">7</span>\n\t<span class=\"item\">8</span>\n\t<span class=\"item\">9</span>\n</div>\n```\n```\n.eg4{\n\t\tflex-wrap: wrap;\n    \tjustify-content: space-between;\n\t}\n\t.eg4 .item{\n\t\twidth: 63px;\n    \theight: 63px;\n\t}\n```\n\n&nbsp;\n\n#### 实例5: 网格布局\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/07.png?raw=true)\n\n```\n<div class=\"Grid\">\n\t<div class=\"Grid-cell\">\n\t\t<span class=\"Grid-cell-item\">1/2</span>\n\t\t<span class=\"Grid-cell-item\">1/2</span>\n\t</div>\n\t<div class=\"Grid-cell\">\n\t\t<span class=\"Grid-cell-item\">1/3</span>\n\t\t<span class=\"Grid-cell-item\">1/3</span>\n\t\t<span class=\"Grid-cell-item\">1/3</span>\n\t</div>\n\t<div class=\"Grid-cell\">\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t</div>\n</div>\n```\n```\n.Grid .Grid-cell{\n\t\tdisplay: flex;\n\t}\n\n\t.Grid .Grid-cell .Grid-cell-item{\n\t\tflex:1;\n\t\t\n\t\tmargin:10px;\n\t\ttext-align: center;\n\n\t\tbackground-color: #f3f3f3;\n\t}\n```\n\n&nbsp;\n\n#### 实例6：圣杯布局\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/08.png?raw=true)\n\n```\n<section class=\"body HolyGrail\">\n  <header>i am header</header>\n  <div class=\"HolyGrail-body\">\n    <main class=\"HolyGrail-content\">content</main>\n    <nav class=\"HolyGrail-nav\">nav</nav>\n    <aside class=\"HolyGrail-ads\">ads</aside>\n  </div>\n  <footer>i am footer</footer>\n</section>\n```\n```\n.HolyGrail{\n\t\tdisplay: flex;\n\t\tmin-height: 500px;\n\t\tflex-direction: column;\n\n\t\ttext-align: center;\n\t\tcolor: #fff;\n\t}\n\n\t.HolyGrail header,\n\t.HolyGrail footer{\n\t\theight: 65px;\n\t\tbackground-color: #666; \n\t}\n\t.HolyGrail-body{\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t}\n\t.HolyGrail-ads{\n\t\twidth: 100px;\n\t\tbackground-color: #FF6633; \n\t}\n\t.HolyGrail-content{\n\t\tflex: 1;\n\t\tbackground-color: #D6D6D6; \n\t}\n\t.HolyGrail-nav{\n\t\twidth: 80px;\n\t\torder: -1;\n\n\t\tbackground-color: #77BBDD; \n\t}\n```\n","source":"_posts/2017-4-25-flexbox布局.md","raw":"---\ntitle: flexbox布局\ndate: 2017-4-25 15:55:55\ntags:\n-   flexbox\n-   css\n-   页面布局\n---\n\n\n> 布局的传统解决方案，基于盒状模型，依赖 `display`属性 + `position`属性 + `float`属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n2009年，W3C提出了一种新的方案----`Flex布局`，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/01.png?raw=true)\n\n&nbsp;\n\n<!-- more -->\n\n### 1、基本概念\n`Flex`是`Flexible Box`的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。采用Flex布局的元素，称为`Flex容器（flex container）`，简称\"`容器`\"。它的所有子元素自动成为容器成员，称为`Flex项目（flex item）`，简称\"`项目`。注意，设为Flex布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/02.png?raw=true)\n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n### 2、容器的属性\n\n#### 2.1 flex-direction\n`flex-direction`属性决定主轴的方向（即项目的排列方向）, 有以下取值：\n-\trow（默认值）：主轴为水平方向，起点在左端。\n-\trow-reverse：主轴为水平方向，起点在右端。\n-\tcolumn：主轴为垂直方向，起点在上沿。\n-\tcolumn-reverse：主轴为垂直方向，起点在下沿。\n#### 2.2 flex-wrap\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行,有以下取值：\n-\tnowrap（默认）：不换行\n-\twrap：换行，第一行在上方。\n-\twrap-reverse：换行，第一行在下方\n#### 2.3 flex-flow\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为row nowrap。\n#### 2.4 justify-content\n`justify-content`属性定义了项目在主轴上的对齐方式。\n-\tflex-start（默认值）：左对齐\n-\tflex-end：右对齐\n-\tcenter： 居中\n-\tspace-between：两端对齐，项目之间的间隔都相等。\n-\tspace-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n#### 2.5 align-items\n`align-items`属性定义项目在交叉轴上如何对齐。\n-\tflex-start：交叉轴的起点对齐。\n-\tflex-end：交叉轴的终点对齐。\n-\tcenter：交叉轴的中点对齐。\n-\tbaseline: 项目的第一行文字的基线对齐。\n-\tstretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n#### 2.6 align-content\n`align-content`属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n-\tflex-start：与交叉轴的起点对齐。\n-\tflex-end：与交叉轴的终点对齐。\n-\tcenter：与交叉轴的中点对齐。\n-\tspace-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n-\tspace-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n-\tstretch（默认值）：轴线占满整个交叉轴。\n\n### 3、项目的属性\n\n#### 3.1 order\n`order`属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n#### 3.2 flex-grow\n`flex-grow`属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n#### 3.3 flex-shrink\n`flex-shrink`属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\n#### 3.4 flex-basis\n`flex-basis`属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\n它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\n#### 3.5 flex\n`flex`属性是`flex-grow`, `flex-shrink` 和` flex-basis`的简写，默认值为0 1 auto。后两个属性可选。\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值\n#### 3.6 align-self\n`align-self`属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\n\n### 4、布局实战\n\n公共样式\n\n```\n.box{\n\tdisplay: flex;\n\twidth: 250px;\n\theight: 250px;\n\tborder-radius: 15px;\n\n\tbackground-color: #f5f5d5;\n}\n.item{\n\twidth: 60px;\n\theight: 60px; \n\tborder-radius: 50%;\n\tcolor: #fff;\n\tbackground-color: black;\n\ttext-align: center;\n}\n\n```\n\n#### 实例1:\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/03.png?raw=true)\n\n```\n<div class=\"box eg1\">\n\t<span class=\"item\">1</span>\n\t<span class=\"item\">2</span>\n\t<span class=\"item\">3</span>\n</div>\n\n```\n\n```\n\t.eg1{\n\t\tflex-direction: row-reverse;\n\n\t\talign-items: center;\n\n\t\tjustify-content: center;\n\n\t}\n```\n\n&nbsp;\n\n#### 实例2:\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/04.png?raw=true)\n\n```\n<div class=\"box eg2\">\n\t<span class=\"item\">1</span>\n\t<span class=\"item\">2</span>\n\t<span class=\"item\">3</span>\n\t<span class=\"item\">4</span>\n\t<span class=\"item\">5</span>\n\t<span class=\"item\">6</span>\n</div>\n```\n```\n.eg2{\n\t\tflex-wrap: wrap;\n\n\t\talign-content:  space-around;\n\t}\n```\n\n&nbsp;\n\n#### 实例3:\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/05.png?raw=true)\n\n```\n<div class=\"box eg3\">\n\t<div class=\"row\">\n\t\t<span class=\"item\">1</span>\n\t\t<span class=\"item\">2</span>\n\t\t<span class=\"item\">3</span>\n\t</div>\n\t<div class=\"row\">\n\t\t<span class=\"item\">3</span>\n\t</div>\n\t<div class=\"row\">\n\t\t<span class=\"item\">4</span>\n\t\t<span class=\"item\">5</span>\n\t</div>\n</div>\n```\n```\n.eg3{\n\t\tflex-wrap: wrap;\n\t}\n\t.eg3 .row{\n\t\tdisplay: flex;\n\t\tflex-basis:100%;\n\t}\n\t.eg3 .row:nth-child(2){\n\t\tjustify-content: center;\n\t}\n\t.eg3 .row:nth-child(3){\n\t\tjustify-content: space-between;\n\t}\n```\n\n&nbsp;\n\n#### 实例4:\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/06.png?raw=true)\n\n```\n<div class=\"box eg4\">\n\t<span class=\"item\">1</span>\n\t<span class=\"item\">2</span>\n\t<span class=\"item\">3</span>\n\t<span class=\"item\">4</span>\n\t<span class=\"item\">5</span>\n\t<span class=\"item\">6</span>\n\t<span class=\"item\">7</span>\n\t<span class=\"item\">8</span>\n\t<span class=\"item\">9</span>\n</div>\n```\n```\n.eg4{\n\t\tflex-wrap: wrap;\n    \tjustify-content: space-between;\n\t}\n\t.eg4 .item{\n\t\twidth: 63px;\n    \theight: 63px;\n\t}\n```\n\n&nbsp;\n\n#### 实例5: 网格布局\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/07.png?raw=true)\n\n```\n<div class=\"Grid\">\n\t<div class=\"Grid-cell\">\n\t\t<span class=\"Grid-cell-item\">1/2</span>\n\t\t<span class=\"Grid-cell-item\">1/2</span>\n\t</div>\n\t<div class=\"Grid-cell\">\n\t\t<span class=\"Grid-cell-item\">1/3</span>\n\t\t<span class=\"Grid-cell-item\">1/3</span>\n\t\t<span class=\"Grid-cell-item\">1/3</span>\n\t</div>\n\t<div class=\"Grid-cell\">\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t\t<span class=\"Grid-cell-item\">1/4</span>\n\t</div>\n</div>\n```\n```\n.Grid .Grid-cell{\n\t\tdisplay: flex;\n\t}\n\n\t.Grid .Grid-cell .Grid-cell-item{\n\t\tflex:1;\n\t\t\n\t\tmargin:10px;\n\t\ttext-align: center;\n\n\t\tbackground-color: #f3f3f3;\n\t}\n```\n\n&nbsp;\n\n#### 实例6：圣杯布局\n\n![image](https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/08.png?raw=true)\n\n```\n<section class=\"body HolyGrail\">\n  <header>i am header</header>\n  <div class=\"HolyGrail-body\">\n    <main class=\"HolyGrail-content\">content</main>\n    <nav class=\"HolyGrail-nav\">nav</nav>\n    <aside class=\"HolyGrail-ads\">ads</aside>\n  </div>\n  <footer>i am footer</footer>\n</section>\n```\n```\n.HolyGrail{\n\t\tdisplay: flex;\n\t\tmin-height: 500px;\n\t\tflex-direction: column;\n\n\t\ttext-align: center;\n\t\tcolor: #fff;\n\t}\n\n\t.HolyGrail header,\n\t.HolyGrail footer{\n\t\theight: 65px;\n\t\tbackground-color: #666; \n\t}\n\t.HolyGrail-body{\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t}\n\t.HolyGrail-ads{\n\t\twidth: 100px;\n\t\tbackground-color: #FF6633; \n\t}\n\t.HolyGrail-content{\n\t\tflex: 1;\n\t\tbackground-color: #D6D6D6; \n\t}\n\t.HolyGrail-nav{\n\t\twidth: 80px;\n\t\torder: -1;\n\n\t\tbackground-color: #77BBDD; \n\t}\n```\n","slug":"2017-4-25-flexbox布局","published":1,"updated":"2017-04-26T03:30:18.554Z","_id":"cj1xenysj0000mkyj8jkts1ga","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>布局的传统解决方案，基于盒状模型，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。<br>2009年，W3C提出了一种新的方案—-<code>Flex布局</code>，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n</blockquote>\n<p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/01.png?raw=true\" alt=\"image\"></p>\n<p>&nbsp;</p>\n<a id=\"more\"></a>\n<h3 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h3><p><code>Flex</code>是<code>Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。采用Flex布局的元素，称为<code>Flex容器（flex container）</code>，简称”<code>容器</code>“。它的所有子元素自动成为容器成员，称为<code>Flex项目（flex item）</code>，简称”<code>项目</code>。注意，设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/02.png?raw=true\" alt=\"image\"></p>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h3 id=\"2、容器的属性\"><a href=\"#2、容器的属性\" class=\"headerlink\" title=\"2、容器的属性\"></a>2、容器的属性</h3><h4 id=\"2-1-flex-direction\"><a href=\"#2-1-flex-direction\" class=\"headerlink\" title=\"2.1 flex-direction\"></a>2.1 flex-direction</h4><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）, 有以下取值：</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。<h4 id=\"2-2-flex-wrap\"><a href=\"#2-2-flex-wrap\" class=\"headerlink\" title=\"2.2 flex-wrap\"></a>2.2 flex-wrap</h4>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行,有以下取值：</li>\n<li>nowrap（默认）：不换行</li>\n<li>wrap：换行，第一行在上方。</li>\n<li>wrap-reverse：换行，第一行在下方<h4 id=\"2-3-flex-flow\"><a href=\"#2-3-flex-flow\" class=\"headerlink\" title=\"2.3 flex-flow\"></a>2.3 flex-flow</h4><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为row nowrap。<h4 id=\"2-4-justify-content\"><a href=\"#2-4-justify-content\" class=\"headerlink\" title=\"2.4 justify-content\"></a>2.4 justify-content</h4><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</li>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<h4 id=\"2-5-align-items\"><a href=\"#2-5-align-items\" class=\"headerlink\" title=\"2.5 align-items\"></a>2.5 align-items</h4><code>align-items</code>属性定义项目在交叉轴上如何对齐。</li>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<h4 id=\"2-6-align-content\"><a href=\"#2-6-align-content\" class=\"headerlink\" title=\"2.6 align-content\"></a>2.6 align-content</h4><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h3 id=\"3、项目的属性\"><a href=\"#3、项目的属性\" class=\"headerlink\" title=\"3、项目的属性\"></a>3、项目的属性</h3><h4 id=\"3-1-order\"><a href=\"#3-1-order\" class=\"headerlink\" title=\"3.1 order\"></a>3.1 order</h4><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>\n<h4 id=\"3-2-flex-grow\"><a href=\"#3-2-flex-grow\" class=\"headerlink\" title=\"3.2 flex-grow\"></a>3.2 flex-grow</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h4 id=\"3-3-flex-shrink\"><a href=\"#3-3-flex-shrink\" class=\"headerlink\" title=\"3.3 flex-shrink\"></a>3.3 flex-shrink</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<h4 id=\"3-4-flex-basis\"><a href=\"#3-4-flex-basis\" class=\"headerlink\" title=\"3.4 flex-basis\"></a>3.4 flex-basis</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h4 id=\"3-5-flex\"><a href=\"#3-5-flex\" class=\"headerlink\" title=\"3.5 flex\"></a>3.5 flex</h4><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和<code>flex-basis</code>的简写，默认值为0 1 auto。后两个属性可选。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</p>\n<h4 id=\"3-6-align-self\"><a href=\"#3-6-align-self\" class=\"headerlink\" title=\"3.6 align-self\"></a>3.6 align-self</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n<h3 id=\"4、布局实战\"><a href=\"#4、布局实战\" class=\"headerlink\" title=\"4、布局实战\"></a>4、布局实战</h3><p>公共样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tborder-radius: 15px;</div><div class=\"line\"></div><div class=\"line\">\tbackground-color: #f5f5d5;</div><div class=\"line\">&#125;</div><div class=\"line\">.item&#123;</div><div class=\"line\">\twidth: 60px;</div><div class=\"line\">\theight: 60px; </div><div class=\"line\">\tborder-radius: 50%;</div><div class=\"line\">\tcolor: #fff;</div><div class=\"line\">\tbackground-color: black;</div><div class=\"line\">\ttext-align: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1:\"></a>实例1:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/03.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg1&quot;&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg1&#123;</div><div class=\"line\">\tflex-direction: row-reverse;</div><div class=\"line\"></div><div class=\"line\">\talign-items: center;</div><div class=\"line\"></div><div class=\"line\">\tjustify-content: center;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2:\"></a>实例2:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/04.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg2&quot;&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;4&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;5&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;6&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg2&#123;</div><div class=\"line\">\t\tflex-wrap: wrap;</div><div class=\"line\"></div><div class=\"line\">\t\talign-content:  space-around;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例3\"><a href=\"#实例3\" class=\"headerlink\" title=\"实例3:\"></a>实例3:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/05.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg3&quot;&gt;</div><div class=\"line\">\t&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;5&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg3&#123;</div><div class=\"line\">\t\tflex-wrap: wrap;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg3 .row&#123;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t\tflex-basis:100%;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg3 .row:nth-child(2)&#123;</div><div class=\"line\">\t\tjustify-content: center;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg3 .row:nth-child(3)&#123;</div><div class=\"line\">\t\tjustify-content: space-between;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例4\"><a href=\"#实例4\" class=\"headerlink\" title=\"实例4:\"></a>实例4:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/06.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg4&quot;&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;4&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;5&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;6&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;7&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;8&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;9&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg4&#123;</div><div class=\"line\">\t\tflex-wrap: wrap;</div><div class=\"line\">    \tjustify-content: space-between;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg4 .item&#123;</div><div class=\"line\">\t\twidth: 63px;</div><div class=\"line\">    \theight: 63px;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例5-网格布局\"><a href=\"#实例5-网格布局\" class=\"headerlink\" title=\"实例5: 网格布局\"></a>实例5: 网格布局</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/07.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;Grid&quot;&gt;</div><div class=\"line\">\t&lt;div class=&quot;Grid-cell&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/2&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/2&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;Grid-cell&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/3&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/3&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/3&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;Grid-cell&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.Grid .Grid-cell&#123;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.Grid .Grid-cell .Grid-cell-item&#123;</div><div class=\"line\">\t\tflex:1;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmargin:10px;</div><div class=\"line\">\t\ttext-align: center;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground-color: #f3f3f3;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例6：圣杯布局\"><a href=\"#实例6：圣杯布局\" class=\"headerlink\" title=\"实例6：圣杯布局\"></a>实例6：圣杯布局</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/08.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;section class=&quot;body HolyGrail&quot;&gt;</div><div class=\"line\">  &lt;header&gt;i am header&lt;/header&gt;</div><div class=\"line\">  &lt;div class=&quot;HolyGrail-body&quot;&gt;</div><div class=\"line\">    &lt;main class=&quot;HolyGrail-content&quot;&gt;content&lt;/main&gt;</div><div class=\"line\">    &lt;nav class=&quot;HolyGrail-nav&quot;&gt;nav&lt;/nav&gt;</div><div class=\"line\">    &lt;aside class=&quot;HolyGrail-ads&quot;&gt;ads&lt;/aside&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;footer&gt;i am footer&lt;/footer&gt;</div><div class=\"line\">&lt;/section&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">.HolyGrail&#123;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t\tmin-height: 500px;</div><div class=\"line\">\t\tflex-direction: column;</div><div class=\"line\"></div><div class=\"line\">\t\ttext-align: center;</div><div class=\"line\">\t\tcolor: #fff;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.HolyGrail header,</div><div class=\"line\">\t.HolyGrail footer&#123;</div><div class=\"line\">\t\theight: 65px;</div><div class=\"line\">\t\tbackground-color: #666; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-body&#123;</div><div class=\"line\">\t\tflex: 1;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-ads&#123;</div><div class=\"line\">\t\twidth: 100px;</div><div class=\"line\">\t\tbackground-color: #FF6633; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-content&#123;</div><div class=\"line\">\t\tflex: 1;</div><div class=\"line\">\t\tbackground-color: #D6D6D6; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-nav&#123;</div><div class=\"line\">\t\twidth: 80px;</div><div class=\"line\">\t\torder: -1;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground-color: #77BBDD; </div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>布局的传统解决方案，基于盒状模型，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。<br>2009年，W3C提出了一种新的方案—-<code>Flex布局</code>，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n</blockquote>\n<p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/01.png?raw=true\" alt=\"image\"></p>\n<p>&nbsp;</p>","more":"<h3 id=\"1、基本概念\"><a href=\"#1、基本概念\" class=\"headerlink\" title=\"1、基本概念\"></a>1、基本概念</h3><p><code>Flex</code>是<code>Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。采用Flex布局的元素，称为<code>Flex容器（flex container）</code>，简称”<code>容器</code>“。它的所有子元素自动成为容器成员，称为<code>Flex项目（flex item）</code>，简称”<code>项目</code>。注意，设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/02.png?raw=true\" alt=\"image\"></p>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h3 id=\"2、容器的属性\"><a href=\"#2、容器的属性\" class=\"headerlink\" title=\"2、容器的属性\"></a>2、容器的属性</h3><h4 id=\"2-1-flex-direction\"><a href=\"#2-1-flex-direction\" class=\"headerlink\" title=\"2.1 flex-direction\"></a>2.1 flex-direction</h4><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）, 有以下取值：</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。<h4 id=\"2-2-flex-wrap\"><a href=\"#2-2-flex-wrap\" class=\"headerlink\" title=\"2.2 flex-wrap\"></a>2.2 flex-wrap</h4>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行,有以下取值：</li>\n<li>nowrap（默认）：不换行</li>\n<li>wrap：换行，第一行在上方。</li>\n<li>wrap-reverse：换行，第一行在下方<h4 id=\"2-3-flex-flow\"><a href=\"#2-3-flex-flow\" class=\"headerlink\" title=\"2.3 flex-flow\"></a>2.3 flex-flow</h4><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为row nowrap。<h4 id=\"2-4-justify-content\"><a href=\"#2-4-justify-content\" class=\"headerlink\" title=\"2.4 justify-content\"></a>2.4 justify-content</h4><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</li>\n<li>flex-start（默认值）：左对齐</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<h4 id=\"2-5-align-items\"><a href=\"#2-5-align-items\" class=\"headerlink\" title=\"2.5 align-items\"></a>2.5 align-items</h4><code>align-items</code>属性定义项目在交叉轴上如何对齐。</li>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<h4 id=\"2-6-align-content\"><a href=\"#2-6-align-content\" class=\"headerlink\" title=\"2.6 align-content\"></a>2.6 align-content</h4><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h3 id=\"3、项目的属性\"><a href=\"#3、项目的属性\" class=\"headerlink\" title=\"3、项目的属性\"></a>3、项目的属性</h3><h4 id=\"3-1-order\"><a href=\"#3-1-order\" class=\"headerlink\" title=\"3.1 order\"></a>3.1 order</h4><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>\n<h4 id=\"3-2-flex-grow\"><a href=\"#3-2-flex-grow\" class=\"headerlink\" title=\"3.2 flex-grow\"></a>3.2 flex-grow</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h4 id=\"3-3-flex-shrink\"><a href=\"#3-3-flex-shrink\" class=\"headerlink\" title=\"3.3 flex-shrink\"></a>3.3 flex-shrink</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<h4 id=\"3-4-flex-basis\"><a href=\"#3-4-flex-basis\" class=\"headerlink\" title=\"3.4 flex-basis\"></a>3.4 flex-basis</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h4 id=\"3-5-flex\"><a href=\"#3-5-flex\" class=\"headerlink\" title=\"3.5 flex\"></a>3.5 flex</h4><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和<code>flex-basis</code>的简写，默认值为0 1 auto。后两个属性可选。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</p>\n<h4 id=\"3-6-align-self\"><a href=\"#3-6-align-self\" class=\"headerlink\" title=\"3.6 align-self\"></a>3.6 align-self</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n<h3 id=\"4、布局实战\"><a href=\"#4、布局实战\" class=\"headerlink\" title=\"4、布局实战\"></a>4、布局实战</h3><p>公共样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tdisplay: flex;</div><div class=\"line\">\twidth: 250px;</div><div class=\"line\">\theight: 250px;</div><div class=\"line\">\tborder-radius: 15px;</div><div class=\"line\"></div><div class=\"line\">\tbackground-color: #f5f5d5;</div><div class=\"line\">&#125;</div><div class=\"line\">.item&#123;</div><div class=\"line\">\twidth: 60px;</div><div class=\"line\">\theight: 60px; </div><div class=\"line\">\tborder-radius: 50%;</div><div class=\"line\">\tcolor: #fff;</div><div class=\"line\">\tbackground-color: black;</div><div class=\"line\">\ttext-align: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1:\"></a>实例1:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/03.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg1&quot;&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg1&#123;</div><div class=\"line\">\tflex-direction: row-reverse;</div><div class=\"line\"></div><div class=\"line\">\talign-items: center;</div><div class=\"line\"></div><div class=\"line\">\tjustify-content: center;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2:\"></a>实例2:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/04.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg2&quot;&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;4&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;5&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;6&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg2&#123;</div><div class=\"line\">\t\tflex-wrap: wrap;</div><div class=\"line\"></div><div class=\"line\">\t\talign-content:  space-around;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例3\"><a href=\"#实例3\" class=\"headerlink\" title=\"实例3:\"></a>实例3:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/05.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg3&quot;&gt;</div><div class=\"line\">\t&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;row&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;item&quot;&gt;5&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg3&#123;</div><div class=\"line\">\t\tflex-wrap: wrap;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg3 .row&#123;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t\tflex-basis:100%;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg3 .row:nth-child(2)&#123;</div><div class=\"line\">\t\tjustify-content: center;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg3 .row:nth-child(3)&#123;</div><div class=\"line\">\t\tjustify-content: space-between;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例4\"><a href=\"#实例4\" class=\"headerlink\" title=\"实例4:\"></a>实例4:</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/06.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;box eg4&quot;&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;1&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;2&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;3&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;4&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;5&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;6&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;7&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;8&lt;/span&gt;</div><div class=\"line\">\t&lt;span class=&quot;item&quot;&gt;9&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.eg4&#123;</div><div class=\"line\">\t\tflex-wrap: wrap;</div><div class=\"line\">    \tjustify-content: space-between;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.eg4 .item&#123;</div><div class=\"line\">\t\twidth: 63px;</div><div class=\"line\">    \theight: 63px;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例5-网格布局\"><a href=\"#实例5-网格布局\" class=\"headerlink\" title=\"实例5: 网格布局\"></a>实例5: 网格布局</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/07.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;Grid&quot;&gt;</div><div class=\"line\">\t&lt;div class=&quot;Grid-cell&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/2&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/2&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;Grid-cell&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/3&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/3&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/3&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=&quot;Grid-cell&quot;&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=&quot;Grid-cell-item&quot;&gt;1/4&lt;/span&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.Grid .Grid-cell&#123;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.Grid .Grid-cell .Grid-cell-item&#123;</div><div class=\"line\">\t\tflex:1;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tmargin:10px;</div><div class=\"line\">\t\ttext-align: center;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground-color: #f3f3f3;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h4 id=\"实例6：圣杯布局\"><a href=\"#实例6：圣杯布局\" class=\"headerlink\" title=\"实例6：圣杯布局\"></a>实例6：圣杯布局</h4><p><img src=\"https://github.com/ingdanfed/teamblog/blob/dev/source/images/2017-4-26/08.png?raw=true\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;section class=&quot;body HolyGrail&quot;&gt;</div><div class=\"line\">  &lt;header&gt;i am header&lt;/header&gt;</div><div class=\"line\">  &lt;div class=&quot;HolyGrail-body&quot;&gt;</div><div class=\"line\">    &lt;main class=&quot;HolyGrail-content&quot;&gt;content&lt;/main&gt;</div><div class=\"line\">    &lt;nav class=&quot;HolyGrail-nav&quot;&gt;nav&lt;/nav&gt;</div><div class=\"line\">    &lt;aside class=&quot;HolyGrail-ads&quot;&gt;ads&lt;/aside&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;footer&gt;i am footer&lt;/footer&gt;</div><div class=\"line\">&lt;/section&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">.HolyGrail&#123;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t\tmin-height: 500px;</div><div class=\"line\">\t\tflex-direction: column;</div><div class=\"line\"></div><div class=\"line\">\t\ttext-align: center;</div><div class=\"line\">\t\tcolor: #fff;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.HolyGrail header,</div><div class=\"line\">\t.HolyGrail footer&#123;</div><div class=\"line\">\t\theight: 65px;</div><div class=\"line\">\t\tbackground-color: #666; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-body&#123;</div><div class=\"line\">\t\tflex: 1;</div><div class=\"line\">\t\tdisplay: flex;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-ads&#123;</div><div class=\"line\">\t\twidth: 100px;</div><div class=\"line\">\t\tbackground-color: #FF6633; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-content&#123;</div><div class=\"line\">\t\tflex: 1;</div><div class=\"line\">\t\tbackground-color: #D6D6D6; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.HolyGrail-nav&#123;</div><div class=\"line\">\t\twidth: 80px;</div><div class=\"line\">\t\torder: -1;</div><div class=\"line\"></div><div class=\"line\">\t\tbackground-color: #77BBDD; </div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1xee8dp0000d8yj5tivjlsl","category_id":"cj1xee8dy0003d8yj6tbjdznu","_id":"cj1xee8e9000ad8yjcuqt4mde"},{"post_id":"cj1xee8dv0002d8yjypl6enx5","category_id":"cj1xee8e70007d8yjtxhlx087","_id":"cj1xee8eb000dd8yjzqroikdi"},{"post_id":"cj1xee8e10005d8yjtpofzn35","category_id":"cj1xee8e70007d8yjtxhlx087","_id":"cj1xee8ej000fd8yjplo4bip0"}],"PostTag":[{"post_id":"cj1xee8dp0000d8yj5tivjlsl","tag_id":"cj1xee8e00004d8yj8wy74n76","_id":"cj1xee8e80009d8yjzjupjgok"},{"post_id":"cj1xee8dv0002d8yjypl6enx5","tag_id":"cj1xee8e70008d8yjqrk0qznb","_id":"cj1xee8ek000hd8yjbxoux8dz"},{"post_id":"cj1xee8dv0002d8yjypl6enx5","tag_id":"cj1xee8e9000cd8yjxm1j0tg4","_id":"cj1xee8el000id8yjlre709p8"},{"post_id":"cj1xee8dv0002d8yjypl6enx5","tag_id":"cj1xee8eb000ed8yjnvev87qq","_id":"cj1xee8em000kd8yjouglgs07"},{"post_id":"cj1xee8e10005d8yjtpofzn35","tag_id":"cj1xee8ej000gd8yja1rhddfs","_id":"cj1xee8eo000md8yjewgzqe51"},{"post_id":"cj1xee8e10005d8yjtpofzn35","tag_id":"cj1xee8el000jd8yj4w48jw82","_id":"cj1xee8eo000nd8yjyog979t8"},{"post_id":"cj1xee8e10005d8yjtpofzn35","tag_id":"cj1xee8em000ld8yjst0c1ijf","_id":"cj1xee8eo000od8yjqmukyn24"},{"post_id":"cj1xenysj0000mkyj8jkts1ga","tag_id":"cj1xenysw0001mkyjium2tmb0","_id":"cj1xenyt20004mkyjzgn7qdhn"},{"post_id":"cj1xenysj0000mkyj8jkts1ga","tag_id":"cj1xenyt00002mkyj8wo55sf2","_id":"cj1xenyt20005mkyju7sb6g30"},{"post_id":"cj1xenysj0000mkyj8jkts1ga","tag_id":"cj1xenyt10003mkyjm62w99k3","_id":"cj1xenyt30006mkyjzj4x6pnw"}],"Tag":[{"name":"hexo","_id":"cj1xee8e00004d8yj8wy74n76"},{"name":"img","_id":"cj1xee8e70008d8yjqrk0qznb"},{"name":"upload","_id":"cj1xee8e9000cd8yjxm1j0tg4"},{"name":"file","_id":"cj1xee8eb000ed8yjnvev87qq"},{"name":"nodejs","_id":"cj1xee8ej000gd8yja1rhddfs"},{"name":"express","_id":"cj1xee8el000jd8yj4w48jw82"},{"name":"router","_id":"cj1xee8em000ld8yjst0c1ijf"},{"name":"flexbox","_id":"cj1xenysw0001mkyjium2tmb0"},{"name":"css","_id":"cj1xenyt00002mkyj8wo55sf2"},{"name":"页面布局","_id":"cj1xenyt10003mkyjm62w99k3"}]}}