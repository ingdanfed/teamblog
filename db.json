{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/logo.png","path":"images/logo.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.09c351.js","path":"mobile.09c351.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.a1ed4e.css","path":"main.a1ed4e.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.1c60ce.js","path":"mobile.1c60ce.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.01b703.js","path":"slider.01b703.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.a1ed4e.js","path":"main.a1ed4e.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.f86d3a.css","path":"main.f86d3a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.09701d.svg","path":"fonts/iconfont.09701d.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.5539f3.js","path":"slider.5539f3.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.f86d3a.js","path":"main.f86d3a.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1490253107218},{"_id":"themes/yilia/_config.yml","hash":"a02ecfe443795ac024d0635376ecd3004ae03711","modified":1490253107220},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1490253107407},{"_id":"source/_posts/2017-03-22-express路由.md","hash":"8114f710aa24c8787cafc68ff35ac306eb51b553","modified":1490319788913},{"_id":"source/_posts/2017-03-23-使用hexo遇到的一个坑.md","hash":"727a2270386967cdf72e6f6bd486b5c3d88420e3","modified":1490242503159},{"_id":"source/_posts/2017-04-12-workers.md","hash":"c9db40c84da0b4a99adf4efb301d14c38e5bd400","modified":1493195563829},{"_id":"source/_posts/2017-03-28-使用webpack构建时给window绑定事件的坑.md","hash":"b0f10a10693ce575667ac4c1ef6a206cc805a43e","modified":1491789603040},{"_id":"source/_posts/2017-04-13-h5唤醒App.md","hash":"696f8ab4747e640596382ca196818d04daf60261","modified":1493181947684},{"_id":"source/_posts/2017-04-26-vuejs基础入门.md","hash":"30dc9292fc86ad189d0903bcd4cc186237e12fb4","modified":1493180039064},{"_id":"source/category/index.md","hash":"bc2b738383aaa9cb34d864f24cb99b7652b55921","modified":1490177746770},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1490253107221},{"_id":"themes/yilia/package.json","hash":"9ddaba266f5a78e2cf1ce30d7c5f586d74289a82","modified":1490253107280},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1490253107222},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1490253107224},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1490253107225},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1490253107228},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1490253107229},{"_id":"source/_posts/2017-03-30-JavaScript排序算法及性能比较.md","hash":"494df5b5ea19d62d18abfd61790cc9fdd90f7a74","modified":1491789622177},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1490253107226},{"_id":"source/images/favicon.ico","hash":"4dfbe4ef371ba3ee877b3d9e761424f2cdf36553","modified":1483156477980},{"_id":"source/images/logo.png","hash":"fb0ed04cf417424f98ecf09bac0c6af93637e5d0","modified":1483156477319},{"_id":"source/_posts/2017-04-06-立即显示上传的图片.md","hash":"31e3ad16dab1b5b4f760634219ce689c1efc4c28","modified":1491789622181},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1490253107271},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1490253107271},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490253107275},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1490253107273},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1490253107278},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1490253107274},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490253107277},{"_id":"themes/yilia/source/main.2d7529.css","hash":"9f4191c9082130c3eeab7f6e1cbdada4f19fb0b7","modified":1490319788919},{"_id":"themes/yilia/source/mobile.09c351.js","hash":"dcd2a89ece583763c25989ad451ce04555101ab8","modified":1490253107396},{"_id":"themes/yilia/source/main.a1ed4e.css","hash":"dcc71f6c77b87ceb49a3023a23e15f8db60f66d8","modified":1490253107384},{"_id":"themes/yilia/source/mobile.1c60ce.js","hash":"8bb5d67029f50cf775dae715c339d547037804ea","modified":1490253107397},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1490253107398},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1490253107282},{"_id":"themes/yilia/source/slider.01b703.js","hash":"fdf5f67d389f3454bc51525a0d5fb5dda028ed20","modified":1490253107400},{"_id":"themes/yilia/source/main.2d7529.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1490253107383},{"_id":"themes/yilia/source/main.a1ed4e.js","hash":"a6c198f27141acd3fe49163f4e6eac35cee61866","modified":1490253107387},{"_id":"themes/yilia/source/main.f86d3a.css","hash":"19236a5053690d087f1d5e8cab7826a2524f37c6","modified":1490253107389},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1490253107406},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1490253107231},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1490253107236},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1490253107251},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1490253107231},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1490253107235},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1490253107364},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1490253107232},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1490253107234},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1490253107256},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1490253107253},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"4767e666849ac2600c7a1cbf94c54cf702864f80","modified":1490253107234},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1490253107268},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1490253107254},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1490253107255},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1490253107257},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1490253107270},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1490253107366},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1490253107267},{"_id":"themes/yilia/source/fonts/iconfont.09701d.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1490253107368},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1490253107375},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1490253107377},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1490253107370},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1490253107373},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1490253107378},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490253107379},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1490253107374},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1490253107291},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1490253107371},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1490253107284},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"948e44c47c3d70584da93e7ce025dede9b7573d7","modified":1490253107302},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1490253107285},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1490253107288},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1490253107290},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1490253107318},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1490253107317},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1490253107293},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1490253107287},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1490253107329},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"5dc23be94451d54f0757de85747fd75061e8cf52","modified":1490253107303},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1490253107321},{"_id":"themes/yilia/source-src/css/left.scss","hash":"480819a673108db361c91e28e654e1ae3d0aecc2","modified":1490319788916},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1490253107331},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1490253107333},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1490253107319},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1490253107334},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1490253107335},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1490253107337},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1490253107338},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1490253107339},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1490253107340},{"_id":"themes/yilia/source/slider.5539f3.js","hash":"7f25bbc893c7d62e21d8e0f8bd36355170e7fff3","modified":1490253107404},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1490253107344},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1490253107346},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1490253107330},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1490253107352},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1490253107355},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1490253107354},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1490253107350},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1490253107356},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1490253107358},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1490253107359},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1490253107361},{"_id":"themes/yilia/source/main.f86d3a.js","hash":"0ecf6e8f68a074e7152cfe5a50b1ea5802272aa3","modified":1490253107394},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1490253107351},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1490253107259},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1490253107260},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1490253107262},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1490253107266},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1490253107362},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1490253107264},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1490253107363},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1490253107261},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1490253107263},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1490253107295},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1490253107298},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1490253107296},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1490253107323},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1490253107326},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1490253107299},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1490253107301},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490253107324},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1490253107312},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1490253107309},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1490253107314},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1490253107315},{"_id":"public/content.json","hash":"41d95ad251eceae116a956bf05595aab632a3409","modified":1493195615009},{"_id":"public/category/index.html","hash":"d7f1e6e6e98dbec722f850b73c3ceb39ca29eb38","modified":1493175412636},{"_id":"public/2017/03/30/JavaScript排序算法及性能比较/index.html","hash":"0f71d4c895a236b358bc3ea8d274184b0b01837d","modified":1493175412801},{"_id":"public/2017/03/28/使用webpack构建时给window绑定事件的坑/index.html","hash":"e9d934ee499d3242dd7b3ffb076577842300c67e","modified":1493175412808},{"_id":"public/2017/03/23/使用hexo遇到的一个坑/index.html","hash":"ad0bc755a48b269a6e9017f45ae98aee8469f655","modified":1493175412808},{"_id":"public/2017/03/22/express路由/index.html","hash":"08636b7dc83cfbfcc0101974e2454f8fcc548fd7","modified":1493175412809},{"_id":"public/archives/index.html","hash":"41a6b5c6aae726250d38f1b5acbfba9e07714d89","modified":1493175412809},{"_id":"public/2017/04/06/立即显示上传的图片/index.html","hash":"b0444214e59d54c1743ca37d4e8e0333f855d21b","modified":1493175412810},{"_id":"public/categories/分享/index.html","hash":"8195f453ae6c51fcc76f5b835961e33fe26bb01d","modified":1493175412810},{"_id":"public/categories/填坑/index.html","hash":"364cf5a04d80fae32262297655000e2d29cf9f51","modified":1493175412811},{"_id":"public/index.html","hash":"2e0dadaa758acdf0602cf657e49249a40fc014e6","modified":1493195615976},{"_id":"public/tags/nodejs/index.html","hash":"3f9a2e04ad92979c30eff8cfa4838803e2670375","modified":1493175412811},{"_id":"public/tags/express/index.html","hash":"bc5af267427bdda76a0201a2bc4f684eeb15232e","modified":1493175412811},{"_id":"public/tags/router/index.html","hash":"ce0a38e2329fb2adb1ee208e0d120f566a9f8575","modified":1493175412812},{"_id":"public/tags/hexo/index.html","hash":"9104034fb3fb6d795ee6bdb639dfe5f226e7635b","modified":1493175412812},{"_id":"public/tags/webpack/index.html","hash":"82430728b5866ee56cd443b21f359619b0dec8ab","modified":1493175412812},{"_id":"public/tags/jquery/index.html","hash":"c454e041f7bfd7456aff0ffc7b177d17dc8d6e6c","modified":1493175412812},{"_id":"public/tags/img/index.html","hash":"ae49a89e7ea662d2cb2e16671c3e889cb9b920dd","modified":1493175412812},{"_id":"public/tags/upload/index.html","hash":"dd2b13c31ffe87adbab1e152bccc55c43b20c2cc","modified":1493175412813},{"_id":"public/tags/file/index.html","hash":"8b55febef86831d40074d588ba92bffb652216b1","modified":1493175412813},{"_id":"public/2017/04/26/vuejs基础入门/index.html","hash":"fac9caea901c2fef350f9261d541cc1a2aeb2645","modified":1493195615975},{"_id":"public/2017/04/13/h5唤醒App/index.html","hash":"f4196dd32e1430991ee6e91fd9a0e64b62e513af","modified":1493195615975},{"_id":"public/2017/04/12/workers/index.html","hash":"1935f5d813a9df2247d96075586c022aa41b55d3","modified":1493195615975},{"_id":"public/categories/学习/index.html","hash":"c93fe56502b8f1653207120666738138a6cd8c00","modified":1493175412819},{"_id":"public/categories/学习/笔记/index.html","hash":"7380467c9c91abe2e5648a5567f58db5779d43a0","modified":1493175412819},{"_id":"public/tags/html5/index.html","hash":"c4bf7ef38db4ef5abb424d155b8123e0297af69f","modified":1493175412819},{"_id":"public/tags/workers/index.html","hash":"698c676a1cfebb490b445eadf4cde079e85e06c4","modified":1493175412819},{"_id":"public/tags/web-api/index.html","hash":"f8dfcde9cedf75bb9f192e4105f6e31c741ce7c4","modified":1493175412819},{"_id":"public/tags/vuejs/index.html","hash":"3f3c4e3054b625fb37e2ac610a2ddfef1c030fa7","modified":1493175412820},{"_id":"public/archives/2017/index.html","hash":"44df6b511d6c1ce5c54d2af6a2bfb49bce1a024f","modified":1493175412820},{"_id":"public/archives/2017/04/index.html","hash":"4dafb463e3fc0cef8a1104e6791fdc66bf81fde2","modified":1493175412820},{"_id":"public/archives/2017/03/index.html","hash":"a00841a8bbfed09767766fa06d9cb540fec35273","modified":1493175412820},{"_id":"public/images/favicon.ico","hash":"4dfbe4ef371ba3ee877b3d9e761424f2cdf36553","modified":1493175412820},{"_id":"public/images/logo.png","hash":"fb0ed04cf417424f98ecf09bac0c6af93637e5d0","modified":1493175412820},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1493175412826},{"_id":"public/fonts/iconfont.09701d.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1493175412826},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1493175412827},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1493175412827},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1493175412828},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1493175412828},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1493175412828},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1493175412828},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1493175412828},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1493175412828},{"_id":"public/mobile.09c351.js","hash":"e3956efa68988f9b11265f7c207bf62b238070b3","modified":1493175412828},{"_id":"public/mobile.1c60ce.js","hash":"8bb5d67029f50cf775dae715c339d547037804ea","modified":1493175412829},{"_id":"public/main.a1ed4e.css","hash":"dcc71f6c77b87ceb49a3023a23e15f8db60f66d8","modified":1493175412829},{"_id":"public/slider.01b703.js","hash":"b1bfd16e66dfac0d401ed4de86d55d421a27d4de","modified":1493175412903},{"_id":"public/main.a1ed4e.js","hash":"ad1fbcd9e7f632227d6553130d35e1ae262a11e5","modified":1493175412903},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1493175412903},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1493175412903},{"_id":"public/main.f86d3a.css","hash":"fdcc2accfdcea7281a39f97325c420671c3e7392","modified":1493175412903},{"_id":"public/main.2d7529.css","hash":"9f4191c9082130c3eeab7f6e1cbdada4f19fb0b7","modified":1493175412903},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1493175412903},{"_id":"public/slider.5539f3.js","hash":"a7f4aacd798f3279ea3b1cfead1db4506896a0c3","modified":1493175412904},{"_id":"public/main.f86d3a.js","hash":"451bc7653232792d88093213e6c7774b0ccb0192","modified":1493175412904}],"Category":[{"name":"分享","_id":"cj1ye343k0003b4sb4n5ym9ig"},{"name":"填坑","_id":"cj1ye34440008b4sby4k35okr"},{"name":"学习","_id":"cj1ye344m000lb4sbjv5j4pju"},{"name":"笔记","parent":"cj1ye344m000lb4sbjv5j4pju","_id":"cj1ye344u000tb4sbs1qjir2z"}],"Data":[],"Page":[{"title":"分类","date":"2017-03-22T10:12:53.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-22 18:12:53\n---\n","updated":"2017-03-22T10:15:46.770Z","path":"category/index.html","comments":1,"layout":"page","_id":"cj1ye342u0001b4sbkqfsr95n","content":"","excerpt":"","more":""}],"Post":[{"title":"Express路由","date":"2017-03-22T08:11:33.000Z","_content":"## 一、简介\n\n>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n\n>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）\n\n>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。\n\n&nbsp;\n\n<!-- more -->\n\n## 二、express环境搭建\n\n1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快\n\n``` javascript\n$ npm install –g cnpm\n```\n\n2、新建一个目录，在目录下执行\n\n``` javascript\n$ cnpm install express --save\n```\n\n3、express环境已经搭建好了\n\n&nbsp;\n\n## 三、基本路由\n\n1、简单版，除了get请求，还有post、put、delete\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n    res.send('Hello World! <a href=\"/news\">to news</a>');\n});\n\napp.get('/news', function (req, res) {\n    res.send('this is news. <a href=\"/\">back</a>');\n}).post('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a post request!',\n        data: req.query\n    });\n}).put('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a put request!',\n        data: req.query\n    });\n}).delete('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a delete request!',\n        data: req.query\n    });\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、字符匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>ab?cd（匹配 acd 和 abcd）</li>');\n_routeList.push('<li>ab+cd（匹配 abcd、abbcd、abbbcd等）</li>');\n_routeList.push('<li>ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）</li>');\n_routeList.push('<li>ab(cd)?e（匹配 /abe 和 /abcde）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res, next) {\n  // res.send('ab?cd');\n  _routeStr.push('ab?cd');\n  next();\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res, next) {\n  // res.send('ab+cd');\n  \n  _routeStr.push('ab+cd');\n  next();\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res, next) {\n  // res.send('ab*cd');\n  _routeStr.push('ab*cd');\n  next();\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res, next) {\n // res.send('ab(cd)?e');\n _routeStr.push('ab(cd)?e');\n next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、正则匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>/a/（匹配任何路径中含有 a 的路径');\n_routeList.push('<li>/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res, next) {\n  _routeStr.push('/a/');\n  next();\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res, next) {\n  _routeStr.push('/.*fly$/');\n  next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、执行多个回调\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 多个回调函数，需指定执行next\napp.get('/b', function (req, res, next) {\n    console.log('this is function b one');\n    next();\n}, function (req, res) {\n    console.log('this is function b two');\n\n    res.send('Hello from B!');\n});\n\n\n// 多个回调传入，需指定执行next，最后必须有send\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/c', [cb0, cb1, cb2]);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n&nbsp;\n\n## 四、中间件router\n\n1、通过require导入各种路由配置文件\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\nvar _router1 = require('./router/r1.js');\nvar _router2 = require('./router/r2.js');\nvar _router3 = require('./router/r3.js');\nvar _router4 = require('./router/r4.js');\n\n\napp.use('/', _router1);\napp.use('/r2', _router2);\napp.use('/r3', _router3);\napp.use('/r4', _router4);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、简单版\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n    res.send('About birds');\n});\n\nmodule.exports = router;\n```\n\n3、通过路由中间件控制\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息\nrouter.use('/user/:id', function(req, res, next) {\n    console.log('Request URL:', req.originalUrl);\n    next();\n}, function (req, res, next) {\n    console.log('Request Type:', req.method);\n    next();\n});\n\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\nrouter.get('/user/:id', function (req, res, next) {\n    console.log(req.params, req.params.id == 0);\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0){\n      res.send('ID：' + req.params.id);\n  }\n  // 负责将控制权交给栈中下一个中间件\n  else{\n      next();\n  }\n}, function (req, res, next) {\n    // 渲染常规页面\n    res.send('next function ID：' + req.params.id);\n\n    // 填到下一个路由\n    // next();\n});\n\nmodule.exports = router;\n```\n\n使用`router.param`\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\nvar _pid;\n\nrouter.get('/blog/:pid', function (req, res, next) {\n    console.log('get function');\n});\n\n\nrouter.param('pid', function (req, res, next, pid){\n    console.log('param function');\n    // console.log(req.query);\n\n    setTimeout(function(){\n        _pid = pid;\n\n        res.send('my pid is：' + pid + '&&' + req.query.id);\n    }, 1000);\n\n    next();\n});\n\nmodule.exports = router;\n```\n\n多个参数的情况下\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 无效，可能是版本问题\n// router.param(['id', 'page'], function (req, res, next, value) {\n//   console.log('CALLED ONLY ONCE with', value);\n//   next();\n// })\n\n\nrouter.param('nid', function (req, res, next, value) {\n  console.log('nid：', value);\n  next();\n});\n\nrouter.param('page', function (req, res, next, value) {\n  console.log('page：', value);\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res, next) {\n  console.log('although this matches');\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res) {\n  console.log('and this matches too');\n  res.send('ok');\n});\n\nmodule.exports = router;\n```\n\n&nbsp;\n\n## 五、静态资源目录\n\n也算是属于路由中的一部分，负责静态资源的路径设置\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\napp.use(express.static(__dirname + '/images'));\napp.use('/pic', express.static(__dirname + '/images'));\napp.use('/img', express.static(__dirname + '/images'));\n\n\napp.get('/img', function (req, res) {\n    var _html = '';\n\n    _html += '<p>/icon.png</p><img src=\"/icon.png\" />';\n    _html += '<p>/pic/icon.png</p><img src=\"/pic/icon.png\" />';\n    _html += '<p>/img/icon.png</p><img src=\"/img/icon.png\" />';\n\n    res.send(_html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n&nbsp;\n\n## 六、实例源码\n\n[github express_demo](https://github.com/ingdanfed/express_demo)","source":"_posts/2017-03-22-express路由.md","raw":"---\ntitle: Express路由\ndate: 2017-03-22 16:11:33\ntags: \n- nodejs\n- express\n- router\ncategories: \n- 分享\n---\n## 一、简介\n\n>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n\n>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）\n\n>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。\n\n&nbsp;\n\n<!-- more -->\n\n## 二、express环境搭建\n\n1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快\n\n``` javascript\n$ npm install –g cnpm\n```\n\n2、新建一个目录，在目录下执行\n\n``` javascript\n$ cnpm install express --save\n```\n\n3、express环境已经搭建好了\n\n&nbsp;\n\n## 三、基本路由\n\n1、简单版，除了get请求，还有post、put、delete\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n    res.send('Hello World! <a href=\"/news\">to news</a>');\n});\n\napp.get('/news', function (req, res) {\n    res.send('this is news. <a href=\"/\">back</a>');\n}).post('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a post request!',\n        data: req.query\n    });\n}).put('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a put request!',\n        data: req.query\n    });\n}).delete('/news', function (req, res) {\n    console.log('query：' + req.query);\n    console.log('body：' + req.body);\n    res.send({\n        code: 'abc123',\n        msg: 'get a delete request!',\n        data: req.query\n    });\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、字符匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>ab?cd（匹配 acd 和 abcd）</li>');\n_routeList.push('<li>ab+cd（匹配 abcd、abbcd、abbbcd等）</li>');\n_routeList.push('<li>ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）</li>');\n_routeList.push('<li>ab(cd)?e（匹配 /abe 和 /abcde）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配 acd 和 abcd\napp.get('/ab?cd', function(req, res, next) {\n  // res.send('ab?cd');\n  _routeStr.push('ab?cd');\n  next();\n});\n\n// 匹配 abcd、abbcd、abbbcd等\napp.get('/ab+cd', function(req, res, next) {\n  // res.send('ab+cd');\n  \n  _routeStr.push('ab+cd');\n  next();\n});\n\n// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等\napp.get('/ab*cd', function(req, res, next) {\n  // res.send('ab*cd');\n  _routeStr.push('ab*cd');\n  next();\n});\n\n// 匹配 /abe 和 /abcde\napp.get('/ab(cd)?e', function(req, res, next) {\n // res.send('ab(cd)?e');\n _routeStr.push('ab(cd)?e');\n next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、正则匹配模式\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 路径\nvar _routeStr = ['start'];\n\nvar _routeList = ['<ol>'];\n_routeList.push('<li>/a/（匹配任何路径中含有 a 的路径');\n_routeList.push('<li>/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）</li>');\n_routeList.push('</ol>');\n\n\napp.all('*', function (req, res, next) {\n    console.log('Accessing：' + new Date());\n    _routeStr = ['start'];\n    next();\n});\n\n\n// 匹配任何路径中含有 a 的路径：\napp.get(/a/, function(req, res, next) {\n  _routeStr.push('/a/');\n  next();\n});\n\n// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等\napp.get(/.*fly$/, function(req, res, next) {\n  _routeStr.push('/.*fly$/');\n  next();\n});\n\napp.get('*', function(req, res) {\n    _routeStr.push('end');\n\n    var _html = '<p>' + _routeStr.join('  ====>  ') + '</p>';\n\n    res.send(_routeList.join('') + _html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n3、执行多个回调\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n// 多个回调函数，需指定执行next\napp.get('/b', function (req, res, next) {\n    console.log('this is function b one');\n    next();\n}, function (req, res) {\n    console.log('this is function b two');\n\n    res.send('Hello from B!');\n});\n\n\n// 多个回调传入，需指定执行next，最后必须有send\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/c', [cb0, cb1, cb2]);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n&nbsp;\n\n## 四、中间件router\n\n1、通过require导入各种路由配置文件\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\nvar _router1 = require('./router/r1.js');\nvar _router2 = require('./router/r2.js');\nvar _router3 = require('./router/r3.js');\nvar _router4 = require('./router/r4.js');\n\n\napp.use('/', _router1);\napp.use('/r2', _router2);\napp.use('/r3', _router3);\napp.use('/r4', _router4);\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n2、简单版\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 定义网站主页的路由\nrouter.get('/', function(req, res) {\n  res.send('Birds home page');\n});\n\n// 定义 about 页面的路由\nrouter.get('/about', function(req, res) {\n    res.send('About birds');\n});\n\nmodule.exports = router;\n```\n\n3、通过路由中间件控制\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息\nrouter.use('/user/:id', function(req, res, next) {\n    console.log('Request URL:', req.originalUrl);\n    next();\n}, function (req, res, next) {\n    console.log('Request Type:', req.method);\n    next();\n});\n\n// 一个中间件栈，处理指向 /user/:id 的 GET 请求\nrouter.get('/user/:id', function (req, res, next) {\n    console.log(req.params, req.params.id == 0);\n  // 如果 user id 为 0, 跳到下一个路由\n  if (req.params.id == 0){\n      res.send('ID：' + req.params.id);\n  }\n  // 负责将控制权交给栈中下一个中间件\n  else{\n      next();\n  }\n}, function (req, res, next) {\n    // 渲染常规页面\n    res.send('next function ID：' + req.params.id);\n\n    // 填到下一个路由\n    // next();\n});\n\nmodule.exports = router;\n```\n\n使用`router.param`\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\nvar _pid;\n\nrouter.get('/blog/:pid', function (req, res, next) {\n    console.log('get function');\n});\n\n\nrouter.param('pid', function (req, res, next, pid){\n    console.log('param function');\n    // console.log(req.query);\n\n    setTimeout(function(){\n        _pid = pid;\n\n        res.send('my pid is：' + pid + '&&' + req.query.id);\n    }, 1000);\n\n    next();\n});\n\nmodule.exports = router;\n```\n\n多个参数的情况下\n\n``` javascript\nvar express = require('express');\nvar router = express.Router();\n\n// 该路由使用的中间件\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now());\n  next();\n});\n\n// 无效，可能是版本问题\n// router.param(['id', 'page'], function (req, res, next, value) {\n//   console.log('CALLED ONLY ONCE with', value);\n//   next();\n// })\n\n\nrouter.param('nid', function (req, res, next, value) {\n  console.log('nid：', value);\n  next();\n});\n\nrouter.param('page', function (req, res, next, value) {\n  console.log('page：', value);\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res, next) {\n  console.log('although this matches');\n  next();\n});\n\nrouter.get('/news/:nid/:page', function (req, res) {\n  console.log('and this matches too');\n  res.send('ok');\n});\n\nmodule.exports = router;\n```\n\n&nbsp;\n\n## 五、静态资源目录\n\n也算是属于路由中的一部分，负责静态资源的路径设置\n\n``` javascript\nvar express = require('express');\nvar app = express();\n\n\napp.use(express.static(__dirname + '/images'));\napp.use('/pic', express.static(__dirname + '/images'));\napp.use('/img', express.static(__dirname + '/images'));\n\n\napp.get('/img', function (req, res) {\n    var _html = '';\n\n    _html += '<p>/icon.png</p><img src=\"/icon.png\" />';\n    _html += '<p>/pic/icon.png</p><img src=\"/pic/icon.png\" />';\n    _html += '<p>/img/icon.png</p><img src=\"/img/icon.png\" />';\n\n    res.send(_html);\n});\n\n\nvar server = app.listen(12345, function () {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n&nbsp;\n\n## 六、实例源码\n\n[github express_demo](https://github.com/ingdanfed/express_demo)","slug":"express路由","published":1,"updated":"2017-03-24T01:43:08.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ye342k0000b4sb3prmnp3n","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<p>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）</p>\n<p>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p>\n</blockquote>\n<p>&nbsp;</p>\n<a id=\"more\"></a>\n<h2 id=\"二、express环境搭建\"><a href=\"#二、express环境搭建\" class=\"headerlink\" title=\"二、express环境搭建\"></a>二、express环境搭建</h2><p>1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install –g cnpm</div></pre></td></tr></table></figure>\n<p>2、新建一个目录，在目录下执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install express --save</div></pre></td></tr></table></figure>\n<p>3、express环境已经搭建好了</p>\n<p>&nbsp;</p>\n<h2 id=\"三、基本路由\"><a href=\"#三、基本路由\" class=\"headerlink\" title=\"三、基本路由\"></a>三、基本路由</h2><p>1、简单版，除了get请求，还有post、put、delete</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Hello World! &lt;a href=\"/news\"&gt;to news&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'this is news. &lt;a href=\"/\"&gt;back&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;).post(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a post request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).put(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a put request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).delete(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a delete request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、字符匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab?cd（匹配 acd 和 abcd）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab+cd（匹配 abcd、abbcd、abbbcd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab(cd)?e（匹配 /abe 和 /abcde）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 acd 和 abcd</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab?cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab?cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab?cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abbcd、abbbcd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab+cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab+cd');</span></div><div class=\"line\">  </div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab+cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab*cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab*cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /abe 和 /abcde</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab(cd)?e'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// res.send('ab(cd)?e');</span></div><div class=\"line\"> _routeStr.push(<span class=\"string\">'ab(cd)?e'</span>);</div><div class=\"line\"> next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、正则匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/a/（匹配任何路径中含有 a 的路径'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配任何路径中含有 a 的路径：</span></div><div class=\"line\">app.get(<span class=\"regexp\">/a/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/a/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class=\"line\">app.get(<span class=\"regexp\">/.*fly$/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/.*fly$/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、执行多个回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调函数，需指定执行next</span></div><div class=\"line\">app.get(<span class=\"string\">'/b'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b one'</span>);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b two'</span>);</div><div class=\"line\"></div><div class=\"line\">    res.send(<span class=\"string\">'Hello from B!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调传入，需指定执行next，最后必须有send</span></div><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from C!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/c'</span>, [cb0, cb1, cb2]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"四、中间件router\"><a href=\"#四、中间件router\" class=\"headerlink\" title=\"四、中间件router\"></a>四、中间件router</h2><p>1、通过require导入各种路由配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _router1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r1.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r2.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r3.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r4.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, _router1);</div><div class=\"line\">app.use(<span class=\"string\">'/r2'</span>, _router2);</div><div class=\"line\">app.use(<span class=\"string\">'/r3'</span>, _router3);</div><div class=\"line\">app.use(<span class=\"string\">'/r4'</span>, _router4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、简单版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义网站主页的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Birds home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义 about 页面的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'About birds'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>3、通过路由中间件控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></div><div class=\"line\">router.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.params, req.params.id == <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      res.send(<span class=\"string\">'ID：'</span> + req.params.id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 负责将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      next();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">    res.send(<span class=\"string\">'next function ID：'</span> + req.params.id);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 填到下一个路由</span></div><div class=\"line\">    <span class=\"comment\">// next();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>使用<code>router.param</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _pid;</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/blog/:pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get function'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, pid</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'param function'</span>);</div><div class=\"line\">    <span class=\"comment\">// console.log(req.query);</span></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        _pid = pid;</div><div class=\"line\"></div><div class=\"line\">        res.send(<span class=\"string\">'my pid is：'</span> + pid + <span class=\"string\">'&amp;&amp;'</span> + req.query.id);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>多个参数的情况下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无效，可能是版本问题</span></div><div class=\"line\"><span class=\"comment\">// router.param(['id', 'page'], function (req, res, next, value) &#123;</span></div><div class=\"line\"><span class=\"comment\">//   console.log('CALLED ONLY ONCE with', value);</span></div><div class=\"line\"><span class=\"comment\">//   next();</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'nid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nid：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'page：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this matches'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matches too'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'ok'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"五、静态资源目录\"><a href=\"#五、静态资源目录\" class=\"headerlink\" title=\"五、静态资源目录\"></a>五、静态资源目录</h2><p>也算是属于路由中的一部分，负责静态资源的路径设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/pic'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/img'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/img'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/icon.png&lt;/p&gt;&lt;img src=\"/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/pic/icon.png&lt;/p&gt;&lt;img src=\"/pic/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/img/icon.png&lt;/p&gt;&lt;img src=\"/img/icon.png\" /&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"六、实例源码\"><a href=\"#六、实例源码\" class=\"headerlink\" title=\"六、实例源码\"></a>六、实例源码</h2><p><a href=\"https://github.com/ingdanfed/express_demo\" target=\"_blank\" rel=\"external\">github express_demo</a></p>\n","excerpt":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<p>2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架）</p>\n<p>3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。</p>\n</blockquote>\n<p>&nbsp;</p>","more":"<h2 id=\"二、express环境搭建\"><a href=\"#二、express环境搭建\" class=\"headerlink\" title=\"二、express环境搭建\"></a>二、express环境搭建</h2><p>1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install –g cnpm</div></pre></td></tr></table></figure>\n<p>2、新建一个目录，在目录下执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install express --save</div></pre></td></tr></table></figure>\n<p>3、express环境已经搭建好了</p>\n<p>&nbsp;</p>\n<h2 id=\"三、基本路由\"><a href=\"#三、基本路由\" class=\"headerlink\" title=\"三、基本路由\"></a>三、基本路由</h2><p>1、简单版，除了get请求，还有post、put、delete</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'Hello World! &lt;a href=\"/news\"&gt;to news&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'this is news. &lt;a href=\"/\"&gt;back&lt;/a&gt;'</span>);</div><div class=\"line\">&#125;).post(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a post request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).put(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a put request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).delete(<span class=\"string\">'/news'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'query：'</span> + req.query);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body：'</span> + req.body);</div><div class=\"line\">    res.send(&#123;</div><div class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">'abc123'</span>,</div><div class=\"line\">        <span class=\"attr\">msg</span>: <span class=\"string\">'get a delete request!'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: req.query</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、字符匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab?cd（匹配 acd 和 abcd）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab+cd（匹配 abcd、abbcd、abbbcd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;ab(cd)?e（匹配 /abe 和 /abcde）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 acd 和 abcd</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab?cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab?cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab?cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abbcd、abbbcd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab+cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab+cd');</span></div><div class=\"line\">  </div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab+cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// res.send('ab*cd');</span></div><div class=\"line\">  _routeStr.push(<span class=\"string\">'ab*cd'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 /abe 和 /abcde</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab(cd)?e'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\"> <span class=\"comment\">// res.send('ab(cd)?e');</span></div><div class=\"line\"> _routeStr.push(<span class=\"string\">'ab(cd)?e'</span>);</div><div class=\"line\"> next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、正则匹配模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _routeList = [<span class=\"string\">'&lt;ol&gt;'</span>];</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/a/（匹配任何路径中含有 a 的路径'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;li&gt;/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）&lt;/li&gt;'</span>);</div><div class=\"line\">_routeList.push(<span class=\"string\">'&lt;/ol&gt;'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.all(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accessing：'</span> + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</div><div class=\"line\">    _routeStr = [<span class=\"string\">'start'</span>];</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配任何路径中含有 a 的路径：</span></div><div class=\"line\">app.get(<span class=\"regexp\">/a/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/a/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></div><div class=\"line\">app.get(<span class=\"regexp\">/.*fly$/</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  _routeStr.push(<span class=\"string\">'/.*fly$/'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    _routeStr.push(<span class=\"string\">'end'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">'&lt;p&gt;'</span> + _routeStr.join(<span class=\"string\">'  ====&gt;  '</span>) + <span class=\"string\">'&lt;/p&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_routeList.join(<span class=\"string\">''</span>) + _html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>3、执行多个回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调函数，需指定执行next</span></div><div class=\"line\">app.get(<span class=\"string\">'/b'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b one'</span>);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'this is function b two'</span>);</div><div class=\"line\"></div><div class=\"line\">    res.send(<span class=\"string\">'Hello from B!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 多个回调传入，需指定执行next，最后必须有send</span></div><div class=\"line\"><span class=\"keyword\">var</span> cb0 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB0'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'CB1'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cb2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Hello from C!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/c'</span>, [cb0, cb1, cb2]);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"四、中间件router\"><a href=\"#四、中间件router\" class=\"headerlink\" title=\"四、中间件router\"></a>四、中间件router</h2><p>1、通过require导入各种路由配置文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _router1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r1.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r2.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router3 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r3.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _router4 = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/r4.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, _router1);</div><div class=\"line\">app.use(<span class=\"string\">'/r2'</span>, _router2);</div><div class=\"line\">app.use(<span class=\"string\">'/r3'</span>, _router3);</div><div class=\"line\">app.use(<span class=\"string\">'/r4'</span>, _router4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>2、简单版</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义网站主页的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'Birds home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义 about 页面的路由</span></div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.send(<span class=\"string\">'About birds'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>3、通过路由中间件控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息</span></div><div class=\"line\">router.use(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request URL:'</span>, req.originalUrl);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request Type:'</span>, req.method);</div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 一个中间件栈，处理指向 /user/:id 的 GET 请求</span></div><div class=\"line\">router.get(<span class=\"string\">'/user/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(req.params, req.params.id == <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 如果 user id 为 0, 跳到下一个路由</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (req.params.id == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">      res.send(<span class=\"string\">'ID：'</span> + req.params.id);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 负责将控制权交给栈中下一个中间件</span></div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      next();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 渲染常规页面</span></div><div class=\"line\">    res.send(<span class=\"string\">'next function ID：'</span> + req.params.id);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 填到下一个路由</span></div><div class=\"line\">    <span class=\"comment\">// next();</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>使用<code>router.param</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _pid;</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/blog/:pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'get function'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'pid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, pid</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'param function'</span>);</div><div class=\"line\">    <span class=\"comment\">// console.log(req.query);</span></div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        _pid = pid;</div><div class=\"line\"></div><div class=\"line\">        res.send(<span class=\"string\">'my pid is：'</span> + pid + <span class=\"string\">'&amp;&amp;'</span> + req.query.id);</div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\"></div><div class=\"line\">    next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>多个参数的情况下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 该路由使用的中间件</span></div><div class=\"line\">router.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Time:'</span>, <span class=\"built_in\">Date</span>.now());</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无效，可能是版本问题</span></div><div class=\"line\"><span class=\"comment\">// router.param(['id', 'page'], function (req, res, next, value) &#123;</span></div><div class=\"line\"><span class=\"comment\">//   console.log('CALLED ONLY ONCE with', value);</span></div><div class=\"line\"><span class=\"comment\">//   next();</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'nid'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'nid：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.param(<span class=\"string\">'page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next, value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'page：'</span>, value);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'although this matches'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">router.get(<span class=\"string\">'/news/:nid/:page'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'and this matches too'</span>);</div><div class=\"line\">  res.send(<span class=\"string\">'ok'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"五、静态资源目录\"><a href=\"#五、静态资源目录\" class=\"headerlink\" title=\"五、静态资源目录\"></a>五、静态资源目录</h2><p>也算是属于路由中的一部分，负责静态资源的路径设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/pic'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\">app.use(<span class=\"string\">'/img'</span>, express.static(__dirname + <span class=\"string\">'/images'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/img'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _html = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/icon.png&lt;/p&gt;&lt;img src=\"/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/pic/icon.png&lt;/p&gt;&lt;img src=\"/pic/icon.png\" /&gt;'</span>;</div><div class=\"line\">    _html += <span class=\"string\">'&lt;p&gt;/img/icon.png&lt;/p&gt;&lt;img src=\"/img/icon.png\" /&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">    res.send(_html);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">12345</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> host = server.address().address;</div><div class=\"line\">    <span class=\"keyword\">var</span> port = server.address().port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening at http://%s:%s'</span>, host, port);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<h2 id=\"六、实例源码\"><a href=\"#六、实例源码\" class=\"headerlink\" title=\"六、实例源码\"></a>六、实例源码</h2><p><a href=\"https://github.com/ingdanfed/express_demo\">github express_demo</a></p>"},{"title":"使用hexo遇到的一个坑","date":"2017-03-23T03:46:16.000Z","_content":"\nhexo中首页列表的摘要（excerpt）弄不出来，一直显示全文\n\n修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！\n\n<!-- more -->\n\n原来只需要在文中加入`<!-- more -->`就可以了，这实在是个大坑！\n\n```javascript\n这就是一个简介\n\n<!-- more -->\n \n这里更多的内容\n```\n\n\n[原答案链接](http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客)","source":"_posts/2017-03-23-使用hexo遇到的一个坑.md","raw":"---\ntitle: 使用hexo遇到的一个坑\ndate: 2017-03-23 11:46:16\ntags: hexo\ncategories: 填坑\n---\n\nhexo中首页列表的摘要（excerpt）弄不出来，一直显示全文\n\n修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！\n\n<!-- more -->\n\n原来只需要在文中加入`<!-- more -->`就可以了，这实在是个大坑！\n\n```javascript\n这就是一个简介\n\n<!-- more -->\n \n这里更多的内容\n```\n\n\n[原答案链接](http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客)","slug":"使用hexo遇到的一个坑","published":1,"updated":"2017-03-23T04:15:03.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ye342z0002b4sb3c1wr8qc","content":"<p>hexo中首页列表的摘要（excerpt）弄不出来，一直显示全文</p>\n<p>修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！</p>\n<a id=\"more\"></a>\n<p>原来只需要在文中加入<code>&lt;!-- more --&gt;</code>就可以了，这实在是个大坑！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">这就是一个简介</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"> </div><div class=\"line\">这里更多的内容</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客\" target=\"_blank\" rel=\"external\">原答案链接</a></p>\n","excerpt":"<p>hexo中首页列表的摘要（excerpt）弄不出来，一直显示全文</p>\n<p>修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！</p>","more":"<p>原来只需要在文中加入<code>&lt;!-- more --&gt;</code>就可以了，这实在是个大坑！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">这就是一个简介</div><div class=\"line\"></div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\"> </div><div class=\"line\">这里更多的内容</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/pcy0/p/how-to-show-less-in-home-page-of-hexo.html, Clarence Pan的博客\">原答案链接</a></p>"},{"title":"web workers","date":"2017-04-12T11:26:19.000Z","_content":"\njavascript执行时，只有一条线程，也就是从上至下的去执行。\n如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。\n那么要实现javascript的多线程，可以使用定时器来实现。\n除了定时器，如今还可以使用woker来实现多线程处理。\n未完待续...\n\n<!-- more -->","source":"_posts/2017-04-12-workers.md","raw":"---\ntitle: web workers\ndate: 2017-04-12 19:26:19\ntags: \n- html5\n- workers\n- web api\ncategories: \n- 分享\n---\n\njavascript执行时，只有一条线程，也就是从上至下的去执行。\n如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。\n那么要实现javascript的多线程，可以使用定时器来实现。\n除了定时器，如今还可以使用woker来实现多线程处理。\n未完待续...\n\n<!-- more -->","slug":"workers","published":1,"updated":"2017-04-26T08:32:43.829Z","_id":"cj1ye343p0005b4sbdu0a4pnt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>javascript执行时，只有一条线程，也就是从上至下的去执行。<br>如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。<br>那么要实现javascript的多线程，可以使用定时器来实现。<br>除了定时器，如今还可以使用woker来实现多线程处理。<br>未完待续…</p>\n<a id=\"more\"></a>","excerpt":"<p>javascript执行时，只有一条线程，也就是从上至下的去执行。<br>如果某些脚本比较复杂、耗时，那么将会阻塞javascript继续执行，甚至导致浏览器失去响应。<br>那么要实现javascript的多线程，可以使用定时器来实现。<br>除了定时器，如今还可以使用woker来实现多线程处理。<br>未完待续…</p>","more":""},{"title":"使用webpack构建时给window绑定事件的坑","date":"2017-03-28T07:45:25.000Z","_content":"\n使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在...\n\n<!-- more -->\n\n业务js文件`index.js`\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，无效\n    $(window).on('load', function(){\n        console.log('页面加载完成了~');\n    });\n})\n```\n\n打开页面，然后控制台并没有打印出“页面加载完成了~”\n\n难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，还是无效\n    window.onload = function(){\n        console.log('页面加载完成了~');\n    };\n})\n```\n\n控制台依然没有打印出预期的结果，苦思良久，改成\n\n```javascript\nvar $ = require('jquery');\n\n// 在这里绑定，有效\n$(window).on('load', function(){\n    console.log('页面加载完成了~ 1');\n});\n\n// 在这里绑定，也有效\nwindow.onload = function(){\n    console.log('页面加载完成了~ 2');\n};\n\n$(function(){\n    \n})\n```\n\n那看来是'$(function(){})'这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用'script'标签引入jquery，并没有这样的问题出现。\n\n那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。\n\n现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写'$(function(){})'是没有必要了的","source":"_posts/2017-03-28-使用webpack构建时给window绑定事件的坑.md","raw":"---\ntitle: 使用webpack构建时给window绑定事件的坑\ndate: 2017-03-28 15:45:25\ntags: \n- webpack\n- jquery\ncategories: 填坑\n---\n\n使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在...\n\n<!-- more -->\n\n业务js文件`index.js`\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，无效\n    $(window).on('load', function(){\n        console.log('页面加载完成了~');\n    });\n})\n```\n\n打开页面，然后控制台并没有打印出“页面加载完成了~”\n\n难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：\n\n```javascript\nvar $ = require('jquery');\n\n$(function(){\n    // 在这里绑定，还是无效\n    window.onload = function(){\n        console.log('页面加载完成了~');\n    };\n})\n```\n\n控制台依然没有打印出预期的结果，苦思良久，改成\n\n```javascript\nvar $ = require('jquery');\n\n// 在这里绑定，有效\n$(window).on('load', function(){\n    console.log('页面加载完成了~ 1');\n});\n\n// 在这里绑定，也有效\nwindow.onload = function(){\n    console.log('页面加载完成了~ 2');\n};\n\n$(function(){\n    \n})\n```\n\n那看来是'$(function(){})'这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用'script'标签引入jquery，并没有这样的问题出现。\n\n那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。\n\n现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写'$(function(){})'是没有必要了的","slug":"使用webpack构建时给window绑定事件的坑","published":1,"updated":"2017-04-10T02:00:03.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ye343w0006b4sbi163y6a5","content":"<p>使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在…</p>\n<a id=\"more\"></a>\n<p>业务js文件<code>index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，无效</span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>打开页面，然后控制台并没有打印出“页面加载完成了~”</p>\n<p>难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，还是无效</span></div><div class=\"line\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>控制台依然没有打印出预期的结果，苦思良久，改成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，有效</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 1'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，也有效</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>那看来是’$(function(){})’这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用’script’标签引入jquery，并没有这样的问题出现。</p>\n<p>那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。</p>\n<p>现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写’$(function(){})’是没有必要了的</p>\n","excerpt":"<p>使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在…</p>","more":"<p>业务js文件<code>index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，无效</span></div><div class=\"line\">    $(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>打开页面，然后控制台并没有打印出“页面加载完成了~”</p>\n<p>难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在这里绑定，还是无效</span></div><div class=\"line\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>控制台依然没有打印出预期的结果，苦思良久，改成</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，有效</span></div><div class=\"line\">$(<span class=\"built_in\">window</span>).on(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 1'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在这里绑定，也有效</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'页面加载完成了~ 2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>那看来是’$(function(){})’这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用’script’标签引入jquery，并没有这样的问题出现。</p>\n<p>那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。</p>\n<p>现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写’$(function(){})’是没有必要了的</p>"},{"title":"h5唤醒App","date":"2017-04-13T05:37:37.000Z","_content":"\n首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。\n那么基于这个，怎么样实现在h5页面唤醒指定的app呢？\n请看下回分解~\n\n<!-- more -->\n\n一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。\n那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。\n\n## 1、获取设备信息\n\n```javascript\nfunction getPlatform(){\n  var u = navigator.userAgent,\n    app = navigator.appVersion,\n    iosVer = app.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n  return {\n    // android终端或者uc浏览器\n    android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1,\n    // 是否为iPhone或者QQHD浏览器\n    iPhone: u.indexOf('iPhone') > -1,\n    // 是否iPad\n    iPad: u.indexOf('iPad') > -1,\n    // ios 版本号\n    iosVer: iosVer && parseInt(iosVer[1], 10),\n    // 微信\n    weChat: u.indexOf('MicroMessenger') > -1,\n    // QQ\n    QQ: u.indexOf('QQ') > -1,\n    // 微博\n    WeiBo: u.indexOf('weibo') > -1\n  };\n}\n```\n\n## 2、设置app下载地址\n\n安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址\n```javascript\n// 下载链接\nvar _androidUrl = 'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews';\nvar _iosUrl = 'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&ls=1&mt=8';\n```\n\n## 3、跳转app下载页面\n\n那么页面打开后，就应该判断设备，然后进行页面跳转了\n```javascript\nvar _platform = getPlatform();\nvar _downloadUrl = _androidUrl;\n\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  _downloadUrl = _iosUrl;\n}\n\nwindow.location.href = _downloadUrl;\n\n```\n\n是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？\n```javascript\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  if(_platform.weChat || _platform.WeiBo){\n    alert('请再浏览器中打开本页面~速去');\n  }\n}\n```\n\n看起来十分完美，然而还是没有，app也还没打开呢\n\n## 4、打开APP\n\n如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：\n\n```javascript\nvar _appUrl = 'INNewsApp://';\n```\n\n其中`INNewsApp://`是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：`INNewsApp://m.ingdan.com`\n如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：`INNewsApp://m.ingdan.com?id=9527`\n\n打来app地址有了，接下来如何处理？\n我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。\n\n```javascript\n// 在iframe 中打开APP\nvar ifr = document.createElement('iframe');\n\nifr.style.display = 'none';\nifr.src = _appUrl;\n\ndocument.body.appendChild(ifr);\n```\n到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app\n于是乎\n```javascript\n// 判断ios版本，ios9以上直接打开\nif(_platform.iosVer >= 9){\n  window.location.href = _appUrl;\n}else{\n  // 在iframe 中打开APP\n  // ...\n}\n```\n如果手机上安装有app，这是h5就可以唤醒app，app就启动了。\n\n## 5、一些兼容处理\n\n产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？\n先把产品打一顿再说\n\n```javascript\nsetTimeout(function() {\n  // 2秒之后，移除iframe\n  document.body.removeChild(ifr);\n\n  // 跳转到app下载地址\n  window.location.href = _downloadUrl;\n}, 2000);\n```\n这样似乎已经完美了，然后还没有。\n一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的\n然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开\n这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次...\n\n于是乎\n```javascript\n// 非QQ内置浏览器\nif(!_platform.QQ){\n  window.location.href = _downloadUrl;\n}\n```\n那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？\n页面上那么大一颗下载按钮，自己点吧。\n\n","source":"_posts/2017-04-13-h5唤醒App.md","raw":"---\ntitle: h5唤醒App\ndate: 2017-04-13 13:37:37\ntags:\ncategories:\n---\n\n首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。\n那么基于这个，怎么样实现在h5页面唤醒指定的app呢？\n请看下回分解~\n\n<!-- more -->\n\n一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。\n那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。\n\n## 1、获取设备信息\n\n```javascript\nfunction getPlatform(){\n  var u = navigator.userAgent,\n    app = navigator.appVersion,\n    iosVer = app.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n  return {\n    // android终端或者uc浏览器\n    android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1,\n    // 是否为iPhone或者QQHD浏览器\n    iPhone: u.indexOf('iPhone') > -1,\n    // 是否iPad\n    iPad: u.indexOf('iPad') > -1,\n    // ios 版本号\n    iosVer: iosVer && parseInt(iosVer[1], 10),\n    // 微信\n    weChat: u.indexOf('MicroMessenger') > -1,\n    // QQ\n    QQ: u.indexOf('QQ') > -1,\n    // 微博\n    WeiBo: u.indexOf('weibo') > -1\n  };\n}\n```\n\n## 2、设置app下载地址\n\n安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址\n```javascript\n// 下载链接\nvar _androidUrl = 'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews';\nvar _iosUrl = 'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&ls=1&mt=8';\n```\n\n## 3、跳转app下载页面\n\n那么页面打开后，就应该判断设备，然后进行页面跳转了\n```javascript\nvar _platform = getPlatform();\nvar _downloadUrl = _androidUrl;\n\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  _downloadUrl = _iosUrl;\n}\n\nwindow.location.href = _downloadUrl;\n\n```\n\n是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？\n```javascript\nif(_platform.android){\n  // 安卓\n}else{\n  // ios\n  if(_platform.weChat || _platform.WeiBo){\n    alert('请再浏览器中打开本页面~速去');\n  }\n}\n```\n\n看起来十分完美，然而还是没有，app也还没打开呢\n\n## 4、打开APP\n\n如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：\n\n```javascript\nvar _appUrl = 'INNewsApp://';\n```\n\n其中`INNewsApp://`是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：`INNewsApp://m.ingdan.com`\n如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：`INNewsApp://m.ingdan.com?id=9527`\n\n打来app地址有了，接下来如何处理？\n我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。\n\n```javascript\n// 在iframe 中打开APP\nvar ifr = document.createElement('iframe');\n\nifr.style.display = 'none';\nifr.src = _appUrl;\n\ndocument.body.appendChild(ifr);\n```\n到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app\n于是乎\n```javascript\n// 判断ios版本，ios9以上直接打开\nif(_platform.iosVer >= 9){\n  window.location.href = _appUrl;\n}else{\n  // 在iframe 中打开APP\n  // ...\n}\n```\n如果手机上安装有app，这是h5就可以唤醒app，app就启动了。\n\n## 5、一些兼容处理\n\n产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？\n先把产品打一顿再说\n\n```javascript\nsetTimeout(function() {\n  // 2秒之后，移除iframe\n  document.body.removeChild(ifr);\n\n  // 跳转到app下载地址\n  window.location.href = _downloadUrl;\n}, 2000);\n```\n这样似乎已经完美了，然后还没有。\n一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的\n然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开\n这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次...\n\n于是乎\n```javascript\n// 非QQ内置浏览器\nif(!_platform.QQ){\n  window.location.href = _downloadUrl;\n}\n```\n那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？\n页面上那么大一颗下载按钮，自己点吧。\n\n","slug":"h5唤醒App","published":1,"updated":"2017-04-26T04:45:47.684Z","_id":"cj1ye34410007b4sbrs39u5fz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。<br>那么基于这个，怎么样实现在h5页面唤醒指定的app呢？<br>请看下回分解~</p>\n<a id=\"more\"></a>\n<p>一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。<br>那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。</p>\n<h2 id=\"1、获取设备信息\"><a href=\"#1、获取设备信息\" class=\"headerlink\" title=\"1、获取设备信息\"></a>1、获取设备信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPlatform</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> u = navigator.userAgent,</div><div class=\"line\">    app = navigator.appVersion,</div><div class=\"line\">    iosVer = app.match(<span class=\"regexp\">/OS (\\d+)_(\\d+)_?(\\d+)?/</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// android终端或者uc浏览器</span></div><div class=\"line\">    android: u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否为iPhone或者QQHD浏览器</span></div><div class=\"line\">    iPhone: u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否iPad</span></div><div class=\"line\">    iPad: u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// ios 版本号</span></div><div class=\"line\">    iosVer: iosVer &amp;&amp; <span class=\"built_in\">parseInt</span>(iosVer[<span class=\"number\">1</span>], <span class=\"number\">10</span>),</div><div class=\"line\">    <span class=\"comment\">// 微信</span></div><div class=\"line\">    weChat: u.indexOf(<span class=\"string\">'MicroMessenger'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// QQ</span></div><div class=\"line\">    QQ: u.indexOf(<span class=\"string\">'QQ'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 微博</span></div><div class=\"line\">    WeiBo: u.indexOf(<span class=\"string\">'weibo'</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2、设置app下载地址\"><a href=\"#2、设置app下载地址\" class=\"headerlink\" title=\"2、设置app下载地址\"></a>2、设置app下载地址</h2><p>安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下载链接</span></div><div class=\"line\"><span class=\"keyword\">var</span> _androidUrl = <span class=\"string\">'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> _iosUrl = <span class=\"string\">'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&amp;ls=1&amp;mt=8'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3、跳转app下载页面\"><a href=\"#3、跳转app下载页面\" class=\"headerlink\" title=\"3、跳转app下载页面\"></a>3、跳转app下载页面</h2><p>那么页面打开后，就应该判断设备，然后进行页面跳转了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _platform = getPlatform();</div><div class=\"line\"><span class=\"keyword\">var</span> _downloadUrl = _androidUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  _downloadUrl = _iosUrl;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.location.href = _downloadUrl;</div></pre></td></tr></table></figure></p>\n<p>是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(_platform.weChat || _platform.WeiBo)&#123;</div><div class=\"line\">    alert(<span class=\"string\">'请再浏览器中打开本页面~速去'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看起来十分完美，然而还是没有，app也还没打开呢</p>\n<h2 id=\"4、打开APP\"><a href=\"#4、打开APP\" class=\"headerlink\" title=\"4、打开APP\"></a>4、打开APP</h2><p>如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _appUrl = <span class=\"string\">'INNewsApp://'</span>;</div></pre></td></tr></table></figure>\n<p>其中<code>INNewsApp://</code>是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：<code>INNewsApp://m.ingdan.com</code><br>如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：<code>INNewsApp://m.ingdan.com?id=9527</code></p>\n<p>打来app地址有了，接下来如何处理？<br>我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\"><span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</div><div class=\"line\"></div><div class=\"line\">ifr.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">ifr.src = _appUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ifr);</div></pre></td></tr></table></figure>\n<p>到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app<br>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断ios版本，ios9以上直接打开</span></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.iosVer &gt;= <span class=\"number\">9</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _appUrl;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果手机上安装有app，这是h5就可以唤醒app，app就启动了。</p>\n<h2 id=\"5、一些兼容处理\"><a href=\"#5、一些兼容处理\" class=\"headerlink\" title=\"5、一些兼容处理\"></a>5、一些兼容处理</h2><p>产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？<br>先把产品打一顿再说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 2秒之后，移除iframe</span></div><div class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(ifr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 跳转到app下载地址</span></div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure>\n<p>这样似乎已经完美了，然后还没有。<br>一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的<br>然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开<br>这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次…</p>\n<p>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非QQ内置浏览器</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!_platform.QQ)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？<br>页面上那么大一颗下载按钮，自己点吧。</p>\n","excerpt":"<p>首先要声明的一点是，h5页面无法获取app的状态，也就是说，无法判断app是否已下载，app是否已打开。<br>那么基于这个，怎么样实现在h5页面唤醒指定的app呢？<br>请看下回分解~</p>","more":"<p>一般来讲，app产品都会有一个下载落地页，引导用户前往应用市场下载app应用，安卓的前往安卓市场，ios的跑到appstore。<br>那么先不考虑页面的样式，首先进入到页面，第一步是获取设备信息，也就是浏览器信息。</p>\n<h2 id=\"1、获取设备信息\"><a href=\"#1、获取设备信息\" class=\"headerlink\" title=\"1、获取设备信息\"></a>1、获取设备信息</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPlatform</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> u = navigator.userAgent,</div><div class=\"line\">    app = navigator.appVersion,</div><div class=\"line\">    iosVer = app.match(<span class=\"regexp\">/OS (\\d+)_(\\d+)_?(\\d+)?/</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// android终端或者uc浏览器</span></div><div class=\"line\">    android: u.indexOf(<span class=\"string\">'Android'</span>) &gt; <span class=\"number\">-1</span> || u.indexOf(<span class=\"string\">'Linux'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否为iPhone或者QQHD浏览器</span></div><div class=\"line\">    iPhone: u.indexOf(<span class=\"string\">'iPhone'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 是否iPad</span></div><div class=\"line\">    iPad: u.indexOf(<span class=\"string\">'iPad'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// ios 版本号</span></div><div class=\"line\">    iosVer: iosVer &amp;&amp; <span class=\"built_in\">parseInt</span>(iosVer[<span class=\"number\">1</span>], <span class=\"number\">10</span>),</div><div class=\"line\">    <span class=\"comment\">// 微信</span></div><div class=\"line\">    weChat: u.indexOf(<span class=\"string\">'MicroMessenger'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// QQ</span></div><div class=\"line\">    QQ: u.indexOf(<span class=\"string\">'QQ'</span>) &gt; <span class=\"number\">-1</span>,</div><div class=\"line\">    <span class=\"comment\">// 微博</span></div><div class=\"line\">    WeiBo: u.indexOf(<span class=\"string\">'weibo'</span>) &gt; <span class=\"number\">-1</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2、设置app下载地址\"><a href=\"#2、设置app下载地址\" class=\"headerlink\" title=\"2、设置app下载地址\"></a>2、设置app下载地址</h2><p>安卓应用市场及appstore下载地址各不相同，所以要跟app的童鞋拿到应用下载地址<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 下载链接</span></div><div class=\"line\"><span class=\"keyword\">var</span> _androidUrl = <span class=\"string\">'http://a.app.qq.com/o/simple.jsp?pkgname=com.ingdan.ingdannews'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> _iosUrl = <span class=\"string\">'https://itunes.apple.com/us/app/in-tou-tiao-zhuan-zhu-zhi/id1197794545?l=zh&amp;ls=1&amp;mt=8'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3、跳转app下载页面\"><a href=\"#3、跳转app下载页面\" class=\"headerlink\" title=\"3、跳转app下载页面\"></a>3、跳转app下载页面</h2><p>那么页面打开后，就应该判断设备，然后进行页面跳转了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _platform = getPlatform();</div><div class=\"line\"><span class=\"keyword\">var</span> _downloadUrl = _androidUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  _downloadUrl = _iosUrl;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.location.href = _downloadUrl;</div></pre></td></tr></table></figure></p>\n<p>是不是很完美了，当然不是，app还没打开呢，而且在各个不同环境有不同限制，例如在微信或微博中打开，是不允许直接跳转到appstore，那怎么解决？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(_platform.android)&#123;</div><div class=\"line\">  <span class=\"comment\">// 安卓</span></div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ios</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(_platform.weChat || _platform.WeiBo)&#123;</div><div class=\"line\">    alert(<span class=\"string\">'请再浏览器中打开本页面~速去'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看起来十分完美，然而还是没有，app也还没打开呢</p>\n<h2 id=\"4、打开APP\"><a href=\"#4、打开APP\" class=\"headerlink\" title=\"4、打开APP\"></a>4、打开APP</h2><p>如何打开app呢，这里需要注意的一点事，打开app必须要开发的童靴提供一个自定义协议，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> _appUrl = <span class=\"string\">'INNewsApp://'</span>;</div></pre></td></tr></table></figure>\n<p>其中<code>INNewsApp://</code>是app开发自行决定的协议，当然最好后边能跟上app相对应的域名，如：<code>INNewsApp://m.ingdan.com</code><br>如果需要打开app后跳转到指定页面，那么就应该在链接中加入参数，如：<code>INNewsApp://m.ingdan.com?id=9527</code></p>\n<p>打来app地址有了，接下来如何处理？<br>我们这里使用iframe来打开，避免了一旦url有误，或者手机上没有安装app导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\"><span class=\"keyword\">var</span> ifr = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</div><div class=\"line\"></div><div class=\"line\">ifr.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">ifr.src = _appUrl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ifr);</div></pre></td></tr></table></figure>\n<p>到了这时，在测试ios的时候发现一个问题，ios9以上，不支持iframe打开app<br>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断ios版本，ios9以上直接打开</span></div><div class=\"line\"><span class=\"keyword\">if</span>(_platform.iosVer &gt;= <span class=\"number\">9</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _appUrl;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在iframe 中打开APP</span></div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果手机上安装有app，这是h5就可以唤醒app，app就启动了。</p>\n<h2 id=\"5、一些兼容处理\"><a href=\"#5、一些兼容处理\" class=\"headerlink\" title=\"5、一些兼容处理\"></a>5、一些兼容处理</h2><p>产品这时希望，那么如果手机上没有安装app，怎跳转到app下载页面，怎么办？<br>先把产品打一顿再说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 2秒之后，移除iframe</span></div><div class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(ifr);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 跳转到app下载地址</span></div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure>\n<p>这样似乎已经完美了，然后还没有。<br>一般情况下，浏览器处于非激活状态、使用alert弹出信息或者系统信息提示，页面是会中断js运行的<br>然后在QQ安卓版的内置浏览器上，并没有，更为让人开心的是，如果你的app是跳转到应用宝上，应用宝会自动判断你是否一下子该app，并且还很友好的帮你打开<br>这个时候你就会发现，在QQ内置浏览器打开下载引导页面，app打开了，正看得高兴，过了2秒，app又打开一次…</p>\n<p>于是乎<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非QQ内置浏览器</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!_platform.QQ)&#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.location.href = _downloadUrl;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那在QQ安卓版的内置浏览器上，如果有app，则自动打开，如果没有，怎么引导用户下载？<br>页面上那么大一颗下载按钮，自己点吧。</p>"},{"title":"vuejs基础入门","date":"2017-04-26T02:34:00.000Z","_content":"\n为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。\nvuejs 是一套构建用户界面的 渐进式框架。\nvuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\nvuejs 现在不支持IE8及以下，以后也不会支持。\n\n<!-- more -->\n## 一、基本语法\n\n### 1、插值\n\n#### 1.1 文本\n双大括号包裹住变量名\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n#### 1.2 纯HTML\n使用`v-html`指令输出html\n```html\n<div v-html=\"message\"></div>\n```\n\n#### 1.3 属性\n使用`v-bind`指令绑定dom元素属性\n```html\n<div v-bind:id=\"message\" v-bind:data-abc=\"message\"></div>\n```\n\n#### 1.4 JavaScript 表达式\n使用双大括号包裹住表达式\n```html\n<p>{{ number + 1 }}</p>\n<p>{{ ok ? 'YES' : 'NO' }}</p>\n<p>{{ message.split('').reverse().join('') }}</p>\n<p v-bind:id=\"'list-' + id\"></p>\n```\n\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n类似于一个`function`，执行一系列语句后，必须 return 一个结果。\n\n```html\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n不应该在模板表达式中试图访问用户定义的全局变量\n\n### 2、指令\n\n指令（Directives）是带有 v- 前缀的特殊属性\n\n#### 2.1 参数\n如下：`url`和`doSomething`就是传入vue实例的参数，`url`是一个变量，`doSomething`是一个方法名\n```html\n<a v-bind:href=\"url\"></a>\n<a v-on:click=\"doSomething\">\n```\n\n#### 2.2 修饰符\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定\n`.prevent`修饰符告诉`v-on`指令对于触发的事件调用`event.preventDefault()`来阻止默认行为\n```html\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n事件修饰符有：`.stop``.prevent``.capture``.self``.once`\n更多修饰符自己查..\n\n### 3、过滤器\n\nvuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。\n过滤器可以用在两个地方：插值和`v-bind`表达式。\n过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示\n\n```html\n<!-- in 插值 -->\n{{ message | capitalize }}\n<!-- in v-bind -->\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n\n```javascript\nnew Vue({\n  // ...\n  filters: {\n    // 自定义过滤器\n    // 过滤器函数总接受表达式的值作为第一个参数\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n\n过滤器可以串联\n```html\n<!-- 多个过滤器 -->\n{{ message | filterA | filterB }}\n```\n\n过滤器可以接受参数\n```html\n{{ message | filterA('arg1', arg2) }}\n```\n字符串`'arg1'`将传给过滤器作为第二个参数，`arg2`表达式的值将被求值然后传给过滤器作为第三个参数\n\n### 4、缩写\n\n`v-`前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀`v-`就没有那么重要\n```html\n<!-- v-bind 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- v-bind 缩写 -->\n<a :href=\"url\"></a>\n\n<!-- v-on 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- v-on 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n\n实际是，不用缩写也是挺好的。\n\n\n## 二、基本用法\n\n在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用`script`标签引入即可。\n\n### 1、声明式渲染\n\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n```javascript\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: '你好，程序猿！'\n  }\n})\n```\n\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></p>\n\n### 2、绑定 DOM 元素属性\n\n```html\n<div id=\"app-2\">\n  <span v-bind:title=\"message\" v-bind:data-alt=\"message\">鼠标移动到我上边来</span>\n</div>\n```\n\n```javascript\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: '什么都没有'\n  }\n})\n```\n\n生成HTML：\n```html\n<div id=\"app-2\"><span title=\"什么都没有\" data-alt=\"什么都没有\">鼠标移动到我上边来</span></div>\n```\n\n### 3、`if`语句\n\n```html\n<div id=\"app-3\">\n  <p v-if=\"seen\">看得见我</p>\n  <p v-if=\"!seen\">看不见我</p>\n</div>\n```\n\n```javascript\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n```\n\n在命令行改变`app3.seen`的值，会看到页面内容的变化\n\n### 4、`for`循环\n\n```html\n<div id=\"app-4\">\n  <ol>\n    <li v-for=\"item in todos\">\n      {{ item.text }}\n    </li>\n  </ol>\n</div>\n```\n\n```javascript\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n生成HTML：\n```html\n<ol>\n  <li>不要学 JavaScript</li>\n  <li>不要学 Vue</li>\n  <li>什么都不要学</li>\n</ol>\n```\n\n### 5、`v-on`监听事件\n\n```html\n<div id=\"app-5\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"toChange\">点我点我点我</button>\n</div>\n```\n\n```javascript\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: '我是一串很长的字符串'\n  },\n  methods: {\n    toChange: function () {\n      this.message = this.message.split('').reverse().join('');\n    }\n  }\n})\n```\n\n点击按钮，文字会经过`toChange`方法处理，进行逆序并输出\n\n### 6、`v-model`指令\n\n在表单输入和应用状态中做双向数据绑定\n\n```html\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n\n```javascript\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: '写点什么好呢'\n  }\n})\n```\n\n改变输入框的值，或者在控制台改变`app6.message`的值，页面中的文本及输入框的值都会同时改变\n\n## 三、组件\n\n将vuejs应用到开发中，组件是必不可少的部分。\n\n```html\n<div id=\"app-7\">\n  <ol>\n    <todo-item v-for=\"item in list\" v-bind:ccc=\"item\"></todo-item>\n\n    <li v-for=\"item in list\">2{{ item.text }}</li>\n  </ol>\n</div>\n```\n上段代码中，`ccc`相当于`function`中接收到的形参，作用于`function`内部\n```javascript\n// 定义组件\nVue.component('todo-item', {\n  props: ['ccc'],\n  template: '<li>{{ ccc.text }}</li>'\n})\n\n// vue实例\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    list: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n以上代码执行后发现，使用组件输出与直接用`for`循环输出，结果是一致的，但使用组件有更多的可控性\n\n## 四、总结\n\n不需要关注页面dom的操作，只需要管理页面数据即可！\n","source":"_posts/2017-04-26-vuejs基础入门.md","raw":"---\ntitle: vuejs基础入门\ndate: 2017-04-26 10:34:00\ntags: \n- vuejs\ncategories: \n- 学习\n- 笔记\n---\n\n为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。\nvuejs 是一套构建用户界面的 渐进式框架。\nvuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\nvuejs 现在不支持IE8及以下，以后也不会支持。\n\n<!-- more -->\n## 一、基本语法\n\n### 1、插值\n\n#### 1.1 文本\n双大括号包裹住变量名\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n#### 1.2 纯HTML\n使用`v-html`指令输出html\n```html\n<div v-html=\"message\"></div>\n```\n\n#### 1.3 属性\n使用`v-bind`指令绑定dom元素属性\n```html\n<div v-bind:id=\"message\" v-bind:data-abc=\"message\"></div>\n```\n\n#### 1.4 JavaScript 表达式\n使用双大括号包裹住表达式\n```html\n<p>{{ number + 1 }}</p>\n<p>{{ ok ? 'YES' : 'NO' }}</p>\n<p>{{ message.split('').reverse().join('') }}</p>\n<p v-bind:id=\"'list-' + id\"></p>\n```\n\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。\n类似于一个`function`，执行一系列语句后，必须 return 一个结果。\n\n```html\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n\n不应该在模板表达式中试图访问用户定义的全局变量\n\n### 2、指令\n\n指令（Directives）是带有 v- 前缀的特殊属性\n\n#### 2.1 参数\n如下：`url`和`doSomething`就是传入vue实例的参数，`url`是一个变量，`doSomething`是一个方法名\n```html\n<a v-bind:href=\"url\"></a>\n<a v-on:click=\"doSomething\">\n```\n\n#### 2.2 修饰符\n修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定\n`.prevent`修饰符告诉`v-on`指令对于触发的事件调用`event.preventDefault()`来阻止默认行为\n```html\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n事件修饰符有：`.stop``.prevent``.capture``.self``.once`\n更多修饰符自己查..\n\n### 3、过滤器\n\nvuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。\n过滤器可以用在两个地方：插值和`v-bind`表达式。\n过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示\n\n```html\n<!-- in 插值 -->\n{{ message | capitalize }}\n<!-- in v-bind -->\n<div v-bind:id=\"rawId | formatId\"></div>\n```\n\n```javascript\nnew Vue({\n  // ...\n  filters: {\n    // 自定义过滤器\n    // 过滤器函数总接受表达式的值作为第一个参数\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})\n```\n\n过滤器可以串联\n```html\n<!-- 多个过滤器 -->\n{{ message | filterA | filterB }}\n```\n\n过滤器可以接受参数\n```html\n{{ message | filterA('arg1', arg2) }}\n```\n字符串`'arg1'`将传给过滤器作为第二个参数，`arg2`表达式的值将被求值然后传给过滤器作为第三个参数\n\n### 4、缩写\n\n`v-`前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀`v-`就没有那么重要\n```html\n<!-- v-bind 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- v-bind 缩写 -->\n<a :href=\"url\"></a>\n\n<!-- v-on 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- v-on 缩写 -->\n<a @click=\"doSomething\"></a>\n```\n\n实际是，不用缩写也是挺好的。\n\n\n## 二、基本用法\n\n在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用`script`标签引入即可。\n\n### 1、声明式渲染\n\n```html\n<div id=\"app\">{{ message }}</div>\n```\n\n```javascript\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: '你好，程序猿！'\n  }\n})\n```\n\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></p>\n\n### 2、绑定 DOM 元素属性\n\n```html\n<div id=\"app-2\">\n  <span v-bind:title=\"message\" v-bind:data-alt=\"message\">鼠标移动到我上边来</span>\n</div>\n```\n\n```javascript\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: '什么都没有'\n  }\n})\n```\n\n生成HTML：\n```html\n<div id=\"app-2\"><span title=\"什么都没有\" data-alt=\"什么都没有\">鼠标移动到我上边来</span></div>\n```\n\n### 3、`if`语句\n\n```html\n<div id=\"app-3\">\n  <p v-if=\"seen\">看得见我</p>\n  <p v-if=\"!seen\">看不见我</p>\n</div>\n```\n\n```javascript\nvar app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})\n```\n\n在命令行改变`app3.seen`的值，会看到页面内容的变化\n\n### 4、`for`循环\n\n```html\n<div id=\"app-4\">\n  <ol>\n    <li v-for=\"item in todos\">\n      {{ item.text }}\n    </li>\n  </ol>\n</div>\n```\n\n```javascript\nvar app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n生成HTML：\n```html\n<ol>\n  <li>不要学 JavaScript</li>\n  <li>不要学 Vue</li>\n  <li>什么都不要学</li>\n</ol>\n```\n\n### 5、`v-on`监听事件\n\n```html\n<div id=\"app-5\">\n  <p>{{ message }}</p>\n  <button v-on:click=\"toChange\">点我点我点我</button>\n</div>\n```\n\n```javascript\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: '我是一串很长的字符串'\n  },\n  methods: {\n    toChange: function () {\n      this.message = this.message.split('').reverse().join('');\n    }\n  }\n})\n```\n\n点击按钮，文字会经过`toChange`方法处理，进行逆序并输出\n\n### 6、`v-model`指令\n\n在表单输入和应用状态中做双向数据绑定\n\n```html\n<div id=\"app-6\">\n  <p>{{ message }}</p>\n  <input v-model=\"message\">\n</div>\n```\n\n```javascript\nvar app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: '写点什么好呢'\n  }\n})\n```\n\n改变输入框的值，或者在控制台改变`app6.message`的值，页面中的文本及输入框的值都会同时改变\n\n## 三、组件\n\n将vuejs应用到开发中，组件是必不可少的部分。\n\n```html\n<div id=\"app-7\">\n  <ol>\n    <todo-item v-for=\"item in list\" v-bind:ccc=\"item\"></todo-item>\n\n    <li v-for=\"item in list\">2{{ item.text }}</li>\n  </ol>\n</div>\n```\n上段代码中，`ccc`相当于`function`中接收到的形参，作用于`function`内部\n```javascript\n// 定义组件\nVue.component('todo-item', {\n  props: ['ccc'],\n  template: '<li>{{ ccc.text }}</li>'\n})\n\n// vue实例\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    list: [\n      { text: '不要学 JavaScript' },\n      { text: '不要学 Vue' },\n      { text: '什么都不要学' }\n    ]\n  }\n})\n```\n\n以上代码执行后发现，使用组件输出与直接用`for`循环输出，结果是一致的，但使用组件有更多的可控性\n\n## 四、总结\n\n不需要关注页面dom的操作，只需要管理页面数据即可！\n","slug":"vuejs基础入门","published":1,"updated":"2017-04-26T04:13:59.064Z","_id":"cj1ye3446000ab4sbbqyykurk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。<br>vuejs 是一套构建用户界面的 渐进式框架。<br>vuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>vuejs 现在不支持IE8及以下，以后也不会支持。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><h3 id=\"1、插值\"><a href=\"#1、插值\" class=\"headerlink\" title=\"1、插值\"></a>1、插值</h3><h4 id=\"1-1-文本\"><a href=\"#1-1-文本\" class=\"headerlink\" title=\"1.1 文本\"></a>1.1 文本</h4><p>双大括号包裹住变量名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-纯HTML\"><a href=\"#1-2-纯HTML\" class=\"headerlink\" title=\"1.2 纯HTML\"></a>1.2 纯HTML</h4><p>使用<code>v-html</code>指令输出html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-属性\"><a href=\"#1-3-属性\" class=\"headerlink\" title=\"1.3 属性\"></a>1.3 属性</h4><p>使用<code>v-bind</code>指令绑定dom元素属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-abc</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-JavaScript-表达式\"><a href=\"#1-4-JavaScript-表达式\" class=\"headerlink\" title=\"1.4 JavaScript 表达式\"></a>1.4 JavaScript 表达式</h4><p>使用双大括号包裹住表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。<br>类似于一个<code>function</code>，执行一系列语句后，必须 return 一个结果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure>\n<p>不应该在模板表达式中试图访问用户定义的全局变量</p>\n<h3 id=\"2、指令\"><a href=\"#2、指令\" class=\"headerlink\" title=\"2、指令\"></a>2、指令</h3><p>指令（Directives）是带有 v- 前缀的特殊属性</p>\n<h4 id=\"2-1-参数\"><a href=\"#2-1-参数\" class=\"headerlink\" title=\"2.1 参数\"></a>2.1 参数</h4><p>如下：<code>url</code>和<code>doSomething</code>就是传入vue实例的参数，<code>url</code>是一个变量，<code>doSomething</code>是一个方法名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-修饰符\"><a href=\"#2-2-修饰符\" class=\"headerlink\" title=\"2.2 修饰符\"></a>2.2 修饰符</h4><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定<br><code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用<code>event.preventDefault()</code>来阻止默认行为<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>事件修饰符有：<code>.stop``.prevent``.capture``.self``.once</code><br>更多修饰符自己查..</p>\n<h3 id=\"3、过滤器\"><a href=\"#3、过滤器\" class=\"headerlink\" title=\"3、过滤器\"></a>3、过滤器</h3><p>vuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。<br>过滤器可以用在两个地方：插值和<code>v-bind</code>表达式。<br>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- in 插值 --&gt;</span></div><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- in v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    <span class=\"comment\">// 自定义过滤器</span></div><div class=\"line\">    <span class=\"comment\">// 过滤器函数总接受表达式的值作为第一个参数</span></div><div class=\"line\">    capitalize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>过滤器可以串联<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多个过滤器 --&gt;</span></div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过滤器可以接受参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>字符串<code>&#39;arg1&#39;</code>将传给过滤器作为第二个参数，<code>arg2</code>表达式的值将被求值然后传给过滤器作为第三个参数</p>\n<h3 id=\"4、缩写\"><a href=\"#4、缩写\" class=\"headerlink\" title=\"4、缩写\"></a>4、缩写</h3><p><code>v-</code>前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀<code>v-</code>就没有那么重要<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>实际是，不用缩写也是挺好的。</p>\n<h2 id=\"二、基本用法\"><a href=\"#二、基本用法\" class=\"headerlink\" title=\"二、基本用法\"></a>二、基本用法</h2><p>在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用<code>script</code>标签引入即可。</p>\n<h3 id=\"1、声明式渲染\"><a href=\"#1、声明式渲染\" class=\"headerlink\" title=\"1、声明式渲染\"></a>1、声明式渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'你好，程序猿！'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></span></span></p>\n\n<h3 id=\"2、绑定-DOM-元素属性\"><a href=\"#2、绑定-DOM-元素属性\" class=\"headerlink\" title=\"2、绑定 DOM 元素属性\"></a>2、绑定 DOM 元素属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-alt</span>=<span class=\"string\">\"message\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'什么都没有'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"什么都没有\"</span> <span class=\"attr\">data-alt</span>=<span class=\"string\">\"什么都没有\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3、if语句\"><a href=\"#3、if语句\" class=\"headerlink\" title=\"3、if语句\"></a>3、<code>if</code>语句</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>看得见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!seen\"</span>&gt;</span>看不见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app3 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">seen</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在命令行改变<code>app3.seen</code>的值，会看到页面内容的变化</p>\n<h3 id=\"4、for循环\"><a href=\"#4、for循环\" class=\"headerlink\" title=\"4、for循环\"></a>4、<code>for</code>循环</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in todos\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app4 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 JavaScript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 Vue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>什么都不要学<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5、v-on监听事件\"><a href=\"#5、v-on监听事件\" class=\"headerlink\" title=\"5、v-on监听事件\"></a>5、<code>v-on</code>监听事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-5\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toChange\"</span>&gt;</span>点我点我点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app5 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-5'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'我是一串很长的字符串'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">toChange</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>点击按钮，文字会经过<code>toChange</code>方法处理，进行逆序并输出</p>\n<h3 id=\"6、v-model指令\"><a href=\"#6、v-model指令\" class=\"headerlink\" title=\"6、v-model指令\"></a>6、<code>v-model</code>指令</h3><p>在表单输入和应用状态中做双向数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-6\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'写点什么好呢'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>改变输入框的值，或者在控制台改变<code>app6.message</code>的值，页面中的文本及输入框的值都会同时改变</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><p>将vuejs应用到开发中，组件是必不可少的部分。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-item</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">v-bind:ccc</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span>&gt;</span>2&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上段代码中，<code>ccc</code>相当于<code>function</code>中接收到的形参，作用于<code>function</code>内部<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义组件</span></div><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'ccc'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; ccc.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// vue实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> app7 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>以上代码执行后发现，使用组件输出与直接用<code>for</code>循环输出，结果是一致的，但使用组件有更多的可控性</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>不需要关注页面dom的操作，只需要管理页面数据即可！</p>\n","excerpt":"<p>为什么要学习vuejs？因为这两年vuejs蛮火的，而且易入门，实用。<br>vuejs 是一套构建用户界面的 渐进式框架。<br>vuejs 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>vuejs 现在不支持IE8及以下，以后也不会支持。</p>","more":"<h2 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h2><h3 id=\"1、插值\"><a href=\"#1、插值\" class=\"headerlink\" title=\"1、插值\"></a>1、插值</h3><h4 id=\"1-1-文本\"><a href=\"#1-1-文本\" class=\"headerlink\" title=\"1.1 文本\"></a>1.1 文本</h4><p>双大括号包裹住变量名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-2-纯HTML\"><a href=\"#1-2-纯HTML\" class=\"headerlink\" title=\"1.2 纯HTML\"></a>1.2 纯HTML</h4><p>使用<code>v-html</code>指令输出html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-属性\"><a href=\"#1-3-属性\" class=\"headerlink\" title=\"1.3 属性\"></a>1.3 属性</h4><p>使用<code>v-bind</code>指令绑定dom元素属性<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-abc</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"1-4-JavaScript-表达式\"><a href=\"#1-4-JavaScript-表达式\" class=\"headerlink\" title=\"1.4 JavaScript 表达式\"></a>1.4 JavaScript 表达式</h4><p>使用双大括号包裹住表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。<br>类似于一个<code>function</code>，执行一系列语句后，必须 return 一个结果。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></div><div class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</div></pre></td></tr></table></figure>\n<p>不应该在模板表达式中试图访问用户定义的全局变量</p>\n<h3 id=\"2、指令\"><a href=\"#2、指令\" class=\"headerlink\" title=\"2、指令\"></a>2、指令</h3><p>指令（Directives）是带有 v- 前缀的特殊属性</p>\n<h4 id=\"2-1-参数\"><a href=\"#2-1-参数\" class=\"headerlink\" title=\"2.1 参数\"></a>2.1 参数</h4><p>如下：<code>url</code>和<code>doSomething</code>就是传入vue实例的参数，<code>url</code>是一个变量，<code>doSomething</code>是一个方法名<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-修饰符\"><a href=\"#2-2-修饰符\" class=\"headerlink\" title=\"2.2 修饰符\"></a>2.2 修饰符</h4><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定<br><code>.prevent</code>修饰符告诉<code>v-on</code>指令对于触发的事件调用<code>event.preventDefault()</code>来阻止默认行为<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>事件修饰符有：<code>.stop``.prevent``.capture``.self``.once</code><br>更多修饰符自己查..</p>\n<h3 id=\"3、过滤器\"><a href=\"#3、过滤器\" class=\"headerlink\" title=\"3、过滤器\"></a>3、过滤器</h3><p>vuejs 允许你自定义过滤器，可被用作一些常见的文本格式化。<br>过滤器可以用在两个地方：插值和<code>v-bind</code>表达式。<br>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- in 插值 --&gt;</span></div><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div><div class=\"line\"><span class=\"comment\">&lt;!-- in v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"rawId | formatId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  filters: &#123;</div><div class=\"line\">    <span class=\"comment\">// 自定义过滤器</span></div><div class=\"line\">    <span class=\"comment\">// 过滤器函数总接受表达式的值作为第一个参数</span></div><div class=\"line\">    capitalize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>过滤器可以串联<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 多个过滤器 --&gt;</span></div><div class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>过滤器可以接受参数<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>\n<p>字符串<code>&#39;arg1&#39;</code>将传给过滤器作为第二个参数，<code>arg2</code>表达式的值将被求值然后传给过滤器作为第三个参数</p>\n<h3 id=\"4、缩写\"><a href=\"#4、缩写\" class=\"headerlink\" title=\"4、缩写\"></a>4、缩写</h3><p><code>v-</code>前缀在模板中是作为一个标示 Vue 特殊属性的明显标识，整个应用都使用vuejs的话，那么前缀<code>v-</code>就没有那么重要<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-bind 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 完整语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on 缩写 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>实际是，不用缩写也是挺好的。</p>\n<h2 id=\"二、基本用法\"><a href=\"#二、基本用法\" class=\"headerlink\" title=\"二、基本用法\"></a>二、基本用法</h2><p>在学习之前，先把<a href=\"//vuefe.cn/v2/guide/installation.html\" target=\"_blank\">vuejs</a>下载下来放在本地，直接使用<code>script</code>标签引入即可。</p>\n<h3 id=\"1、声明式渲染\"><a href=\"#1、声明式渲染\" class=\"headerlink\" title=\"1、声明式渲染\"></a>1、声明式渲染</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'你好，程序猿！'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果输出：<br><span style=\"color: #999;\">你好，程序猿！<span></p>\n\n<h3 id=\"2、绑定-DOM-元素属性\"><a href=\"#2、绑定-DOM-元素属性\" class=\"headerlink\" title=\"2、绑定 DOM 元素属性\"></a>2、绑定 DOM 元素属性</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">v-bind:data-alt</span>=<span class=\"string\">\"message\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-2'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'什么都没有'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">title</span>=<span class=\"string\">\"什么都没有\"</span> <span class=\"attr\">data-alt</span>=<span class=\"string\">\"什么都没有\"</span>&gt;</span>鼠标移动到我上边来<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3、if语句\"><a href=\"#3、if语句\" class=\"headerlink\" title=\"3、if语句\"></a>3、<code>if</code>语句</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>看得见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"!seen\"</span>&gt;</span>看不见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app3 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-3'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">seen</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在命令行改变<code>app3.seen</code>的值，会看到页面内容的变化</p>\n<h3 id=\"4、for循环\"><a href=\"#4、for循环\" class=\"headerlink\" title=\"4、for循环\"></a>4、<code>for</code>循环</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-4\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in todos\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; item.text &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app4 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-4'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">todos</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>生成HTML：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 JavaScript<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>不要学 Vue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>什么都不要学<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5、v-on监听事件\"><a href=\"#5、v-on监听事件\" class=\"headerlink\" title=\"5、v-on监听事件\"></a>5、<code>v-on</code>监听事件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-5\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"toChange\"</span>&gt;</span>点我点我点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app5 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-5'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'我是一串很长的字符串'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">toChange</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>点击按钮，文字会经过<code>toChange</code>方法处理，进行逆序并输出</p>\n<h3 id=\"6、v-model指令\"><a href=\"#6、v-model指令\" class=\"headerlink\" title=\"6、v-model指令\"></a>6、<code>v-model</code>指令</h3><p>在表单输入和应用状态中做双向数据绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-6\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app6 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-6'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'写点什么好呢'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>改变输入框的值，或者在控制台改变<code>app6.message</code>的值，页面中的文本及输入框的值都会同时改变</p>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><p>将vuejs应用到开发中，组件是必不可少的部分。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-7\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-item</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span> <span class=\"attr\">v-bind:ccc</span>=<span class=\"string\">\"item\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in list\"</span>&gt;</span>2&#123;&#123; item.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上段代码中，<code>ccc</code>相当于<code>function</code>中接收到的形参，作用于<code>function</code>内部<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义组件</span></div><div class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'ccc'</span>],</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;li&gt;&#123;&#123; ccc.text &#125;&#125;&lt;/li&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// vue实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> app7 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app-7'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 JavaScript'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'不要学 Vue'</span> &#125;,</div><div class=\"line\">      &#123; <span class=\"attr\">text</span>: <span class=\"string\">'什么都不要学'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>以上代码执行后发现，使用组件输出与直接用<code>for</code>循环输出，结果是一致的，但使用组件有更多的可控性</p>\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><p>不需要关注页面dom的操作，只需要管理页面数据即可！</p>"},{"title":"JavaScript排序算法及性能比较","date":"2017-03-30T02:23:43.000Z","_content":"\n作者原文：http://www.boatsky.com/blog/10.html\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n<!-- more -->\n\n前言\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。\n\n1.冒泡排序\n冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果\n1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果\n1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果\n1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果\n……\n1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果\n1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果\n第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次\n\n1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5\n1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0\n1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7\n1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2\n……\n重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。\n代码如下：\n```javascript\n//冒泡排序\nfunction bubbleSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = 0;j < len - i;j++){\n                if(arr[j] > arr[j+1]){\n                    temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n2.选择排序\n选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1\n1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7\n0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0\n……\n0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6\n第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。\n\n0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7\n0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1\n……\n0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6\n重复n-1轮，得出最终结果。\n\n```javascript\n//选择排序\nfunction selectSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = i+1;j < len;j++){\n                if(arr[i] > arr[j]){\n                    temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n\n3.插入排序\n插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6    1插入[5]中结果\n1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果\n0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果\n0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果\n……\n0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果\n0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果\n一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。\n\n代码如下：\n```javascript\nfunction insertSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 1;i < len;i++){\n            temp = arr[i];\n            j = i;\n            while(j > 0 && arr[j-1] > temp){\n                arr[j] = arr[j-1];\n                j--;\n            }\n            arr[j] = temp;\n        }\n    }\n    return arr;\n}\n```\n\n\n4.归并排序\n归并排序，则是把已经排好序的子数组合并成一个大的数组。\n5,1,7,0,9,2,3,8,4,6\n5,  1,  7,  0,  9,  2,  3,  8,  4,  6\nstep 1\n1,5,  0,7,  2,9,  3,8  4,6\nstep 2\n0,1,5,7,  2,3,8,9,  4,6\nstep 4\n0,1,2,3,5,7,8,9,  4,6\n\n最终\n0,1,2,3,4,5,6,7,8,9\n\n归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！\n代码如下：\n```javascript\nfunction mergeSort(arr){\n    if (arr.length < 2){\n        return arr;\n    }\n    var step = 1;\n    var left, right;\n    while(step < arr.length){\n        left = 0;\n        right = step;\n        while(right + step <= arr.length){\n            mergeArrays(arr, left, left+step, right, right+step);\n            left = right + step;\n            right = left + step;\n        }\n        if (right < arr.length){\n            mergeArrays(arr, left, left+step, right, arr.length);\n        }\n        step *= 2;\n    }\n    return arr;\n}\nfunction mergeArrays(arr, startLeft, stopLeft, startRight, stopRight){\n    var leftArr = new Array(stopLeft - startLeft + 1);\n    var rightArr = new Array(stopRight - startRight + 1);\n    var k = startLeft;\n    for(var i = 0;i < (leftArr.length-1);i++){\n        leftArr[i] = arr[k];\n        k++;\n    }\n    k = startRight;\n    for(var i = 0;i < (rightArr.length-1);i++){\n        rightArr[i] = arr[k];\n        k++;\n    }\n    rightArr[rightArr.length-1] = Infinity;\n    leftArr[leftArr.length-1] = Infinity;\n    var m = 0,n = 0;\n    for(k = startLeft;k < stopRight;k++){\n        if (leftArr[m] <= rightArr[n]){\n            arr[k] = leftArr[m];\n            m++;\n        }\n        else {\n            arr[k] = rightArr[n];\n            n++;\n        }\n    }\n}\n```\n\n\n5.希尔排序\n希尔排序，又是插入排序的改良版，即分组插入。\n5,1,7,0,9,2,3,8,4,6\ng为5时，分成5组\n5与2比较，1与3比较，7与8比较，0与4比较，9与6比较\n2,1,7,0,6,5,3,8,4,9\ng为2时，分成2组\n2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9\n结果为\n2,0,3,1,4,5,6,8,9,9\ng为1时，进行插入排序得到\n0,1,2,3,4,5,6,8,9,7,8\n其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。\n代码如下：\n```javascript\n//希尔排序\nfunction shellSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var g,i,j, k,temp;\n        //第几轮分组\n        for(g = Math.floor(len / 2);g > 0;g = Math.floor(g / 2)){\n            for(i = 0;i < g;i++){\n                for(j = i + g;j < len;j = j + g){\n                    if(arr[j - g] > arr[j]){\n                        temp = arr[j];\n                        k = j - g;\n                        while(k >= 0 && arr[k] > temp){\n                            arr[k + g] = arr[k];\n                            k = k - g;\n                        }\n                        arr[k + g] = temp;\n                    }\n                }\n            }\n        }\n\n    }\n    return arr;\n}\n```\n\n6.快速排序\n快速排序即排序很快速！那为什么它这么快？\n官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n我们用实例来演示一下：\n5,1,7,0,9,2,3,8,4,6\n选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成\n[1,0,2,3,4]+5+[7,9,8,6]\n与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)\n[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]\n与此同时再分解\n[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]\n同时\n[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]\n快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。\n后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。\n```javascript\n//快速排序\nfunction quickSort(arr) {\n    var len = arr.length;\n    if(len == 0){\n        return [];\n    }\n    else if(len == 1){\n        return arr;\n    }\n    var smallArr = [];\n    var largeArr = [];\n    var pivot = arr[0];\n    for (var i = 1; i < len; i++) {\n        if (arr[i] < pivot) {\n            smallArr.push(arr[i]);\n        } else {\n            largeArr.push(arr[i]);\n        }\n    }\n    return quickSort(smallArr).concat(pivot, quickSort(largeArr));\n}\n```\n\n\n\n以上算法的demo : http://www.boatsky.com/static/js/demo/sort_demo.js\n\n\n这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例\n\n\n```javascript\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\n//以为是计算时间例子\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\nfunction getArr(){\n    var arr = [];\n    for(var i = 0;i < 10000;i++){\n        arr.push(Math.floor(Math.random()*10000));\n    }\n    return arr;\n}\n//快速排序\n\n//获取时间\nfunction getTime(){\n    //计算100次，取平均值，减小误差\n    for(var k = 0;k < 100;k++){\n        var arr = getArr();\n        d1 = new Date().getTime();\n        arr = quickSort(arr);\n        d2 = new Date().getTime();\n        arrTime.push(d2-d1);\n    }\n    var all = 0;\n    for(var m = 0;m < arrTime.length;m++){\n        all = all + arrTime[m];\n    }\n    console.log(arrTime);\n    console.log(all/arrTime.length);\n}\ngetTime();\n```\n\n\n\n统计100次  平均时间(ms)\t时间复杂度\t            空间复杂度    \t   稳定性\n冒泡排序\t   704.69\t   O(n(n+1)/2)\t           O(1)\t               稳定\n选择排序\t   214.31\t   O(n(n+1)/2)\t           O(1)\t               稳定\n插入排序\t   50.62\t   O(n)~O(n^2/2)           O(1)\t               不稳定\n归并排序\t   2.16\t       O(n log n)\t           O(n)\t               稳定\n希尔排序\t   1.5\t       O(n log n) ~ O(n^2)     O(1)\t               不稳定\n快速排序\t   0.15\t       O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)\t不稳定\n\n\n所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。\n\n所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。\n\n所以说，不要在任何情况下都用冒泡排序啦！！！\n","source":"_posts/2017-03-30-JavaScript排序算法及性能比较.md","raw":"---\ntitle: JavaScript排序算法及性能比较\ndate: 2017-03-30 10:23:43\ntags:\ncategories:\n---\n\n作者原文：http://www.boatsky.com/blog/10.html\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n<!-- more -->\n\n前言\n\n说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。\n\n算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。\n\n算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。\n\n1.冒泡排序\n冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果\n1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果\n1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果\n1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果\n……\n1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果\n1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果\n第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次\n\n1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5\n1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0\n1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7\n1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2\n……\n重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。\n代码如下：\n```javascript\n//冒泡排序\nfunction bubbleSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = 0;j < len - i;j++){\n                if(arr[j] > arr[j+1]){\n                    temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n2.选择排序\n选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1\n1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7\n0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0\n……\n0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6\n第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。\n\n0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7\n0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1\n……\n0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6\n重复n-1轮，得出最终结果。\n\n```javascript\n//选择排序\nfunction selectSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 0;i < len;i++){\n            for(j = i+1;j < len;j++){\n                if(arr[i] > arr[j]){\n                    temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n    return arr;\n}\n```\n\n\n\n3.插入排序\n插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。\n5,1,7,0,9,2,3,8,4,6\n1,5,7,0,9,2,3,8,4,6    1插入[5]中结果\n1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果\n0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果\n0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果\n……\n0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果\n0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果\n一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。\n\n代码如下：\n```javascript\nfunction insertSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var i,j,temp;\n        for(i = 1;i < len;i++){\n            temp = arr[i];\n            j = i;\n            while(j > 0 && arr[j-1] > temp){\n                arr[j] = arr[j-1];\n                j--;\n            }\n            arr[j] = temp;\n        }\n    }\n    return arr;\n}\n```\n\n\n4.归并排序\n归并排序，则是把已经排好序的子数组合并成一个大的数组。\n5,1,7,0,9,2,3,8,4,6\n5,  1,  7,  0,  9,  2,  3,  8,  4,  6\nstep 1\n1,5,  0,7,  2,9,  3,8  4,6\nstep 2\n0,1,5,7,  2,3,8,9,  4,6\nstep 4\n0,1,2,3,5,7,8,9,  4,6\n\n最终\n0,1,2,3,4,5,6,7,8,9\n\n归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！\n代码如下：\n```javascript\nfunction mergeSort(arr){\n    if (arr.length < 2){\n        return arr;\n    }\n    var step = 1;\n    var left, right;\n    while(step < arr.length){\n        left = 0;\n        right = step;\n        while(right + step <= arr.length){\n            mergeArrays(arr, left, left+step, right, right+step);\n            left = right + step;\n            right = left + step;\n        }\n        if (right < arr.length){\n            mergeArrays(arr, left, left+step, right, arr.length);\n        }\n        step *= 2;\n    }\n    return arr;\n}\nfunction mergeArrays(arr, startLeft, stopLeft, startRight, stopRight){\n    var leftArr = new Array(stopLeft - startLeft + 1);\n    var rightArr = new Array(stopRight - startRight + 1);\n    var k = startLeft;\n    for(var i = 0;i < (leftArr.length-1);i++){\n        leftArr[i] = arr[k];\n        k++;\n    }\n    k = startRight;\n    for(var i = 0;i < (rightArr.length-1);i++){\n        rightArr[i] = arr[k];\n        k++;\n    }\n    rightArr[rightArr.length-1] = Infinity;\n    leftArr[leftArr.length-1] = Infinity;\n    var m = 0,n = 0;\n    for(k = startLeft;k < stopRight;k++){\n        if (leftArr[m] <= rightArr[n]){\n            arr[k] = leftArr[m];\n            m++;\n        }\n        else {\n            arr[k] = rightArr[n];\n            n++;\n        }\n    }\n}\n```\n\n\n5.希尔排序\n希尔排序，又是插入排序的改良版，即分组插入。\n5,1,7,0,9,2,3,8,4,6\ng为5时，分成5组\n5与2比较，1与3比较，7与8比较，0与4比较，9与6比较\n2,1,7,0,6,5,3,8,4,9\ng为2时，分成2组\n2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9\n结果为\n2,0,3,1,4,5,6,8,9,9\ng为1时，进行插入排序得到\n0,1,2,3,4,5,6,8,9,7,8\n其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。\n代码如下：\n```javascript\n//希尔排序\nfunction shellSort(arr){\n    if(arr.length > 1){\n        var len = arr.length;\n        var g,i,j, k,temp;\n        //第几轮分组\n        for(g = Math.floor(len / 2);g > 0;g = Math.floor(g / 2)){\n            for(i = 0;i < g;i++){\n                for(j = i + g;j < len;j = j + g){\n                    if(arr[j - g] > arr[j]){\n                        temp = arr[j];\n                        k = j - g;\n                        while(k >= 0 && arr[k] > temp){\n                            arr[k + g] = arr[k];\n                            k = k - g;\n                        }\n                        arr[k + g] = temp;\n                    }\n                }\n            }\n        }\n\n    }\n    return arr;\n}\n```\n\n6.快速排序\n快速排序即排序很快速！那为什么它这么快？\n官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n我们用实例来演示一下：\n5,1,7,0,9,2,3,8,4,6\n选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成\n[1,0,2,3,4]+5+[7,9,8,6]\n与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)\n[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]\n与此同时再分解\n[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]\n同时\n[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]\n快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。\n后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。\n```javascript\n//快速排序\nfunction quickSort(arr) {\n    var len = arr.length;\n    if(len == 0){\n        return [];\n    }\n    else if(len == 1){\n        return arr;\n    }\n    var smallArr = [];\n    var largeArr = [];\n    var pivot = arr[0];\n    for (var i = 1; i < len; i++) {\n        if (arr[i] < pivot) {\n            smallArr.push(arr[i]);\n        } else {\n            largeArr.push(arr[i]);\n        }\n    }\n    return quickSort(smallArr).concat(pivot, quickSort(largeArr));\n}\n```\n\n\n\n以上算法的demo : http://www.boatsky.com/static/js/demo/sort_demo.js\n\n\n这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例\n\n\n```javascript\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\n//以为是计算时间例子\n//分别是每次的计算的开始时间与结束时间\nvar d1,d2;\n//保存每次计算的时候\nvar arrTime = [];\n//随机生成数组元素\nfunction getArr(){\n    var arr = [];\n    for(var i = 0;i < 10000;i++){\n        arr.push(Math.floor(Math.random()*10000));\n    }\n    return arr;\n}\n//快速排序\n\n//获取时间\nfunction getTime(){\n    //计算100次，取平均值，减小误差\n    for(var k = 0;k < 100;k++){\n        var arr = getArr();\n        d1 = new Date().getTime();\n        arr = quickSort(arr);\n        d2 = new Date().getTime();\n        arrTime.push(d2-d1);\n    }\n    var all = 0;\n    for(var m = 0;m < arrTime.length;m++){\n        all = all + arrTime[m];\n    }\n    console.log(arrTime);\n    console.log(all/arrTime.length);\n}\ngetTime();\n```\n\n\n\n统计100次  平均时间(ms)\t时间复杂度\t            空间复杂度    \t   稳定性\n冒泡排序\t   704.69\t   O(n(n+1)/2)\t           O(1)\t               稳定\n选择排序\t   214.31\t   O(n(n+1)/2)\t           O(1)\t               稳定\n插入排序\t   50.62\t   O(n)~O(n^2/2)           O(1)\t               不稳定\n归并排序\t   2.16\t       O(n log n)\t           O(n)\t               稳定\n希尔排序\t   1.5\t       O(n log n) ~ O(n^2)     O(1)\t               不稳定\n快速排序\t   0.15\t       O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)\t不稳定\n\n\n所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。\n\n所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。\n\n所以说，不要在任何情况下都用冒泡排序啦！！！\n","slug":"JavaScript排序算法及性能比较","published":1,"updated":"2017-04-10T02:00:22.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ye3449000cb4sbv1ni9vci","content":"<p>作者原文：<a href=\"http://www.boatsky.com/blog/10.html\" target=\"_blank\" rel=\"external\">http://www.boatsky.com/blog/10.html</a></p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>\n<a id=\"more\"></a>\n<p>前言</p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>\n<p>算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。</p>\n<p>1.冒泡排序<br>冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果<br>1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果<br>1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果<br>1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果<br>……<br>1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果<br>1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果<br>第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次</p>\n<p>1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5<br>1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0<br>1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7<br>1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2<br>……<br>重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//冒泡排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; len - i;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">                    temp = arr[j];</div><div class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</div><div class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.选择排序<br>选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1<br>1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7<br>0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0<br>……<br>0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6<br>第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。</p>\n<p>0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7<br>0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1<br>……<br>0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6<br>重复n-1轮，得出最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//选择排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = i+<span class=\"number\">1</span>;j &lt; len;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[i] &gt; arr[j])&#123;</div><div class=\"line\">                    temp = arr[i];</div><div class=\"line\">                    arr[i] = arr[j];</div><div class=\"line\">                    arr[j] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.插入排序<br>插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6    1插入[5]中结果<br>1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果<br>0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果<br>0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果<br>……<br>0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果<br>0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果<br>一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。</p>\n<p>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            temp = arr[i];</div><div class=\"line\">            j = i;</div><div class=\"line\">            <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j<span class=\"number\">-1</span>] &gt; temp)&#123;</div><div class=\"line\">                arr[j] = arr[j<span class=\"number\">-1</span>];</div><div class=\"line\">                j--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[j] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.归并排序<br>归并排序，则是把已经排好序的子数组合并成一个大的数组。<br>5,1,7,0,9,2,3,8,4,6<br>5,  1,  7,  0,  9,  2,  3,  8,  4,  6<br>step 1<br>1,5,  0,7,  2,9,  3,8  4,6<br>step 2<br>0,1,5,7,  2,3,8,9,  4,6<br>step 4<br>0,1,2,3,5,7,8,9,  4,6</p>\n<p>最终<br>0,1,2,3,4,5,6,7,8,9</p>\n<p>归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> left, right;</div><div class=\"line\">    <span class=\"keyword\">while</span>(step &lt; arr.length)&#123;</div><div class=\"line\">        left = <span class=\"number\">0</span>;</div><div class=\"line\">        right = step;</div><div class=\"line\">        <span class=\"keyword\">while</span>(right + step &lt;= arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, right+step);</div><div class=\"line\">            left = right + step;</div><div class=\"line\">            right = left + step;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (right &lt; arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, arr.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        step *= <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeArrays</span>(<span class=\"params\">arr, startLeft, stopLeft, startRight, stopRight</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> leftArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopLeft - startLeft + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> rightArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopRight - startRight + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> k = startLeft;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (leftArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        leftArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    k = startRight;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (rightArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        rightArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    rightArr[rightArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    leftArr[leftArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = <span class=\"number\">0</span>,n = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(k = startLeft;k &lt; stopRight;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (leftArr[m] &lt;= rightArr[n])&#123;</div><div class=\"line\">            arr[k] = leftArr[m];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            arr[k] = rightArr[n];</div><div class=\"line\">            n++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.希尔排序<br>希尔排序，又是插入排序的改良版，即分组插入。<br>5,1,7,0,9,2,3,8,4,6<br>g为5时，分成5组<br>5与2比较，1与3比较，7与8比较，0与4比较，9与6比较<br>2,1,7,0,6,5,3,8,4,9<br>g为2时，分成2组<br>2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9<br>结果为<br>2,0,3,1,4,5,6,8,9,9<br>g为1时，进行插入排序得到<br>0,1,2,3,4,5,6,8,9,7,8<br>其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//希尔排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> g,i,j, k,temp;</div><div class=\"line\">        <span class=\"comment\">//第几轮分组</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(g = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>);g &gt; <span class=\"number\">0</span>;g = <span class=\"built_in\">Math</span>.floor(g / <span class=\"number\">2</span>))&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; g;i++)&#123;</div><div class=\"line\">                <span class=\"keyword\">for</span>(j = i + g;j &lt; len;j = j + g)&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(arr[j - g] &gt; arr[j])&#123;</div><div class=\"line\">                        temp = arr[j];</div><div class=\"line\">                        k = j - g;</div><div class=\"line\">                        <span class=\"keyword\">while</span>(k &gt;= <span class=\"number\">0</span> &amp;&amp; arr[k] &gt; temp)&#123;</div><div class=\"line\">                            arr[k + g] = arr[k];</div><div class=\"line\">                            k = k - g;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        arr[k + g] = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.快速排序<br>快速排序即排序很快速！那为什么它这么快？<br>官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br>我们用实例来演示一下：<br>5,1,7,0,9,2,3,8,4,6<br>选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成<br>[1,0,2,3,4]+5+[7,9,8,6]<br>与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)<br>[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]<br>与此同时再分解<br>[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]<br>同时<br>[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]<br>快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。<br>后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> smallArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> largeArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            smallArr.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            largeArr.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> quickSort(smallArr).concat(pivot, quickSort(largeArr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上算法的demo : <a href=\"http://www.boatsky.com/static/js/demo/sort_demo.js\" target=\"_blank\" rel=\"external\">http://www.boatsky.com/static/js/demo/sort_demo.js</a></p>\n<p>这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"comment\">//以为是计算时间例子</span></div><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10000</span>;i++)&#123;</div><div class=\"line\">        arr.push(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10000</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取时间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTime</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//计算100次，取平均值，减小误差</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;k &lt; <span class=\"number\">100</span>;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> arr = getArr();</div><div class=\"line\">        d1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arr = quickSort(arr);</div><div class=\"line\">        d2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arrTime.push(d2-d1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> all = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m = <span class=\"number\">0</span>;m &lt; arrTime.length;m++)&#123;</div><div class=\"line\">        all = all + arrTime[m];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arrTime);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(all/arrTime.length);</div><div class=\"line\">&#125;</div><div class=\"line\">getTime();</div></pre></td></tr></table></figure>\n<p>统计100次  平均时间(ms)    时间复杂度                空间复杂度           稳定性<br>冒泡排序       704.69       O(n(n+1)/2)               O(1)                   稳定<br>选择排序       214.31       O(n(n+1)/2)               O(1)                   稳定<br>插入排序       50.62       O(n)~O(n^2/2)           O(1)                   不稳定<br>归并排序       2.16           O(n log n)               O(n)                   稳定<br>希尔排序       1.5           O(n log n) ~ O(n^2)     O(1)                   不稳定<br>快速排序       0.15           O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)    不稳定</p>\n<p>所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。</p>\n<p>所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。</p>\n<p>所以说，不要在任何情况下都用冒泡排序啦！！！</p>\n","excerpt":"<p>作者原文：<a href=\"http://www.boatsky.com/blog/10.html\">http://www.boatsky.com/blog/10.html</a></p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>","more":"<p>前言</p>\n<p>说到算法，对很多同学来说，启蒙算法应该就是冒泡排序，我们也会见到它解决排序问题，然后，数据量稍大时，它就显的无力了。前端可能用到算法的机会不算多，但用到时又不会，临时去学，就有些痛苦了。</p>\n<p>算法很大程度是数学问题，而算法的作者们往往是一些科学家或大牛，这确实需要良好的数学功底。但不要被它吓到，站在巨人的肩膀上，花些时间理解已有理论，就可以直接或间接使用现成算法解决问题，人类的智慧成长不正是代代智慧的叠加么？所以私以为学习算法，并不需要多好的数学素养。</p>\n<p>算法一般都是C/C++或者伪代码讲解，本文则使用JavaScript翻译一遍，大前端时代嘛。本文参考了《数据结构与算法JavaScript描述》。</p>\n<p>1.冒泡排序<br>冒泡排序是最简单的排序算法，效率也是最低的，它把相邻元素两两对比，比较n轮，每轮len-n次，以下都以数组5,1,7,0,9,2,3,8,4,6从小到大排序为例<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6   1轮,1次，比较5,1的结果<br>1,5,7,0,9,2,3,8,4,6   1轮,2次，比较5,7的结果<br>1,5,0,7,9,2,3,8,4,6 1轮,3次，比较7,0的结果<br>1,5,0,7,9,2,3,8,4,6   1轮,4次，比较7,9的结果<br>……<br>1,5,0,7,2,3,8,4,9,6   1轮,8次，比较9,4的结果<br>1,5,0,7,2,3,8,4,6,9   1轮,9次，比较9,6的结果<br>第1轮完成，把最大值9移至最后，第2轮开始，我们只需比较8次</p>\n<p>1,5,0,7,2,3,8,4,6,9   2轮,1次，比较1,5<br>1,0,5,7,2,3,8,4,6,9   2轮,2次，比较5,0<br>1,0,5,7,2,3,8,4,6,9   2轮,3次，比较5,7<br>1,0,5,2,7,3,8,4,6,9   2轮,4次，比较7,2<br>……<br>重复以上操作，第2轮则把8移至第8位，同理经过n(n+1)/2次比较后，得到最终结果。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//冒泡排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; len - i;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">                    temp = arr[j];</div><div class=\"line\">                    arr[j] = arr[j+<span class=\"number\">1</span>];</div><div class=\"line\">                    arr[j+<span class=\"number\">1</span>] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.选择排序<br>选择排序与冒泡排序有点相似之次，就是都需要比较n(n+1)/2次，不过它是把最小的数字，排在最前面，第2小的数字，排在第2位，虽然比较次数与冒泡排序一样，但数据交换次却常常比冒泡排序少很多，所以它的效率比冒泡排序更高一点。演示：<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6 1轮,1次，比较5,1<br>1,5,7,0,9,2,3,8,4,6 1轮,2次，比较1,7<br>0,5,7,1,9,2,3,8,4,6 1轮,3次，比较1,0<br>……<br>0,5,7,1,9,2,3,8,4,6 1轮,9次，比较0,6<br>第1轮结束，注意了，第一轮第3次之后虽然会一直比较下去，直到0与6比较，但是0已经是最小的数字了，所以之后比较，都无需进行数据交换，提高了效率，但这是不稳定的。</p>\n<p>0,5,7,1,9,2,3,8,4,6 2轮,1次，比较5,7<br>0,1,7,5,9,2,3,8,4,6 2轮,2次，比较5,1<br>……<br>0,1,7,5,9,2,3,8,4,6 2轮,8次，比较1,6<br>重复n-1轮，得出最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//选择排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(j = i+<span class=\"number\">1</span>;j &lt; len;j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(arr[i] &gt; arr[j])&#123;</div><div class=\"line\">                    temp = arr[i];</div><div class=\"line\">                    arr[i] = arr[j];</div><div class=\"line\">                    arr[j] = temp;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.插入排序<br>插入排序，是把数据一个插入已排序的数组中，只需插入n-1遍。<br>5,1,7,0,9,2,3,8,4,6<br>1,5,7,0,9,2,3,8,4,6    1插入[5]中结果<br>1,5,7,0,9,2,3,8,4,6    7插入[1,5]中结果<br>0,1,5,7,9,2,3,8,4,6    0插入[1,5,7]中结果<br>0,1,5,7,9,2,3,8,4,6    9插入[0,1,5,7]中结果<br>……<br>0,1,2,3,4,5,7,8,9,6    4插入[0,1,2,3,5,7,8,9,6]中结果<br>0,1,2,3,4,5,6,7,8,9    6插入[0,1,2,3,4,5,6,7,8,9]中结果<br>一共比较n(n+1)/2次，最坏的情况也需要交换这么多次数据，最好的情况，一次数据交换也不需要，所以它是不稳定的，但一般比选择排序快上一些。</p>\n<p>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> i,j,temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; len;i++)&#123;</div><div class=\"line\">            temp = arr[i];</div><div class=\"line\">            j = i;</div><div class=\"line\">            <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">0</span> &amp;&amp; arr[j<span class=\"number\">-1</span>] &gt; temp)&#123;</div><div class=\"line\">                arr[j] = arr[j<span class=\"number\">-1</span>];</div><div class=\"line\">                j--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            arr[j] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.归并排序<br>归并排序，则是把已经排好序的子数组合并成一个大的数组。<br>5,1,7,0,9,2,3,8,4,6<br>5,  1,  7,  0,  9,  2,  3,  8,  4,  6<br>step 1<br>1,5,  0,7,  2,9,  3,8  4,6<br>step 2<br>0,1,5,7,  2,3,8,9,  4,6<br>step 4<br>0,1,2,3,5,7,8,9,  4,6</p>\n<p>最终<br>0,1,2,3,4,5,6,7,8,9</p>\n<p>归并排序相对稳定，并且占用内存少，效率一般也比插入排序高。如数据量巨大，不方便使用太占内存的算法时，归并排序是你的选择！<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> left, right;</div><div class=\"line\">    <span class=\"keyword\">while</span>(step &lt; arr.length)&#123;</div><div class=\"line\">        left = <span class=\"number\">0</span>;</div><div class=\"line\">        right = step;</div><div class=\"line\">        <span class=\"keyword\">while</span>(right + step &lt;= arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, right+step);</div><div class=\"line\">            left = right + step;</div><div class=\"line\">            right = left + step;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (right &lt; arr.length)&#123;</div><div class=\"line\">            mergeArrays(arr, left, left+step, right, arr.length);</div><div class=\"line\">        &#125;</div><div class=\"line\">        step *= <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeArrays</span>(<span class=\"params\">arr, startLeft, stopLeft, startRight, stopRight</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> leftArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopLeft - startLeft + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> rightArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(stopRight - startRight + <span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> k = startLeft;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (leftArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        leftArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    k = startRight;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; (rightArr.length<span class=\"number\">-1</span>);i++)&#123;</div><div class=\"line\">        rightArr[i] = arr[k];</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    rightArr[rightArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    leftArr[leftArr.length<span class=\"number\">-1</span>] = <span class=\"literal\">Infinity</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = <span class=\"number\">0</span>,n = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(k = startLeft;k &lt; stopRight;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (leftArr[m] &lt;= rightArr[n])&#123;</div><div class=\"line\">            arr[k] = leftArr[m];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            arr[k] = rightArr[n];</div><div class=\"line\">            n++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.希尔排序<br>希尔排序，又是插入排序的改良版，即分组插入。<br>5,1,7,0,9,2,3,8,4,6<br>g为5时，分成5组<br>5与2比较，1与3比较，7与8比较，0与4比较，9与6比较<br>2,1,7,0,6,5,3,8,4,9<br>g为2时，分成2组<br>2,7,6,3,4与1,0,5,8,9，分别进行插入排序得到2,3,4,6,7与0,1,5,8,9<br>结果为<br>2,0,3,1,4,5,6,8,9,9<br>g为1时，进行插入排序得到<br>0,1,2,3,4,5,6,8,9,7,8<br>其并不稳定，但因为使用间隔比较，减少了交换次数，在多数情况，比归并更快一点点。<br>代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//希尔排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shellSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> g,i,j, k,temp;</div><div class=\"line\">        <span class=\"comment\">//第几轮分组</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(g = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>);g &gt; <span class=\"number\">0</span>;g = <span class=\"built_in\">Math</span>.floor(g / <span class=\"number\">2</span>))&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; g;i++)&#123;</div><div class=\"line\">                <span class=\"keyword\">for</span>(j = i + g;j &lt; len;j = j + g)&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(arr[j - g] &gt; arr[j])&#123;</div><div class=\"line\">                        temp = arr[j];</div><div class=\"line\">                        k = j - g;</div><div class=\"line\">                        <span class=\"keyword\">while</span>(k &gt;= <span class=\"number\">0</span> &amp;&amp; arr[k] &gt; temp)&#123;</div><div class=\"line\">                            arr[k + g] = arr[k];</div><div class=\"line\">                            k = k - g;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        arr[k + g] = temp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.快速排序<br>快速排序即排序很快速！那为什么它这么快？<br>官方的描述是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br>我们用实例来演示一下：<br>5,1,7,0,9,2,3,8,4,6<br>选中第0个元素即5作为中间值(不是大小的中间值，只是确定一个固定比较对象)，比5小的放在左数组，比5大的放在右数组，则变成<br>[1,0,2,3,4]+5+[7,9,8,6]<br>与此同时(不是第二步，整个过程都是在1步完成的)，选中左、右数组的第1个元素作为中间值。(ps: 为了好看，我把中间写成是一个数字，其实它是一个单元素数组)<br>[0] + 1 + [2,3,4] + 5 + [6] + 7 + [9,8]<br>与此同时再分解<br>[0] + 1 +  2 + [3,4] + 5 + [6] + 7 + 9 + [8]<br>同时<br>[0] + 1 +  2 +  3 + [4] + 5 + [6] + 7 + 9 + [8]<br>快的原因就是它使用空间换取时间，不断回调自己。如果数据量太大，其实是不建议这么干的。<br>后面我做了一个小数据量（即10000）的情况下，内存基本没什么影响，使用不同的数据，计算了100次，算出其效率比希尔排序还要快10倍，比冒泡排序快4698倍，数据量越大，其占内存越大，同时，其与其他排序方式的速度差距也越大。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</div><div class=\"line\">    <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> arr;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> smallArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> largeArr = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            smallArr.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            largeArr.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> quickSort(smallArr).concat(pivot, quickSort(largeArr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上算法的demo : <a href=\"http://www.boatsky.com/static/js/demo/sort_demo.js\">http://www.boatsky.com/static/js/demo/sort_demo.js</a></p>\n<p>这里写一个简单的程序，对上述算法时间计算，各个数组10000个数字，计算100次，取平均值，此处以快速排序为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"comment\">//以为是计算时间例子</span></div><div class=\"line\"><span class=\"comment\">//分别是每次的计算的开始时间与结束时间</span></div><div class=\"line\"><span class=\"keyword\">var</span> d1,d2;</div><div class=\"line\"><span class=\"comment\">//保存每次计算的时候</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrTime = [];</div><div class=\"line\"><span class=\"comment\">//随机生成数组元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getArr</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> arr = [];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10000</span>;i++)&#123;</div><div class=\"line\">        arr.push(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10000</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//快速排序</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取时间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTime</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//计算100次，取平均值，减小误差</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;k &lt; <span class=\"number\">100</span>;k++)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> arr = getArr();</div><div class=\"line\">        d1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arr = quickSort(arr);</div><div class=\"line\">        d2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\">        arrTime.push(d2-d1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> all = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> m = <span class=\"number\">0</span>;m &lt; arrTime.length;m++)&#123;</div><div class=\"line\">        all = all + arrTime[m];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arrTime);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(all/arrTime.length);</div><div class=\"line\">&#125;</div><div class=\"line\">getTime();</div></pre></td></tr></table></figure>\n<p>统计100次  平均时间(ms)    时间复杂度                空间复杂度           稳定性<br>冒泡排序       704.69       O(n(n+1)/2)               O(1)                   稳定<br>选择排序       214.31       O(n(n+1)/2)               O(1)                   稳定<br>插入排序       50.62       O(n)~O(n^2/2)           O(1)                   不稳定<br>归并排序       2.16           O(n log n)               O(n)                   稳定<br>希尔排序       1.5           O(n log n) ~ O(n^2)     O(1)                   不稳定<br>快速排序       0.15           O(n log 2 n) ~ O(n^2)   O(log 2 n) ~ O(n)    不稳定</p>\n<p>所以说，上述6种常见算法中，快速排序是最快的，但如果数据量太大时，内存占用大，而希尔排序速度较快，占内存小，稳定性略差。多数情况下都推荐这两种。</p>\n<p>所以，根据你数据的类型，数据量的大小，机器内存的大小，进行一定的测试，选择最适合你的排序吧。</p>\n<p>所以说，不要在任何情况下都用冒泡排序啦！！！</p>"},{"title":"立即显示上传的图片(无需上传到服务器)","date":"2017-04-06T06:11:33.000Z","_content":"## 一、简介\n\n>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？\n\n<!-- more -->\n\n## 二、实现方法\n\n可以直接查看下面的代码，使用jquery来实现的\n\n``` javascript\n\n$(function() {  \n    /*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/  \n    $(\"#fileupload\").change(function() {  \n        var $file = $(this);  \n        var objUrl = $file[0].files[0];  \n        //获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  \n        var windowURL = window.URL || window.webkitURL;  \n        //createObjectURL创建一个指向该参数对象(图片)的URL  \n        var dataURL;  \n        dataURL = windowURL.createObjectURL(objUrl);  \n        $(\"#imageview\").attr(\"src\",dataURL);  \n    });  \n});  \n\n\n```\n\n页面代码\n``` javascript\n<body>  \n    <input id=\"fileupload\" type=\"file\" />  \n    <img id=\"imageview\" >  \n</body> \n\n```\n","source":"_posts/2017-04-06-立即显示上传的图片.md","raw":"---\ntitle: 立即显示上传的图片(无需上传到服务器)\ndate: 2017-04-06 14:11:33\ntags: \n- img\n- upload\n- file\ncategories: \n- 分享\n---\n## 一、简介\n\n>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？\n\n<!-- more -->\n\n## 二、实现方法\n\n可以直接查看下面的代码，使用jquery来实现的\n\n``` javascript\n\n$(function() {  \n    /*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/  \n    $(\"#fileupload\").change(function() {  \n        var $file = $(this);  \n        var objUrl = $file[0].files[0];  \n        //获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  \n        var windowURL = window.URL || window.webkitURL;  \n        //createObjectURL创建一个指向该参数对象(图片)的URL  \n        var dataURL;  \n        dataURL = windowURL.createObjectURL(objUrl);  \n        $(\"#imageview\").attr(\"src\",dataURL);  \n    });  \n});  \n\n\n```\n\n页面代码\n``` javascript\n<body>  \n    <input id=\"fileupload\" type=\"file\" />  \n    <img id=\"imageview\" >  \n</body> \n\n```\n","slug":"立即显示上传的图片","published":1,"updated":"2017-04-10T02:00:22.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1ye344f000fb4sbys6c6exj","content":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"二、实现方法\"><a href=\"#二、实现方法\" class=\"headerlink\" title=\"二、实现方法\"></a>二、实现方法</h2><p>可以直接查看下面的代码，使用jquery来实现的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">/*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/</span>  </div><div class=\"line\">    $(<span class=\"string\">\"#fileupload\"</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> $file = $(<span class=\"keyword\">this</span>);  </div><div class=\"line\">        <span class=\"keyword\">var</span> objUrl = $file[<span class=\"number\">0</span>].files[<span class=\"number\">0</span>];  </div><div class=\"line\">        <span class=\"comment\">//获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> windowURL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;  </div><div class=\"line\">        <span class=\"comment\">//createObjectURL创建一个指向该参数对象(图片)的URL  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> dataURL;  </div><div class=\"line\">        dataURL = windowURL.createObjectURL(objUrl);  </div><div class=\"line\">        $(<span class=\"string\">\"#imageview\"</span>).attr(<span class=\"string\">\"src\"</span>,dataURL);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>页面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;  </div><div class=\"line\">    &lt;input id=\"fileupload\" type=\"file\" /&gt;  </div><div class=\"line\">    &lt;img id=\"imageview\" &gt;  </div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><blockquote>\n<p>很多时候我们上传图片都是要等待后端响应之后才获取图片数据去显示到也没上，但是有时候响应很慢，我有希望能够无需等待后端响应就显示上传的缩略图，那怎么做呢？</p>\n</blockquote>","more":"<h2 id=\"二、实现方法\"><a href=\"#二、实现方法\" class=\"headerlink\" title=\"二、实现方法\"></a>二、实现方法</h2><p>可以直接查看下面的代码，使用jquery来实现的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">/*原理是把本地图片路径：\"D(盘符):/image/...\"转为\"http://...\"格式路径来进行显示图片*/</span>  </div><div class=\"line\">    $(<span class=\"string\">\"#fileupload\"</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> $file = $(<span class=\"keyword\">this</span>);  </div><div class=\"line\">        <span class=\"keyword\">var</span> objUrl = $file[<span class=\"number\">0</span>].files[<span class=\"number\">0</span>];  </div><div class=\"line\">        <span class=\"comment\">//获得一个http格式的url路径:mozilla(firefox)||webkit or chrome  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> windowURL = <span class=\"built_in\">window</span>.URL || <span class=\"built_in\">window</span>.webkitURL;  </div><div class=\"line\">        <span class=\"comment\">//createObjectURL创建一个指向该参数对象(图片)的URL  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> dataURL;  </div><div class=\"line\">        dataURL = windowURL.createObjectURL(objUrl);  </div><div class=\"line\">        $(<span class=\"string\">\"#imageview\"</span>).attr(<span class=\"string\">\"src\"</span>,dataURL);  </div><div class=\"line\">    &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>页面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;  </div><div class=\"line\">    &lt;input id=\"fileupload\" type=\"file\" /&gt;  </div><div class=\"line\">    &lt;img id=\"imageview\" &gt;  </div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1ye342k0000b4sb3prmnp3n","category_id":"cj1ye343k0003b4sb4n5ym9ig","_id":"cj1ye3448000bb4sbdeuol2qy"},{"post_id":"cj1ye342z0002b4sb3c1wr8qc","category_id":"cj1ye34440008b4sby4k35okr","_id":"cj1ye344i000gb4sb73qe09r4"},{"post_id":"cj1ye344f000fb4sbys6c6exj","category_id":"cj1ye343k0003b4sb4n5ym9ig","_id":"cj1ye344l000kb4sbkram6yas"},{"post_id":"cj1ye343p0005b4sbdu0a4pnt","category_id":"cj1ye343k0003b4sb4n5ym9ig","_id":"cj1ye344n000nb4sbze67vi7e"},{"post_id":"cj1ye343w0006b4sbi163y6a5","category_id":"cj1ye34440008b4sby4k35okr","_id":"cj1ye344q000qb4sbhye51mfj"},{"post_id":"cj1ye3446000ab4sbbqyykurk","category_id":"cj1ye344m000lb4sbjv5j4pju","_id":"cj1ye344w000vb4sbfr88f03r"},{"post_id":"cj1ye3446000ab4sbbqyykurk","category_id":"cj1ye344u000tb4sbs1qjir2z","_id":"cj1ye344y000yb4sbeuuo6vn6"}],"PostTag":[{"post_id":"cj1ye342k0000b4sb3prmnp3n","tag_id":"cj1ye343n0004b4sbc8lae2gv","_id":"cj1ye344l000jb4sbwui62f3g"},{"post_id":"cj1ye342k0000b4sb3prmnp3n","tag_id":"cj1ye34450009b4sbjiy2fwwr","_id":"cj1ye344n000mb4sb99hmxhc3"},{"post_id":"cj1ye342k0000b4sb3prmnp3n","tag_id":"cj1ye344d000eb4sb0nyuvnod","_id":"cj1ye344q000pb4sbmjboayk0"},{"post_id":"cj1ye342z0002b4sb3c1wr8qc","tag_id":"cj1ye344k000ib4sbzx58mo1y","_id":"cj1ye344r000rb4sbzy63ghki"},{"post_id":"cj1ye343p0005b4sbdu0a4pnt","tag_id":"cj1ye344p000ob4sbw6ifcvzg","_id":"cj1ye344x000xb4sbgwj0r2q8"},{"post_id":"cj1ye343p0005b4sbdu0a4pnt","tag_id":"cj1ye344s000sb4sbyp6pvpw0","_id":"cj1ye344y000zb4sbheu22jl7"},{"post_id":"cj1ye343p0005b4sbdu0a4pnt","tag_id":"cj1ye344v000ub4sbltek0kzs","_id":"cj1ye344z0011b4sb07pbhz6t"},{"post_id":"cj1ye343w0006b4sbi163y6a5","tag_id":"cj1ye344x000wb4sbq77yr3bo","_id":"cj1ye34500013b4sbm7875o23"},{"post_id":"cj1ye343w0006b4sbi163y6a5","tag_id":"cj1ye344y0010b4sbhhnlge9y","_id":"cj1ye34510014b4sbxkzgbqtk"},{"post_id":"cj1ye3446000ab4sbbqyykurk","tag_id":"cj1ye34500012b4sb27fnzcmt","_id":"cj1ye34520016b4sbkkc8ln0v"},{"post_id":"cj1ye344f000fb4sbys6c6exj","tag_id":"cj1ye34510015b4sbl1oyiow2","_id":"cj1ye34540019b4sb6by4ri5z"},{"post_id":"cj1ye344f000fb4sbys6c6exj","tag_id":"cj1ye34520017b4sblvyo33yw","_id":"cj1ye3454001ab4sb7swapru7"},{"post_id":"cj1ye344f000fb4sbys6c6exj","tag_id":"cj1ye34530018b4sb197ydje8","_id":"cj1ye3454001bb4sbczob9k5a"}],"Tag":[{"name":"nodejs","_id":"cj1ye343n0004b4sbc8lae2gv"},{"name":"express","_id":"cj1ye34450009b4sbjiy2fwwr"},{"name":"router","_id":"cj1ye344d000eb4sb0nyuvnod"},{"name":"hexo","_id":"cj1ye344k000ib4sbzx58mo1y"},{"name":"html5","_id":"cj1ye344p000ob4sbw6ifcvzg"},{"name":"workers","_id":"cj1ye344s000sb4sbyp6pvpw0"},{"name":"web api","_id":"cj1ye344v000ub4sbltek0kzs"},{"name":"webpack","_id":"cj1ye344x000wb4sbq77yr3bo"},{"name":"jquery","_id":"cj1ye344y0010b4sbhhnlge9y"},{"name":"vuejs","_id":"cj1ye34500012b4sb27fnzcmt"},{"name":"img","_id":"cj1ye34510015b4sbl1oyiow2"},{"name":"upload","_id":"cj1ye34520017b4sblvyo33yw"},{"name":"file","_id":"cj1ye34530018b4sb197ydje8"}]}}